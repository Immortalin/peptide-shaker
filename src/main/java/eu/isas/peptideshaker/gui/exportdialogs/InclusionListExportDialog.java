package eu.isas.peptideshaker.gui.exportdialogs;

import com.compomics.util.experiment.biology.Peptide;
import com.compomics.util.experiment.identification.SearchParameters;
import com.compomics.util.experiment.identification.matches.PeptideMatch;
import com.compomics.util.experiment.identification.matches.ProteinMatch;
import com.compomics.util.experiment.identification.matches.SpectrumMatch;
import com.compomics.util.experiment.massspectrometry.Precursor;
import com.compomics.util.experiment.massspectrometry.SpectrumFactory;
import com.compomics.util.gui.renderers.AlignedListCellRenderer;
import com.compomics.util.gui.waiting.waitinghandlers.ProgressDialogX;
import eu.isas.peptideshaker.myparameters.PSParameter;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;

/**
 * Dialog for setting the inclusion list export settings.
 *
 * @author Harald Barsnes
 */
public class InclusionListExportDialog extends javax.swing.JDialog {

    /**
     * References to the follow up export dialog.
     */
    private FollowupPreferencesDialog followupPreferencesDialog;
    /**
     * A simple progress dialog.
     */
    private static ProgressDialogX progressDialog;
    /**
     * The selected PSM export type.
     */
    private int selectedPsmType; // @TODO: should be an enum
    /**
     * The spectrum factory.
     */
    private SpectrumFactory spectrumFactory = SpectrumFactory.getInstance();

    /**
     * Creates a new InclusionListExportDialog.
     *
     * @param followupPreferencesDialog
     * @param modal
     * @param selectedPsmType the PTM category to export 
     */
    public InclusionListExportDialog(FollowupPreferencesDialog followupPreferencesDialog, boolean modal, int selectedPsmType) {
        super(followupPreferencesDialog, modal);
        this.followupPreferencesDialog = followupPreferencesDialog;
        this.selectedPsmType = selectedPsmType;
        initComponents();
        vendorCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        setLocationRelativeTo(followupPreferencesDialog);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        proteinFilterPanel = new javax.swing.JPanel();
        relatedProteinsCheck = new javax.swing.JCheckBox();
        relatredAndUnrelatedCheck = new javax.swing.JCheckBox();
        unrelatedCheck = new javax.swing.JCheckBox();
        peptideFilterPanel = new javax.swing.JPanel();
        miscleavedCheck = new javax.swing.JCheckBox();
        reactiveCheck = new javax.swing.JCheckBox();
        degeneratedCheck = new javax.swing.JCheckBox();
        rtFilterPanel = new javax.swing.JPanel();
        rtWindow = new javax.swing.JTextField();
        minRtWindowUnitLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        formatPanel = new javax.swing.JPanel();
        vendorCmb = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export Settings");
        setResizable(false);

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        proteinFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Protein Filter"));
        proteinFilterPanel.setOpaque(false);

        relatedProteinsCheck.setText("Related Proteins");
        relatedProteinsCheck.setIconTextGap(15);
        relatedProteinsCheck.setOpaque(false);

        relatredAndUnrelatedCheck.setText("Related and Unrelated Proteins");
        relatredAndUnrelatedCheck.setIconTextGap(15);
        relatredAndUnrelatedCheck.setOpaque(false);

        unrelatedCheck.setSelected(true);
        unrelatedCheck.setText("Unrelated Proteins");
        unrelatedCheck.setIconTextGap(15);
        unrelatedCheck.setOpaque(false);

        javax.swing.GroupLayout proteinFilterPanelLayout = new javax.swing.GroupLayout(proteinFilterPanel);
        proteinFilterPanel.setLayout(proteinFilterPanelLayout);
        proteinFilterPanelLayout.setHorizontalGroup(
            proteinFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(proteinFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(relatedProteinsCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relatredAndUnrelatedCheck)
                    .addComponent(unrelatedCheck))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        proteinFilterPanelLayout.setVerticalGroup(
            proteinFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(relatedProteinsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(relatredAndUnrelatedCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unrelatedCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        peptideFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Peptide Filter"));
        peptideFilterPanel.setOpaque(false);

        miscleavedCheck.setSelected(true);
        miscleavedCheck.setText("Miscleaved Peptides");
        miscleavedCheck.setIconTextGap(15);
        miscleavedCheck.setOpaque(false);

        reactiveCheck.setSelected(true);
        reactiveCheck.setText("Reactive Peptides");
        reactiveCheck.setIconTextGap(15);
        reactiveCheck.setOpaque(false);

        degeneratedCheck.setSelected(true);
        degeneratedCheck.setText("Degenerated Peptides");
        degeneratedCheck.setIconTextGap(15);
        degeneratedCheck.setOpaque(false);

        javax.swing.GroupLayout peptideFilterPanelLayout = new javax.swing.GroupLayout(peptideFilterPanel);
        peptideFilterPanel.setLayout(peptideFilterPanelLayout);
        peptideFilterPanelLayout.setHorizontalGroup(
            peptideFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptideFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(peptideFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(degeneratedCheck)
                    .addComponent(reactiveCheck)
                    .addComponent(miscleavedCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        peptideFilterPanelLayout.setVerticalGroup(
            peptideFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptideFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(miscleavedCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reactiveCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(degeneratedCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rtFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Retention Time Filter"));
        rtFilterPanel.setOpaque(false);

        rtWindow.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rtWindow.setText("20");

        minRtWindowUnitLabel.setText("s");

        jLabel1.setText("Min RT");

        javax.swing.GroupLayout rtFilterPanelLayout = new javax.swing.GroupLayout(rtFilterPanel);
        rtFilterPanel.setLayout(rtFilterPanelLayout);
        rtFilterPanelLayout.setHorizontalGroup(
            rtFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rtFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rtWindow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(minRtWindowUnitLabel)
                .addContainerGap())
        );
        rtFilterPanelLayout.setVerticalGroup(
            rtFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rtFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rtFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minRtWindowUnitLabel)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        formatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Format"));
        formatPanel.setOpaque(false);

        vendorCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Thermo", "ABI", "Bruker", "MassLynx" }));

        javax.swing.GroupLayout formatPanelLayout = new javax.swing.GroupLayout(formatPanel);
        formatPanel.setLayout(formatPanelLayout);
        formatPanelLayout.setHorizontalGroup(
            formatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vendorCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        formatPanelLayout.setVerticalGroup(
            formatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vendorCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formatPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(peptideFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(proteinFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rtFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );

        backgroundPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peptideFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rtFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Close the dialog without exporting.
     *
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Open a file chooser and when file is selected start the export.
     *
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        if (validateInput()) {

            final JFileChooser fileChooser = new JFileChooser(followupPreferencesDialog.getPeptideShakerGUI().getLastSelectedFolder());
            fileChooser.setDialogTitle("Select Destination File");
            fileChooser.setMultiSelectionEnabled(false);

            FileFilter filter = new FileFilter() {
                @Override
                public boolean accept(File myFile) {
                    if (vendorCmb.getSelectedIndex() == 2) {
                        return myFile.isDirectory() || myFile.getName().endsWith(".csv");
                    }
                    return myFile.isDirectory() || myFile.getName().endsWith(".txt");
                }

                @Override
                public String getDescription() {
                    switch (vendorCmb.getSelectedIndex()) {
                        case 0:
                            return "(Thermo inclusion list) .txt";
                        case 1:
                            return "(ABI inclusion list) .txt";
                        case 2:
                            return "(Bruker inclusion list) .csv";
                        case 3:
                            return "(MassLynx inclusion list) .txt";
                        default:
                            return "(unknown format) .txt";
                    }
                }
            };

            fileChooser.setFileFilter(filter);

            int returnVal = fileChooser.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {

                File tempOutputFile = fileChooser.getSelectedFile();

                int outcome = JOptionPane.YES_OPTION;

                if (tempOutputFile.exists()) {
                    outcome = JOptionPane.showConfirmDialog(this,
                            "Should " + tempOutputFile + " be overwritten?", "Selected File Already Exists",
                            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                }

                if (outcome == JOptionPane.YES_OPTION) {

                    if (vendorCmb.getSelectedIndex() == 2) {
                        if (!tempOutputFile.getName().endsWith(".csv")) {
                            tempOutputFile = new File(tempOutputFile.getParent(), tempOutputFile.getName() + ".csv");
                        }
                    } else {
                        if (!tempOutputFile.getName().endsWith(".txt")) {
                            tempOutputFile = new File(tempOutputFile.getParent(), tempOutputFile.getName() + ".txt");
                        }
                    }
                    
                    dispose();

                    progressDialog = new ProgressDialogX(this, followupPreferencesDialog.getPeptideShakerGUI(),
                            Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                            Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                            true);
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Exporting. Please Wait...");

                    // needed due to threading issues
                    final File outputFile = tempOutputFile;

                    new Thread(new Runnable() {
                        public void run() {
                            progressDialog.setVisible(true);
                        }
                    }, "ProgressDialog").start();

                    new Thread("SaveThread") {
                        @Override
                        public void run() {

                            try {
                                ArrayList<String> inspectedProteins;

                                if (selectedPsmType == 4) {
                                    inspectedProteins = followupPreferencesDialog.getPeptideShakerGUI().getDisplayedProteins();
                                } else {
                                    inspectedProteins = new ArrayList<String>(followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getProteinIdentification());
                                }

                                progressDialog.setIndeterminate(false);
                                progressDialog.setMaxProgressValue(inspectedProteins.size());
                                ArrayList<String> displayedPeptides = followupPreferencesDialog.getPeptideShakerGUI().getDisplayedPeptides();
                                FileWriter f = new FileWriter(outputFile);
                                BufferedWriter b = new BufferedWriter(f);
                                PSParameter psParameter = new PSParameter();

                                // @TODO: implement better waiting handler usage

                                for (String proteinKey : inspectedProteins) {

                                    ProteinMatch proteinMatch = followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getProteinMatch(proteinKey);
                                    psParameter = (PSParameter) followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getProteinMatchParameter(proteinKey, psParameter);

                                    if (selectedPsmType == 0
                                            || selectedPsmType == 1
                                            || selectedPsmType == 3
                                            || selectedPsmType == 2 && psParameter.isValidated()) {

                                        followupPreferencesDialog.getPeptideShakerGUI().getIdentification().loadPeptideMatches(proteinMatch.getPeptideMatches(), progressDialog);
                                        followupPreferencesDialog.getPeptideShakerGUI().getIdentification().loadPeptideMatchParameters(proteinMatch.getPeptideMatches(), psParameter, progressDialog);

                                        for (String peptideKey : proteinMatch.getPeptideMatches()) {

                                            psParameter = (PSParameter) followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getPeptideMatchParameter(peptideKey, psParameter);

                                            if (selectedPsmType == 0
                                                    || selectedPsmType == 1 && psParameter.isValidated()
                                                    || selectedPsmType == 2 && psParameter.isValidated()
                                                    || selectedPsmType == 3 && displayedPeptides.contains(peptideKey)) {

                                                PeptideMatch peptideMatch = followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getPeptideMatch(peptideKey);

                                                if (!shallExclude(proteinKey, peptideMatch.getTheoreticPeptide())) {

                                                    ArrayList<Double> retentionTimes = new ArrayList<Double>();

                                                    for (String spectrumKey : peptideMatch.getSpectrumMatches()) {

                                                        if (progressDialog.isRunCanceled()) {
                                                            break;
                                                        }

                                                        Precursor precursor = spectrumFactory.getPrecursor(spectrumKey);
                                                        retentionTimes.add(precursor.getRt());
                                                    }

                                                    followupPreferencesDialog.getPeptideShakerGUI().getIdentification().loadSpectrumMatchParameters(peptideMatch.getSpectrumMatches(), psParameter, null);

                                                    for (String spectrumKey : peptideMatch.getSpectrumMatches()) {

                                                        if (progressDialog.isRunCanceled()) {
                                                            break;
                                                        }

                                                        psParameter = (PSParameter) followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getSpectrumMatchParameter(spectrumKey, psParameter);

                                                        if (psParameter.isValidated()) {
                                                            b.write(getInclusionListLine(spectrumKey, retentionTimes));
                                                        }
                                                    }
                                                }
                                            }

                                            if (progressDialog.isRunCanceled()) {
                                                break;
                                            }
                                        }
                                    }

                                    progressDialog.increaseProgressValue();

                                    if (progressDialog.isRunCanceled()) {
                                        break;
                                    }
                                }

                                b.close();
                                f.close();

                                boolean processCancelled = progressDialog.isRunCanceled();
                                progressDialog.setRunFinished();

                                if (!processCancelled) {
                                    JOptionPane.showMessageDialog(followupPreferencesDialog, "Inclusion list saved to " + fileChooser.getSelectedFile().getName() + ".",
                                            "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                                }
                            } catch (Exception e) {
                                progressDialog.setRunFinished();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(followupPreferencesDialog, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }.start();
                }
            }
        }
    }//GEN-LAST:event_okButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox degeneratedCheck;
    private javax.swing.JPanel formatPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel minRtWindowUnitLabel;
    private javax.swing.JCheckBox miscleavedCheck;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel peptideFilterPanel;
    private javax.swing.JPanel proteinFilterPanel;
    private javax.swing.JCheckBox reactiveCheck;
    private javax.swing.JCheckBox relatedProteinsCheck;
    private javax.swing.JCheckBox relatredAndUnrelatedCheck;
    private javax.swing.JPanel rtFilterPanel;
    private javax.swing.JTextField rtWindow;
    private javax.swing.JCheckBox unrelatedCheck;
    private javax.swing.JComboBox vendorCmb;
    // End of variables declaration//GEN-END:variables

    /**
     * Validates the user's input.
     *
     * @return a boolean indicating whether the input is valid.
     */
    private boolean validateInput() {
        try {
            new Double(rtWindow.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please verify the input for the RT minimal window.", "Wrong input", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Returns whether a peptide should be excluded from the inclusion list
     * according to the GUI setting and the protein match it belongs to.
     *
     * @param proteinMatch the protein match this peptide belongs to
     * @param peptide the peptide of interest
     * @return a boolean indicating whether this peptide should be excluded
     */
    private boolean shallExclude(String proteinKey, Peptide peptide) {
        if (miscleavedCheck.isSelected() && peptide.getNMissedCleavages(followupPreferencesDialog.getPeptideShakerGUI().getSearchParameters().getEnzyme()) > 0) {
            return true;
        }
        if (reactiveCheck.isSelected()) {
            String sequence = peptide.getSequence();
            if (sequence.contains("M")
                    || sequence.contains("C")
                    || sequence.contains("W")
                    || sequence.contains("NG")
                    || sequence.contains("DG")
                    || sequence.contains("QG")
                    || sequence.startsWith("N")
                    || sequence.startsWith("Q")) {
                return true;
            }
        }
        if (relatedProteinsCheck.isSelected() || relatredAndUnrelatedCheck.isSelected() || unrelatedCheck.isSelected()) {
            PSParameter pSParameter = new PSParameter();
            try {
                pSParameter = (PSParameter) followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getSpectrumMatchParameter(proteinKey, pSParameter);
            } catch (Exception e) {
                followupPreferencesDialog.getPeptideShakerGUI().catchException(e);
                return false;
            }
            if (relatedProteinsCheck.isSelected() && pSParameter.getProteinInferenceClass() == PSParameter.RELATED) {
                return true;
            }
            if (relatredAndUnrelatedCheck.isSelected() && pSParameter.getProteinInferenceClass() == PSParameter.RELATED_AND_UNRELATED) {
                return true;
            }
            if (unrelatedCheck.isSelected() && pSParameter.getProteinInferenceClass() == PSParameter.UNRELATED) {
                return true;
            }
        }
        if (degeneratedCheck.isSelected()) {
            for (String protein : peptide.getParentProteins()) {
                if (!proteinKey.contains(protein)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Returns a line to be output in an inclusion list according to the user's
     * input.
     *
     * @param spectrumKey The key of the spectrum
     * @param retentionTimes The retention times found for this peptide
     * @return a line to be appended in the inclusion list
     * @throws Exception exception thrown whenever a problem was encountered
     * while reading the spectrum file
     */
    private String getInclusionListLine(String spectrumKey, ArrayList<Double> retentionTimes) throws Exception {

        Collections.sort(retentionTimes);
        Precursor precursor = spectrumFactory.getPrecursor(spectrumKey);
        double minWindow = new Double(rtWindow.getText().trim());

        switch (vendorCmb.getSelectedIndex()) {
            case 0:
                int index = (int) (0.25 * retentionTimes.size());
                double rtMin = retentionTimes.get(index) / 60;
                index = (int) (0.75 * retentionTimes.size());
                double rtMax = retentionTimes.get(index) / 60;
                if (rtMax - rtMin < minWindow / 60) {
                    index = (int) (0.5 * retentionTimes.size());
                    rtMin = (retentionTimes.get(index) - minWindow / 2) / 60;
                    rtMax = (retentionTimes.get(index) + minWindow / 2) / 60;
                }
                return precursor.getMz() + "\t" + rtMin + "\t" + rtMax + System.getProperty("line.separator");
            case 1:
                index = (int) (0.5 * retentionTimes.size());
                double rtInMin = retentionTimes.get(index) / 60;
                return rtInMin + "\t" + precursor.getMz() + System.getProperty("line.separator");
            case 2:
                index = (int) 0.5 * retentionTimes.size();
                double rt = retentionTimes.get(index);
                int index25 = (int) (0.25 * retentionTimes.size());
                int index75 = (int) (0.75 * retentionTimes.size());
                double range = retentionTimes.get(index75) - retentionTimes.get(index25);
                if (range < minWindow) {
                    range = minWindow;
                }
                if (followupPreferencesDialog.getPeptideShakerGUI().getSearchParameters().getPrecursorAccuracyType() == SearchParameters.PrecursorAccuracyType.PPM) {
                    double deltaMZ = followupPreferencesDialog.getPeptideShakerGUI().getSearchParameters().getPrecursorAccuracy() / 1000000 * precursor.getMz();
                    double mzMin = precursor.getMz() - deltaMZ;
                    double mzMax = precursor.getMz() + deltaMZ;
                    return rt + "," + range + "," + mzMin + "," + mzMax + System.getProperty("line.separator");
                } else { // Dalton
                    SpectrumMatch spectrumMatch = followupPreferencesDialog.getPeptideShakerGUI().getIdentification().getSpectrumMatch(spectrumKey);
                    double deltaMZ = followupPreferencesDialog.getPeptideShakerGUI().getSearchParameters().getPrecursorAccuracy() / spectrumMatch.getBestAssumption().getIdentificationCharge().value;
                    double mzMin = precursor.getMz() - deltaMZ;
                    double mzMax = precursor.getMz() + deltaMZ;
                    return rt + "," + range + "," + mzMin + "," + mzMax + System.getProperty("line.separator");
                }
            case 3:
                index = (int) (0.5 * retentionTimes.size());
                rt = retentionTimes.get(index);
                return precursor.getMz() + "," + rt + System.getProperty("line.separator");
            default:
                return "";
        }
    }
}
