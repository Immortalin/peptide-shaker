package eu.isas.peptideshaker.gui;

import com.compomics.util.experiment.MsExperiment;
import com.compomics.util.experiment.ProteomicAnalysis;
import com.compomics.util.experiment.SampleAnalysisSet;
import com.compomics.util.experiment.biology.Sample;
import com.compomics.util.experiment.io.ExperimentIO;
import eu.isas.peptideshaker.IdentificationShaker;
import eu.isas.peptideshaker.idimport.IdFilter;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 * A dialog for selecting the identification files to compare and visualize.
 *
 * @author  Marc Vaudel
 * @author  Harald Barsnes
 */
public class OpenDialog extends javax.swing.JDialog {

    /**
     * The experiment conducted
     */
    MsExperiment experiment;
    /**
     * The sample analyzed
     */
    Sample sample;
    /**
     * The replicate number
     */
    int replicateNumber;
    /**
     * A reference to the main frame.
     */
    private PeptideShakerGUI peptideShakerGUI;
    /**
     * The list of identification files.
     */
    private ArrayList<File> idFiles = new ArrayList<File>();
    /**
     * Compomics experiment saver and opener
     */
    private ExperimentIO experimentIO = new ExperimentIO();
    /**
     * Boolean indicating whether we are opening a peptideshaker file
     */
    private boolean psFile = false;

    /**
     * Creates a new open dialog.
     *
     * @param peptideShaker a reference to the main frame
     * @param modal
     */
    public OpenDialog(PeptideShakerGUI peptideShaker, boolean modal) {
        super(peptideShaker, modal);
        this.peptideShakerGUI = peptideShaker;
        initComponents();
        idFilesTxt.setText(idFiles.size() + " file(s) selected.");
        this.setLocationRelativeTo(peptideShaker);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        fileImportPanel = new javax.swing.JPanel();
        sampleIdPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        clearId = new javax.swing.JButton();
        editId = new javax.swing.JButton();
        browseId = new javax.swing.JButton();
        idFilesTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        sampleNametxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        replicateNumbertxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        projectNameTxt = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        configPanel = new javax.swing.JPanel();
        idFilterPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        minPepLength = new javax.swing.JTextField();
        maxPepLength = new javax.swing.JTextField();
        xtandemMaxEvalue = new javax.swing.JTextField();
        omssaMaxEvalue = new javax.swing.JTextField();
        mascotMaxEvalue = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PeptideShaker - Open Files");
        setResizable(false);

        sampleIdPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sample Identification"));

        jLabel1.setText("Identification File(s):");

        clearId.setText("Clear");
        clearId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearIdActionPerformed(evt);
            }
        });

        editId.setText("Edit");

        browseId.setText("Browse");
        browseId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseIdActionPerformed(evt);
            }
        });

        idFilesTxt.setEditable(false);
        idFilesTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel8.setText("Sample Name:");

        sampleNametxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sampleNametxt.setText("Sample 1");

        jLabel9.setText("Replicate Number:");

        replicateNumbertxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        replicateNumbertxt.setText("0");

        javax.swing.GroupLayout sampleIdPanelLayout = new javax.swing.GroupLayout(sampleIdPanel);
        sampleIdPanel.setLayout(sampleIdPanelLayout);
        sampleIdPanelLayout.setHorizontalGroup(
            sampleIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sampleIdPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sampleIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sampleIdPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(49, 49, 49)
                        .addComponent(sampleNametxt, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
                    .addGroup(sampleIdPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(idFilesTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)))
                .addGroup(sampleIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sampleIdPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearId))
                    .addGroup(sampleIdPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(replicateNumbertxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );

        sampleIdPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseId, clearId, editId, replicateNumbertxt});

        sampleIdPanelLayout.setVerticalGroup(
            sampleIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sampleIdPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sampleIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(sampleNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(replicateNumbertxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sampleIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(clearId)
                    .addComponent(editId)
                    .addComponent(browseId)
                    .addComponent(idFilesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("Project Reference:");

        projectNameTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        projectNameTxt.setText("new Project");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        processButton.setText("Open");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileImportPanelLayout = new javax.swing.GroupLayout(fileImportPanel);
        fileImportPanel.setLayout(fileImportPanelLayout);
        fileImportPanelLayout.setHorizontalGroup(
            fileImportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileImportPanelLayout.createSequentialGroup()
                .addGroup(fileImportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileImportPanelLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fileImportPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sampleIdPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fileImportPanelLayout.createSequentialGroup()
                        .addContainerGap(560, Short.MAX_VALUE)
                        .addComponent(processButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton)))
                .addContainerGap())
        );

        fileImportPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {exitButton, processButton});

        fileImportPanelLayout.setVerticalGroup(
            fileImportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileImportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileImportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(projectNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(sampleIdPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(fileImportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(processButton))
                .addContainerGap())
        );

        jTabbedPane.addTab("File Import", fileImportPanel);

        idFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Identification Filter"));

        jLabel3.setText("Min Peptide Length:");

        jLabel4.setText("Max Peptide Length:");

        jLabel5.setText("OMSSA Max E-value:");

        jLabel6.setText("X!Tandem Max E-value:");

        jLabel7.setText("Mascot Max E-value:");

        minPepLength.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minPepLength.setText("8");

        maxPepLength.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxPepLength.setText("20");

        xtandemMaxEvalue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        xtandemMaxEvalue.setText("10");

        omssaMaxEvalue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        omssaMaxEvalue.setText("10");

        mascotMaxEvalue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        mascotMaxEvalue.setText("10");

        javax.swing.GroupLayout idFilterPanelLayout = new javax.swing.GroupLayout(idFilterPanel);
        idFilterPanel.setLayout(idFilterPanelLayout);
        idFilterPanelLayout.setHorizontalGroup(
            idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(xtandemMaxEvalue)
                    .addComponent(omssaMaxEvalue)
                    .addComponent(mascotMaxEvalue, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(maxPepLength)
                    .addComponent(minPepLength, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(129, Short.MAX_VALUE))
        );

        idFilterPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {mascotMaxEvalue, maxPepLength, minPepLength, omssaMaxEvalue, xtandemMaxEvalue});

        idFilterPanelLayout.setVerticalGroup(
            idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(idFilterPanelLayout.createSequentialGroup()
                        .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minPepLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(maxPepLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addGroup(idFilterPanelLayout.createSequentialGroup()
                            .addComponent(mascotMaxEvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(omssaMaxEvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(idFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(xtandemMaxEvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(idFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(idFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Configuration", configPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Clears the list of selected identification files.
     *
     * @param evt
     */
    private void clearIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearIdActionPerformed
        idFiles = new ArrayList<File>();
        idFilesTxt.setText(idFiles.size() + " file(s) selected.");
}//GEN-LAST:event_clearIdActionPerformed

    /**
     * Opens a file chooser where the identification files to open can be
     * selected.
     *
     * @param evt
     */
    private void browseIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseIdActionPerformed

        JFileChooser fileChooser = new JFileChooser(peptideShakerGUI.getLastSelectedFolder());
        fileChooser.setDialogTitle("Select Identification File(s)");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setMultiSelectionEnabled(true);

        FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(File myFile) {
                return myFile.getName().endsWith("dat")
                        || myFile.getName().endsWith("omx")
                        || myFile.getName().endsWith("xml")
                        || myFile.getName().endsWith("cps")
                        || myFile.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Supported formats: Mascot (.dat), OMSSA (.omx), X!Tandem (.xml), Peptide Shaker (.cps)";
            }
        };

        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showDialog(this.getParent(), "Add");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            for (File newFile : fileChooser.getSelectedFiles()) {
                if (newFile.isDirectory()) {
                    File[] tempFiles = newFile.listFiles();
                    for (File file : tempFiles) {
                        if (file.getName().endsWith("dat")
                                || file.getName().endsWith("omx")
                                || file.getName().endsWith("xml")
                                || file.getName().endsWith("cps")) {
                            idFiles.add(file);
                        }
                    }
                } else {
                    idFiles.add(newFile);
                }
                peptideShakerGUI.setLastSelectedFolder(newFile.getPath());
            }

            if (idFiles.size() > 1) {
                for (File file : idFiles) {
                    if (file.getName().endsWith(".cps")) {
                        JOptionPane.showMessageDialog(this, "A PeptideShaker file must be imported alone.", "Wrong identification file.", JOptionPane.ERROR_MESSAGE);
                        idFiles = new ArrayList<File>();
                    }
                }
            }
            idFilesTxt.setText(idFiles.size() + " file(s) selected.");

            if (idFiles.size() == 1 && idFiles.get(0).getName().endsWith(".cps")) {
                importPeptideShakerFile(idFiles.get(0));
                psFile = true;
            } else {
                projectNameTxt.setEditable(true);
                sampleNametxt.setEditable(true);
                replicateNumbertxt.setEditable(true);
                psFile = false;
            }
        }
}//GEN-LAST:event_browseIdActionPerformed

    /**
     * Closes the dialog.
     *
     * @param evt
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.setVisible(false);
        this.dispose();
}//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Tries to process the identification files, closes the dialog and then
     * opens the results in the main frame.
     *
     * @param evt
     */
    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        if (validateInput()) {
            if (psFile) {
                peptideShakerGUI.setProject(experiment, sample, replicateNumber);
                peptideShakerGUI.displayResults();
                this.dispose();
            } else {
                experiment = new MsExperiment(projectNameTxt.getText().trim());
                sample = new Sample(sampleNametxt.getText().trim());
                SampleAnalysisSet analysisSet = new SampleAnalysisSet(sample, new ProteomicAnalysis(getReplicateNumber()));
                replicateNumber = getReplicateNumber();
                peptideShakerGUI.setProject(experiment, sample, replicateNumber);
                experiment.addAnalysisSet(sample, analysisSet);
                WaitingDialog waitingDialog = new WaitingDialog(peptideShakerGUI, true, experiment.getReference());
                IdentificationShaker identificationShaker = new IdentificationShaker();
                IdFilter idFilter = new IdFilter(getMinPeptideLength(), getMaxPeptideLength(), getMascotMaxEvalue(), getOmssaMaxEvalue(), getXtandemMaxEvalue());
                identificationShaker.importIdentifications(waitingDialog, experiment, sample, replicateNumber, idFilter, idFiles);
                this.dispose();
            }
        }
}//GEN-LAST:event_processButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseId;
    private javax.swing.JButton clearId;
    private javax.swing.JPanel configPanel;
    private javax.swing.JButton editId;
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel fileImportPanel;
    private javax.swing.JTextField idFilesTxt;
    private javax.swing.JPanel idFilterPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField mascotMaxEvalue;
    private javax.swing.JTextField maxPepLength;
    private javax.swing.JTextField minPepLength;
    private javax.swing.JTextField omssaMaxEvalue;
    private javax.swing.JButton processButton;
    private javax.swing.JTextField projectNameTxt;
    private javax.swing.JTextField replicateNumbertxt;
    private javax.swing.JPanel sampleIdPanel;
    private javax.swing.JTextField sampleNametxt;
    private javax.swing.JTextField xtandemMaxEvalue;
    // End of variables declaration//GEN-END:variables

    /**
     * Validates the input parameters.
     *
     * @return true if the input is valid, false otherwise.
     */
    private boolean validateInput() {

        if (idFiles.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select identification files.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            getMinPeptideLength();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please verify the input for min peptide length.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            getMaxPeptideLength();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please verify the input for max peptide length.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            getMascotMaxEvalue();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please verify the input for Mascot max e-value.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            getOmssaMaxEvalue();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please verify the input for OMSSA max e-value.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            getXtandemMaxEvalue();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please verify the input for X!Tandem max e-value.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            getReplicateNumber();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please verify the input for replicate number.",
                    "Input Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Returns the minimum peptide length.
     *
     * @return the minimum peptide length
     */
    private int getMinPeptideLength() {
        String input = minPepLength.getText().trim();
        if (input == null || input.equals("")) {
            input = "0";
        }
        return new Integer(input);
    }

    /**
     * Returns the maximum peptide length.
     *
     * @return  the maximum peptide length
     */
    private int getMaxPeptideLength() {
        String input = maxPepLength.getText().trim();
        if (input == null || input.equals("")) {
            input = "0";
        }
        return new Integer(input);
    }

    /**
     * Returns the Mascot max e-value.
     *
     * @return the Mascot max e-value
     */
    private double getMascotMaxEvalue() {
        String input = mascotMaxEvalue.getText().trim();
        if (input == null || input.equals("")) {
            input = "0";
        }
        return new Double(input);
    }

    /**
     * Returns the OMSSA max e-value.
     *
     * @return the OMSSA max e-value
     */
    private double getOmssaMaxEvalue() {
        String input = omssaMaxEvalue.getText().trim();
        if (input == null || input.equals("")) {
            input = "0";
        }
        return new Double(input);
    }

    /**
     * Returns the XTandem max e-value.
     *
     * @return the XTandem max e-value
     */
    private double getXtandemMaxEvalue() {
        String input = xtandemMaxEvalue.getText().trim();
        if (input == null || input.equals("")) {
            input = "0";
        }
        return new Double(input);
    }

    /**
     * Returns the replicate number.
     *
     * @return the replicate number
     */
    private int getReplicateNumber() {
        return new Integer(replicateNumbertxt.getText().trim());
    }

    /**
     * Imports informations from a peptide shaker file
     * @param psFile    the peptide shaker file
     */
    private void importPeptideShakerFile(File psFile) {
        try {
            Date date = experimentIO.getDate(psFile);
            // Would need a progress bar here for big projects

            experiment = experimentIO.loadExperiment(psFile);
            projectNameTxt.setText(experiment.getReference());
            projectNameTxt.setEditable(false);

            ArrayList<Sample> samples = new ArrayList(experiment.getSamples().values());
            if (samples.size() == 1) {
                sample = samples.get(0);
            } else {
                String[] sampleNames = new String[samples.size()];
                for (int cpt = 0; cpt < sampleNames.length; cpt++) {
                    sampleNames[cpt] = samples.get(cpt).getReference();
                }
                SampleSelection sampleSelection = new SampleSelection(null, true, sampleNames, "sample");
                sampleSelection.setVisible(true);
                String choice = sampleSelection.getChoice();
                for (Sample sampleTemp : samples) {
                    if (sampleTemp.getReference().equals(choice)) {
                        sample = sampleTemp;
                        break;
                    }
                }
            }
            sampleNametxt.setText(sample.getReference());
            sampleNametxt.setEditable(false);

            ArrayList<Integer> replicates = new ArrayList(experiment.getAnalysisSet(sample).getReplicateNumberList());
            if (replicates.size() == 1) {
                replicateNumber = replicates.get(0);
            } else {
                String[] replicateNames = new String[replicates.size()];
                for (int cpt = 0; cpt < replicateNames.length; cpt++) {
                    replicateNames[cpt] = samples.get(cpt).getReference();
                }
                SampleSelection sampleSelection = new SampleSelection(null, true, replicateNames, "replicate");
                sampleSelection.setVisible(true);
                Integer choice = new Integer(sampleSelection.getChoice());
                replicateNumber = choice;
            }
            replicateNumbertxt.setText(replicateNumber + "");
            replicateNumbertxt.setEditable(false);
            JOptionPane.showMessageDialog(this, "Experiment " + experiment.getReference() + " created on " + date.toString() + " imported.", "Identifications Imported.", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occured while reading" + psFile + ". Please verif that the compomics utilities version used to create the file was the same as the one used by your version of Reporter.", "File Input Error.", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
}
