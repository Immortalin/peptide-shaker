package eu.isas.peptideshaker.gui;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

/**
 * A dialog displaying various filters that can be applied to the protein tables.
 *
 * @author Harald Barsnes
 */
public class ProteinFilter extends javax.swing.JDialog {

    /**
     * The protein table.
     */
    private JTable proteinTable;
    /**
     * The PeptideShakerGUI parent frame.
     */
    private PeptideShakerGUI peptideShakerGUI;

    /**
     * Creates a new ProteinFilter dialog.
     *
     * @param peptideShakerGUI                              the PeptideShakerGUI parent frame
     * @param modal                                         if the dialog is modal or not
     * @param currentProteinFilterValues                    the current filter text values
     * @param currrentProteinFilterRadioButtonSelections    the current filter radio button settings
     * @param visible                                       if true the dialog is made visible
     */
    public ProteinFilter(PeptideShakerGUI peptideShakerGUI, boolean modal, String[] currentProteinFilterValues, Integer[] currrentProteinFilterRadioButtonSelections, boolean visible) {
        super(peptideShakerGUI, modal);

        this.peptideShakerGUI = peptideShakerGUI;

        proteinTable = peptideShakerGUI.getOverviewProteinTable();

        initComponents();

        // update the filter properties
        proteinAccessionJTextField.setText(currentProteinFilterValues[0]);
        descriptionJTextField.setText(currentProteinFilterValues[1]);
        coverageJTextField.setText(currentProteinFilterValues[2]);
        emPAIJTextField.setText(currentProteinFilterValues[3]);
        peptideJTextField.setText(currentProteinFilterValues[4]);
        spectraJTextField.setText(currentProteinFilterValues[5]);
        scoreJTextField.setText(currentProteinFilterValues[6]);
        confidenceJTextField.setText(currentProteinFilterValues[7]);

        // update the radio buttons
        coverageGreaterThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[0].intValue() == 0);
        coverageEqualJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[0].intValue() == 1);
        coverageLessThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[0].intValue() == 2);

        emPAIGreaterThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[1].intValue() == 0);
        emPAIEqualJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[1].intValue() == 1);
        emPAILessThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[1].intValue() == 2);

        peptideGreaterThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[2].intValue() == 0);
        peptideEqualJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[2].intValue() == 1);
        peptideLessThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[2].intValue() == 2);

        spectraGreaterThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[3].intValue() == 0);
        spectraEqualJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[3].intValue() == 1);
        spectraLessThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[3].intValue() == 2);

        scoreGreaterThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[4].intValue() == 0);
        scoreEqualJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[4].intValue() == 1);
        scoreLessThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[4].intValue() == 2);

        confidenceGreaterThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[5].intValue() == 0);
        confidenceEqualJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[5].intValue() == 1);
        confidenceLessThanJRadioButton.setSelected(currrentProteinFilterRadioButtonSelections[5].intValue() == 2);

        setLocationRelativeTo(peptideShakerGUI);
        setVisible(visible);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        peptidesButtonGroup = new javax.swing.ButtonGroup();
        coverageButtonGroup = new javax.swing.ButtonGroup();
        expCountButtonGroup = new javax.swing.ButtonGroup();
        foldChangeButtonGroup = new javax.swing.ButtonGroup();
        pValueButtonGroup = new javax.swing.ButtonGroup();
        qValueButtonGroup = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        proteinAccessionJTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        coverageJTextField = new javax.swing.JTextField();
        emPAIJTextField = new javax.swing.JTextField();
        spectraJTextField = new javax.swing.JTextField();
        peptideJTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        scoreJTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        confidenceJTextField = new javax.swing.JTextField();
        coverageGreaterThanJRadioButton = new javax.swing.JRadioButton();
        coverageEqualJRadioButton = new javax.swing.JRadioButton();
        coverageLessThanJRadioButton = new javax.swing.JRadioButton();
        emPAIGreaterThanJRadioButton = new javax.swing.JRadioButton();
        emPAIEqualJRadioButton = new javax.swing.JRadioButton();
        emPAILessThanJRadioButton = new javax.swing.JRadioButton();
        peptideGreaterThanJRadioButton = new javax.swing.JRadioButton();
        peptideEqualJRadioButton = new javax.swing.JRadioButton();
        peptideLessThanJRadioButton = new javax.swing.JRadioButton();
        spectraGreaterThanJRadioButton = new javax.swing.JRadioButton();
        spectraEqualJRadioButton = new javax.swing.JRadioButton();
        spectraLessThanJRadioButton = new javax.swing.JRadioButton();
        scoreGreaterThanJRadioButton = new javax.swing.JRadioButton();
        scoreEqualJRadioButton = new javax.swing.JRadioButton();
        scoreLessThanJRadioButton = new javax.swing.JRadioButton();
        confidenceGreaterThanJRadioButton = new javax.swing.JRadioButton();
        confidenceEqualJRadioButton = new javax.swing.JRadioButton();
        confidenceLessThanJRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        descriptionJTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        clearJButton = new javax.swing.JButton();
        exitJButton = new javax.swing.JButton();
        proteinFilteringHelpJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Protein Filter");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Fillter Options"));

        jLabel9.setText("Accession:");

        proteinAccessionJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        proteinAccessionJTextField.setToolTipText("<html>\nFind all proteins containing a given string.<br>\nRegular expressions are supported.\n</html>");
        proteinAccessionJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                proteinAccessionJTextFieldKeyReleased(evt);
            }
        });

        jLabel10.setText("Coverage:");

        jLabel11.setText("emPAI:");

        jLabel12.setText("#Peptides:");

        jLabel13.setText("#Spectra:");

        coverageJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        coverageJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                coverageJTextFieldKeyReleased(evt);
            }
        });

        emPAIJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        emPAIJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                emPAIJTextFieldKeyReleased(evt);
            }
        });

        spectraJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        spectraJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                spectraJTextFieldKeyReleased(evt);
            }
        });

        peptideJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        peptideJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                peptideJTextFieldKeyReleased(evt);
            }
        });

        jLabel14.setText("Score:");

        scoreJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        scoreJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                scoreJTextFieldKeyReleased(evt);
            }
        });

        jLabel15.setText("Confidence:");

        confidenceJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        confidenceJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                confidenceJTextFieldKeyReleased(evt);
            }
        });

        peptidesButtonGroup.add(coverageGreaterThanJRadioButton);
        coverageGreaterThanJRadioButton.setSelected(true);
        coverageGreaterThanJRadioButton.setText(">");
        coverageGreaterThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        peptidesButtonGroup.add(coverageEqualJRadioButton);
        coverageEqualJRadioButton.setText("=");
        coverageEqualJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        peptidesButtonGroup.add(coverageLessThanJRadioButton);
        coverageLessThanJRadioButton.setText("<");
        coverageLessThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        coverageButtonGroup.add(emPAIGreaterThanJRadioButton);
        emPAIGreaterThanJRadioButton.setSelected(true);
        emPAIGreaterThanJRadioButton.setText(">");
        emPAIGreaterThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        coverageButtonGroup.add(emPAIEqualJRadioButton);
        emPAIEqualJRadioButton.setText("=");
        emPAIEqualJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        coverageButtonGroup.add(emPAILessThanJRadioButton);
        emPAILessThanJRadioButton.setText("<");
        emPAILessThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        expCountButtonGroup.add(peptideGreaterThanJRadioButton);
        peptideGreaterThanJRadioButton.setSelected(true);
        peptideGreaterThanJRadioButton.setText(">");
        peptideGreaterThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        expCountButtonGroup.add(peptideEqualJRadioButton);
        peptideEqualJRadioButton.setText("=");
        peptideEqualJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        expCountButtonGroup.add(peptideLessThanJRadioButton);
        peptideLessThanJRadioButton.setText("<");
        peptideLessThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        foldChangeButtonGroup.add(spectraGreaterThanJRadioButton);
        spectraGreaterThanJRadioButton.setSelected(true);
        spectraGreaterThanJRadioButton.setText(">");
        spectraGreaterThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        foldChangeButtonGroup.add(spectraEqualJRadioButton);
        spectraEqualJRadioButton.setText("=");
        spectraEqualJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        foldChangeButtonGroup.add(spectraLessThanJRadioButton);
        spectraLessThanJRadioButton.setText("<");
        spectraLessThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        pValueButtonGroup.add(scoreGreaterThanJRadioButton);
        scoreGreaterThanJRadioButton.setSelected(true);
        scoreGreaterThanJRadioButton.setText(">");
        scoreGreaterThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        pValueButtonGroup.add(scoreEqualJRadioButton);
        scoreEqualJRadioButton.setText("=");
        scoreEqualJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        pValueButtonGroup.add(scoreLessThanJRadioButton);
        scoreLessThanJRadioButton.setText("<");
        scoreLessThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        qValueButtonGroup.add(confidenceGreaterThanJRadioButton);
        confidenceGreaterThanJRadioButton.setSelected(true);
        confidenceGreaterThanJRadioButton.setText(">");
        confidenceGreaterThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        qValueButtonGroup.add(confidenceEqualJRadioButton);
        confidenceEqualJRadioButton.setText("=");
        confidenceEqualJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        qValueButtonGroup.add(confidenceLessThanJRadioButton);
        confidenceLessThanJRadioButton.setText("<");
        confidenceLessThanJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("(contains, RegExp)");
        jLabel1.setToolTipText("<html>\nFind all proteins containing a given string.<br>\nRegular expressions are supported.\n</html>");

        jLabel16.setText("Description:");

        descriptionJTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        descriptionJTextField.setToolTipText("<html>\nFind all proteins containing a given accession number.<br>\nRegular expressions are supported.\n</html>");
        descriptionJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                descriptionJTextFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("(contains, RegExp)");
        jLabel2.setToolTipText("<html>\nFind all proteins containing a given accession number.<br>\nRegular expressions are supported.\n</html>");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(proteinAccessionJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(coverageJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(emPAIJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(peptideJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(scoreJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(spectraJTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(confidenceJTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(coverageGreaterThanJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(coverageEqualJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(coverageLessThanJRadioButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(emPAIGreaterThanJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(emPAIEqualJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(emPAILessThanJRadioButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(peptideGreaterThanJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(peptideEqualJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(peptideLessThanJRadioButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(spectraGreaterThanJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spectraEqualJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spectraLessThanJRadioButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(scoreGreaterThanJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scoreEqualJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scoreLessThanJRadioButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(confidenceGreaterThanJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(confidenceEqualJRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(confidenceLessThanJRadioButton))
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(6, 6, 6))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinAccessionJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coverageJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(coverageGreaterThanJRadioButton)
                    .addComponent(coverageEqualJRadioButton)
                    .addComponent(coverageLessThanJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(emPAIJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emPAIGreaterThanJRadioButton)
                    .addComponent(emPAIEqualJRadioButton)
                    .addComponent(emPAILessThanJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peptideJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(peptideGreaterThanJRadioButton)
                    .addComponent(peptideEqualJRadioButton)
                    .addComponent(peptideLessThanJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spectraJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(spectraGreaterThanJRadioButton)
                    .addComponent(spectraEqualJRadioButton)
                    .addComponent(spectraLessThanJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(scoreGreaterThanJRadioButton)
                    .addComponent(scoreEqualJRadioButton)
                    .addComponent(scoreLessThanJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confidenceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(confidenceGreaterThanJRadioButton)
                    .addComponent(confidenceEqualJRadioButton)
                    .addComponent(confidenceLessThanJRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clearJButton.setText("Clear");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });

        exitJButton.setText("Exit");
        exitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJButtonActionPerformed(evt);
            }
        });

        proteinFilteringHelpJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.GIF"))); // NOI18N
        proteinFilteringHelpJButton.setToolTipText("Help");
        proteinFilteringHelpJButton.setBorder(null);
        proteinFilteringHelpJButton.setBorderPainted(false);
        proteinFilteringHelpJButton.setContentAreaFilled(false);
        proteinFilteringHelpJButton.setFocusable(false);
        proteinFilteringHelpJButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        proteinFilteringHelpJButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        proteinFilteringHelpJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                proteinFilteringHelpJButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                proteinFilteringHelpJButtonMouseExited(evt);
            }
        });
        proteinFilteringHelpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinFilteringHelpJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(proteinFilteringHelpJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitJButton))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clearJButton, exitJButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(proteinFilteringHelpJButton)
                    .addComponent(clearJButton)
                    .addComponent(exitJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Clears all filters.
     *
     * @param evt
     */
    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        proteinAccessionJTextField.setText("");
        descriptionJTextField.setText("");
        coverageJTextField.setText("");
        emPAIJTextField.setText("");
        peptideJTextField.setText("");
        spectraJTextField.setText("");
        scoreJTextField.setText("");
        confidenceJTextField.setText("");
        filter();
    }//GEN-LAST:event_clearJButtonActionPerformed

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void proteinAccessionJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proteinAccessionJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_proteinAccessionJTextFieldKeyReleased

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void coverageJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_coverageJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_coverageJTextFieldKeyReleased

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void emPAIJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emPAIJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_emPAIJTextFieldKeyReleased

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void peptideJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_peptideJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_peptideJTextFieldKeyReleased

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void spectraJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spectraJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_spectraJTextFieldKeyReleased

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void scoreJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scoreJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_scoreJTextFieldKeyReleased

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void confidenceJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confidenceJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_confidenceJTextFieldKeyReleased

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void radioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonActionPerformed
        filter();
    }//GEN-LAST:event_radioButtonActionPerformed

    /**
     * Saves the filter settings and closes the dialog.
     *
     * @param evt
     */
    private void exitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJButtonActionPerformed

        // store the current filter values
        String[] currentFilterValues = {
            proteinAccessionJTextField.getText(),
            descriptionJTextField.getText(),
            coverageJTextField.getText(),
            emPAIJTextField.getText(),
            peptideJTextField.getText(),
            spectraJTextField.getText(),
            scoreJTextField.getText(),
            confidenceJTextField.getText()};

        int coverageRadioButtonIndex = 0;

        if (coverageEqualJRadioButton.isSelected()) {
            coverageRadioButtonIndex = 1;
        } else if (coverageLessThanJRadioButton.isSelected()) {
            coverageRadioButtonIndex = 2;
        }

        int emPAIRadioButtonIndex = 0;

        if (emPAIEqualJRadioButton.isSelected()) {
            emPAIRadioButtonIndex = 1;
        } else if (emPAILessThanJRadioButton.isSelected()) {
            emPAIRadioButtonIndex = 2;
        }

        int peptideRadioButtonIndex = 0;

        if (peptideEqualJRadioButton.isSelected()) {
            peptideRadioButtonIndex = 1;
        } else if (peptideLessThanJRadioButton.isSelected()) {
            peptideRadioButtonIndex = 2;
        }

        int spectraRadioButtonIndex = 0;

        if (spectraEqualJRadioButton.isSelected()) {
            spectraRadioButtonIndex = 1;
        } else if (spectraLessThanJRadioButton.isSelected()) {
            spectraRadioButtonIndex = 2;
        }

        int scoreRadioButtonIndex = 0;

        if (scoreEqualJRadioButton.isSelected()) {
            scoreRadioButtonIndex = 1;
        } else if (scoreLessThanJRadioButton.isSelected()) {
            scoreRadioButtonIndex = 2;
        }

        int confidenceRadioButtonIndex = 0;

        if (confidenceEqualJRadioButton.isSelected()) {
            confidenceRadioButtonIndex = 1;
        } else if (confidenceLessThanJRadioButton.isSelected()) {
            confidenceRadioButtonIndex = 2;
        }

        Integer[] currrentFilterRadioButtonSelections = {
            coverageRadioButtonIndex,
            emPAIRadioButtonIndex,
            peptideRadioButtonIndex,
            spectraRadioButtonIndex,
            scoreRadioButtonIndex,
            confidenceRadioButtonIndex};

        peptideShakerGUI.setCurrentProteinFilterValues(currentFilterValues);
        peptideShakerGUI.setCurrrentProteinFilterRadioButtonSelections(currrentFilterRadioButtonSelections);

        // close the dialog
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_exitJButtonActionPerformed

    /**
     * Closes the dialog.
     * 
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exitJButtonActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Filters the protein table according to the current filter settings.
     *
     * @param evt
     */
    private void descriptionJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionJTextFieldKeyReleased
        filter();
    }//GEN-LAST:event_descriptionJTextFieldKeyReleased

    /**
     * Change the cursor to a hand cursor.
     * 
     * @param evt 
     */
    private void proteinFilteringHelpJButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_proteinFilteringHelpJButtonMouseEntered
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
}//GEN-LAST:event_proteinFilteringHelpJButtonMouseEntered

    /**
     * Change the cursor back to the default cursor.
     * 
     * @param evt 
     */
    private void proteinFilteringHelpJButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_proteinFilteringHelpJButtonMouseExited
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_proteinFilteringHelpJButtonMouseExited

    /**
     * Open the help dialog.
     * 
     * @param evt 
     */
    private void proteinFilteringHelpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinFilteringHelpJButtonActionPerformed
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new HelpWindow(peptideShakerGUI, getClass().getResource("/helpFiles/ProteinFiltering.html"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_proteinFilteringHelpJButtonActionPerformed

    /**
     * Filters the protein table according to the current filter settings.
     */
    public void filter() {
        
        int previouslySelectedProteinIndex = -1;
        
        if (proteinTable.getSelectedRow() != -1) {
            previouslySelectedProteinIndex = (Integer) proteinTable.getValueAt(proteinTable.getSelectedRow(), 0);
        }
        
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        List<RowFilter<Object, Object>> filters = new ArrayList<RowFilter<Object, Object>>();

        // protein accession filter
        String text = proteinAccessionJTextField.getText();

        if (text == null || text.length() == 0) {
            filters.add(RowFilter.regexFilter(".*"));
        } else {
            try {
                filters.add(RowFilter.regexFilter(text, proteinTable.getColumn("Accession").getModelIndex()));
            } catch (PatternSyntaxException pse) {
                //JOptionPane.showMessageDialog(this, "Bad regex pattern for protein accession!", "Filter Error", JOptionPane.ERROR_MESSAGE);
                //pse.printStackTrace();
            }
        }

        // protein description filter
        text = descriptionJTextField.getText();

        if (text == null || text.length() == 0) {
            filters.add(RowFilter.regexFilter(".*"));
        } else {
            try {
                filters.add(RowFilter.regexFilter(text, proteinTable.getColumn("Description").getModelIndex()));
            } catch (PatternSyntaxException pse) {
                //JOptionPane.showMessageDialog(this, "Bad regex pattern for protein description!", "Filter Error", JOptionPane.ERROR_MESSAGE);
                //pse.printStackTrace();
            }
        }

        // coverage filter
        if (coverageJTextField.getText().length() > 0) {

            try {
                Double value = new Double(coverageJTextField.getText());

                if (coverageGreaterThanJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, value, proteinTable.getColumn("Coverage").getModelIndex()));
                } else if (coverageEqualJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, value, proteinTable.getColumn("Coverage").getModelIndex()));
                } else {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, value, proteinTable.getColumn("Coverage").getModelIndex()));
                }
            } catch (NumberFormatException e) {
                //JOptionPane.showMessageDialog(this, "Coverage has to be a number!", "Filter Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // emPAI filter
        if (emPAIJTextField.getText().length() > 0) {

            try {
                Double value = new Double(emPAIJTextField.getText());

                if (emPAIGreaterThanJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, value, proteinTable.getColumn("emPAI").getModelIndex()));
                } else if (emPAIEqualJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, value, proteinTable.getColumn("emPAI").getModelIndex()));
                } else {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, value, proteinTable.getColumn("emPAI").getModelIndex()));
                }
            } catch (NumberFormatException e) {
                //JOptionPane.showMessageDialog(this, "emPAI has to be a number!", "Filter Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // number of peptides filter
        if (peptideJTextField.getText().length() > 0) {

            try {
                Integer value = new Integer(peptideJTextField.getText());

                if (peptideGreaterThanJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, value, proteinTable.getColumn("#Peptides").getModelIndex()));
                } else if (peptideEqualJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, value, proteinTable.getColumn("#Peptides").getModelIndex()));
                } else {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, value, proteinTable.getColumn("#Peptides").getModelIndex()));
                }
            } catch (NumberFormatException e) {
                //JOptionPane.showMessageDialog(this, "#Peptides has to be an integer!", "Filter Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // number of spectra filter
        if (spectraJTextField.getText().length() > 0) {

            try {
                Integer value = new Integer(spectraJTextField.getText());

                if (spectraGreaterThanJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, value, proteinTable.getColumn("#Spectra").getModelIndex()));
                } else if (spectraEqualJRadioButton.isSelected()) {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, value, proteinTable.getColumn("#Spectra").getModelIndex()));
                } else {
                    filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, value, proteinTable.getColumn("#Spectra").getModelIndex()));
                }
            } catch (NumberFormatException e) {
                //JOptionPane.showMessageDialog(this, "#Spectra has to be an integer!", "Filter Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // score filter
        if (scoreJTextField.getText().length() > 0) {

            try {
                Double value = new Double(scoreJTextField.getText());

                if (value != 0) {

                    if (scoreGreaterThanJRadioButton.isSelected()) {
                        filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, value, proteinTable.getColumn("Score").getModelIndex()));
                    } else if (scoreEqualJRadioButton.isSelected()) {
                        filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, value, proteinTable.getColumn("Score").getModelIndex()));
                    } else {
                        filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, value, proteinTable.getColumn("Score").getModelIndex()));
                    }
                }
            } catch (NumberFormatException e) {
                //JOptionPane.showMessageDialog(this, "Score has to be a number!", "Filter Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // confidence filter
        if (confidenceJTextField.getText().length() > 0) {

            try {
                Double value = new Double(confidenceJTextField.getText());

                if (value != 0) {

                    if (confidenceGreaterThanJRadioButton.isSelected()) {
                        filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, value, proteinTable.getColumn("Confidence [%]").getModelIndex()));
                    } else if (confidenceEqualJRadioButton.isSelected()) {
                        filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, value, proteinTable.getColumn("Confidence [%]").getModelIndex()));
                    } else {
                        filters.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, value, proteinTable.getColumn("Confidence [%]").getModelIndex()));
                    }
                }
            } catch (NumberFormatException e) {
                //JOptionPane.showMessageDialog(this, "Confidence has to be a number!", "Filter Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        RowFilter<Object, Object> allFilters = RowFilter.andFilter(filters);
        ((TableRowSorter) proteinTable.getRowSorter()).setRowFilter(allFilters);

        boolean updateProteinSelection = false;
        
        if (proteinTable.getRowCount() > 0) {
            proteinTable.setRowSelectionInterval(0, 0);
            
            if (previouslySelectedProteinIndex != (Integer) proteinTable.getValueAt(0, 0)) {
                updateProteinSelection = true;
            }
        }
        
        // Make sure that the currently selected protein in the protein table is displayed in the other tables
        peptideShakerGUI.updateProteinTableSelection(updateProteinSelection);
        
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearJButton;
    private javax.swing.JRadioButton confidenceEqualJRadioButton;
    private javax.swing.JRadioButton confidenceGreaterThanJRadioButton;
    private javax.swing.JTextField confidenceJTextField;
    private javax.swing.JRadioButton confidenceLessThanJRadioButton;
    private javax.swing.ButtonGroup coverageButtonGroup;
    private javax.swing.JRadioButton coverageEqualJRadioButton;
    private javax.swing.JRadioButton coverageGreaterThanJRadioButton;
    private javax.swing.JTextField coverageJTextField;
    private javax.swing.JRadioButton coverageLessThanJRadioButton;
    private javax.swing.JTextField descriptionJTextField;
    private javax.swing.JRadioButton emPAIEqualJRadioButton;
    private javax.swing.JRadioButton emPAIGreaterThanJRadioButton;
    private javax.swing.JTextField emPAIJTextField;
    private javax.swing.JRadioButton emPAILessThanJRadioButton;
    private javax.swing.JButton exitJButton;
    private javax.swing.ButtonGroup expCountButtonGroup;
    private javax.swing.ButtonGroup foldChangeButtonGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.ButtonGroup pValueButtonGroup;
    private javax.swing.JRadioButton peptideEqualJRadioButton;
    private javax.swing.JRadioButton peptideGreaterThanJRadioButton;
    private javax.swing.JTextField peptideJTextField;
    private javax.swing.JRadioButton peptideLessThanJRadioButton;
    private javax.swing.ButtonGroup peptidesButtonGroup;
    private javax.swing.JTextField proteinAccessionJTextField;
    private javax.swing.JButton proteinFilteringHelpJButton;
    private javax.swing.ButtonGroup qValueButtonGroup;
    private javax.swing.JRadioButton scoreEqualJRadioButton;
    private javax.swing.JRadioButton scoreGreaterThanJRadioButton;
    private javax.swing.JTextField scoreJTextField;
    private javax.swing.JRadioButton scoreLessThanJRadioButton;
    private javax.swing.JRadioButton spectraEqualJRadioButton;
    private javax.swing.JRadioButton spectraGreaterThanJRadioButton;
    private javax.swing.JTextField spectraJTextField;
    private javax.swing.JRadioButton spectraLessThanJRadioButton;
    // End of variables declaration//GEN-END:variables
}
