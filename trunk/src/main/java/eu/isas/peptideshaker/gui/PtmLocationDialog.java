package eu.isas.peptideshaker.gui;

import com.compomics.util.experiment.biology.PTM;
import com.compomics.util.experiment.biology.PTMFactory;
import com.compomics.util.experiment.biology.Peptide;
import com.compomics.util.experiment.identification.Identification;
import com.compomics.util.experiment.identification.matches.ModificationMatch;
import com.compomics.util.experiment.identification.matches.PeptideMatch;
import eu.isas.peptideshaker.myparameters.PSParameter;
import eu.isas.peptideshaker.myparameters.PSPtmScores;
import eu.isas.peptideshaker.scoring.PtmScoring;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * PtmLocationDialog
 * 
 * @author Marc Vaudel
 */
public class PtmLocationDialog extends javax.swing.JDialog {

    /**
     * The PeptideShakerGUI instance
     */
    private PeptideShakerGUI peptideShakerGUI;
    /**
     * The compomics PTM factory
     */
    private PTMFactory ptmFactory = PTMFactory.getInstance();
    /**
     * The identification
     */
    private Identification identification;
    /**
     * the peptide match
     */
    private PeptideMatch peptideMatch = null;
    /**
     * the original location of the modification
     */
    private String originalLocation = "";

    /** 
     * Creates new form PtmLocationDialog
     * 
     * @param peptideShakerGUI
     * @param peptideKey 
     * @param selectedPTM 
     * @param psmSelected  
     */
    public PtmLocationDialog(PeptideShakerGUI peptideShakerGUI, String peptideKey, String selectedPTM, int psmSelected) {
        super(peptideShakerGUI, true);

        this.peptideShakerGUI = peptideShakerGUI;
        this.identification = peptideShakerGUI.getIdentification();
        try {
            this.peptideMatch = identification.getPeptideMatch(peptideKey);
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
            return;
        }

        initComponents();
        
        psmTable.getTableHeader().setReorderingAllowed(false);
        psmTable.getColumn(" ").setMaxWidth(50);
        psmTable.getColumn(" ").setMinWidth(50);
        psmTable.getColumn("  ").setMaxWidth(30);
        psmTable.getColumn("  ").setMinWidth(30);
        
        psmTableScrollPane.getViewport().setOpaque(false);

        sequenceLabel.setText(peptideMatch.getTheoreticPeptide().getModifiedSequenceAsHtml(
                peptideShakerGUI.getSearchParameters().getModificationProfile().getPtmColors(), true));
        
        // set the modification tooltip
        String tooltip = peptideShakerGUI.getPeptideModificationTooltipAsHtml(peptideMatch.getTheoreticPeptide());
        sequenceLabel.setToolTipText(tooltip);

        if (selectedPTM != null) {
            ptmCmb.setSelectedItem(selectedPTM);
            ptmCmbMouseReleased(null);
        }

        psmTable.setRowSelectionInterval(psmSelected, psmSelected);
        psmSelectionChanged();

        setLocationRelativeTo(peptideShakerGUI);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        peptideDetailsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ptmCmb = new javax.swing.JComboBox();
        peptideConfidence = new javax.swing.JTextField();
        sequenceLabel = new javax.swing.JLabel();
        psmsJPanel = new javax.swing.JPanel();
        psmTableScrollPane = new javax.swing.JScrollPane();
        psmTable = new javax.swing.JTable();
        psrmPtmDetailsPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        possibleLocationsTxt = new javax.swing.JTextField();
        psmConfidence = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ptmLocationTxt = new javax.swing.JTextField();
        spectrumA = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        newPtmTxt = new javax.swing.JTextField();
        applyButton = new javax.swing.JButton();
        spectrumB = new javax.swing.JPanel();
        cancelApplyButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PTM Location");

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        peptideDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Peptide Details"));
        peptideDetailsPanel.setOpaque(false);

        jLabel1.setText("Sequence:");

        ptmCmb.setModel(new DefaultComboBoxModel(getPossibleModifications()));
        ptmCmb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ptmCmbMouseReleased(evt);
            }
        });

        peptideConfidence.setEditable(false);

        sequenceLabel.setText("sequence");

        javax.swing.GroupLayout peptideDetailsPanelLayout = new javax.swing.GroupLayout(peptideDetailsPanel);
        peptideDetailsPanel.setLayout(peptideDetailsPanelLayout);
        peptideDetailsPanelLayout.setHorizontalGroup(
            peptideDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptideDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(sequenceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ptmCmb, 0, 121, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peptideConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        peptideDetailsPanelLayout.setVerticalGroup(
            peptideDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptideDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(peptideDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ptmCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peptideConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sequenceLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        psmsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("PSMs"));
        psmsJPanel.setOpaque(false);

        psmTable.setModel(new PsmsTable());
        psmTableScrollPane.setViewportView(psmTable);

        javax.swing.GroupLayout psmsJPanelLayout = new javax.swing.GroupLayout(psmsJPanel);
        psmsJPanel.setLayout(psmsJPanelLayout);
        psmsJPanelLayout.setHorizontalGroup(
            psmsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(psmsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psmTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addContainerGap())
        );
        psmsJPanelLayout.setVerticalGroup(
            psmsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(psmsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psmTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        psrmPtmDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected PSM PTM Details"));
        psrmPtmDetailsPanel.setOpaque(false);

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(1);
        jSplitPane1.setOpaque(false);

        jPanel4.setOpaque(false);

        jLabel2.setText("PTM Scoring:");

        jLabel3.setText("Possible Locations:");

        possibleLocationsTxt.setEditable(false);

        psmConfidence.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "not found", "random assignment", "doubtful assignment", "confident assignment", "very confident assignment" }));
        psmConfidence.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                psmConfidenceMouseReleased(evt);
            }
        });
        psmConfidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmConfidenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(psmConfidence, 0, 180, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(possibleLocationsTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psmConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(possibleLocationsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(334, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel4);

        jPanel5.setOpaque(false);

        jLabel5.setText("PTM Location:");

        ptmLocationTxt.setEditable(false);

        spectrumA.setOpaque(false);

        javax.swing.GroupLayout spectrumALayout = new javax.swing.GroupLayout(spectrumA);
        spectrumA.setLayout(spectrumALayout);
        spectrumALayout.setHorizontalGroup(
            spectrumALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 479, Short.MAX_VALUE)
        );
        spectrumALayout.setVerticalGroup(
            spectrumALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 148, Short.MAX_VALUE)
        );

        jLabel6.setText("New PTM Location:");

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        spectrumB.setOpaque(false);

        javax.swing.GroupLayout spectrumBLayout = new javax.swing.GroupLayout(spectrumB);
        spectrumB.setLayout(spectrumBLayout);
        spectrumBLayout.setHorizontalGroup(
            spectrumBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 479, Short.MAX_VALUE)
        );
        spectrumBLayout.setVerticalGroup(
            spectrumBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 186, Short.MAX_VALUE)
        );

        cancelApplyButton.setText("Cancel");
        cancelApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelApplyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spectrumB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spectrumA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ptmLocationTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPtmTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelApplyButton)))
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {applyButton, cancelApplyButton});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ptmLocationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spectrumA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(newPtmTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelApplyButton)
                    .addComponent(applyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spectrumB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel5);

        javax.swing.GroupLayout psrmPtmDetailsPanelLayout = new javax.swing.GroupLayout(psrmPtmDetailsPanel);
        psrmPtmDetailsPanel.setLayout(psrmPtmDetailsPanelLayout);
        psrmPtmDetailsPanelLayout.setHorizontalGroup(
            psrmPtmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        psrmPtmDetailsPanelLayout.setVerticalGroup(
            psrmPtmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
        );

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(psrmPtmDetailsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(peptideDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(psmsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitButton))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(peptideDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(psmsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(psrmPtmDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ptmCmbMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ptmCmbMouseReleased
        PSPtmScores ptmScores = new PSPtmScores();
        ptmScores = (PSPtmScores) peptideMatch.getUrParam(ptmScores);
        PtmScoring ptmScoring = ptmScores.getPtmScoring(getSelectedModification());
        if (ptmScoring.getPtmSiteConfidence() == PtmScoring.NOT_FOUND) {
            peptideConfidence.setText("Not found");
        } else if (ptmScoring.getPtmSiteConfidence() == PtmScoring.RANDOM) {
            peptideConfidence.setText("Random assignment");
        } else if (ptmScoring.getPtmSiteConfidence() == PtmScoring.DOUBTFUL) {
            peptideConfidence.setText("Doubtful assignment");
        } else if (ptmScoring.getPtmSiteConfidence() == PtmScoring.CONFIDENT) {
            peptideConfidence.setText("Confident assignment");
        } else if (ptmScoring.getPtmSiteConfidence() == PtmScoring.VERY_CONFIDENT) {
            peptideConfidence.setText("Very confident assignment");
        }
        updatePsmTable();
    }//GEN-LAST:event_ptmCmbMouseReleased

    private void psmConfidenceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_psmConfidenceMouseReleased
    }//GEN-LAST:event_psmConfidenceMouseReleased

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        try {
            ArrayList<Integer> newLocations = parseLocationList(newPtmTxt.getText().trim());
            if (newLocations.size() != parseLocationList(originalLocation).size()) {
                throw new IllegalArgumentException("Not correct number of locations");
            }
            ptmLocationTxt.setText(newPtmTxt.getText().trim());
            String key = PtmScoring.getKey(newLocations);
            String spectrumKey = peptideMatch.getSpectrumMatches().get(psmTable.getSelectedRow());
            PSPtmScores ptmScores = new PSPtmScores();
            ptmScores = (PSPtmScores) identification.getSpectrumMatch(spectrumKey).getUrParam(ptmScores);
            PtmScoring ptmScoring = ptmScores.getPtmScoring(getSelectedModification());
            ptmScoring.setPtmSite(key, ptmScoring.getPtmSiteConfidence());
            updatePsmTable();
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this,
                    "An error occured while reading the new modification locations"
                    + e.getLocalizedMessage() + "\n",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
        }
    }//GEN-LAST:event_applyButtonActionPerformed

    private void cancelApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelApplyButtonActionPerformed
        newPtmTxt.setText(originalLocation);
        applyButtonActionPerformed(null);
    }//GEN-LAST:event_cancelApplyButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void psmConfidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmConfidenceActionPerformed
        try {
            String spectrumKey = peptideMatch.getSpectrumMatches().get(psmTable.getSelectedRow());
            PSPtmScores ptmScores = new PSPtmScores();
            ptmScores = (PSPtmScores) identification.getSpectrumMatch(spectrumKey).getUrParam(ptmScores);
            PtmScoring ptmScoring = ptmScores.getPtmScoring(getSelectedModification());
            ptmScoring.setPtmSite(ptmScoring.getPtmLocation(), psmConfidence.getSelectedIndex());
            updatePsmTable();
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
        }
    }//GEN-LAST:event_psmConfidenceActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton cancelApplyButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField newPtmTxt;
    private javax.swing.JTextField peptideConfidence;
    private javax.swing.JPanel peptideDetailsPanel;
    private javax.swing.JTextField possibleLocationsTxt;
    private javax.swing.JComboBox psmConfidence;
    private javax.swing.JTable psmTable;
    private javax.swing.JScrollPane psmTableScrollPane;
    private javax.swing.JPanel psmsJPanel;
    private javax.swing.JPanel psrmPtmDetailsPanel;
    private javax.swing.JComboBox ptmCmb;
    private javax.swing.JTextField ptmLocationTxt;
    private javax.swing.JLabel sequenceLabel;
    private javax.swing.JPanel spectrumA;
    private javax.swing.JPanel spectrumB;
    // End of variables declaration//GEN-END:variables

    private Object[] getPossibleModifications() {
        ArrayList<String> result = new ArrayList<String>();
        for (ModificationMatch modMatch : peptideMatch.getTheoreticPeptide().getModificationMatches()) {
            if (!result.contains(modMatch.getTheoreticPtm())) {
                result.add(modMatch.getTheoreticPtm());
            }
        }
        return result.toArray();
    }

    private String getSelectedModification() {
        return (String) ptmCmb.getSelectedItem();
    }

    private void psmSelectionChanged() {
        try {
            String spectrumKey = peptideMatch.getSpectrumMatches().get(psmTable.getSelectedRow());
            PSPtmScores ptmScores = new PSPtmScores();
            ptmScores = (PSPtmScores) identification.getSpectrumMatch(spectrumKey).getUrParam(ptmScores);
            PtmScoring ptmScoring = ptmScores.getPtmScoring(getSelectedModification());
            psmConfidence.setSelectedIndex(ptmScoring.getPtmSiteConfidence());
            PTM selectedPtm = ptmFactory.getPTM(getSelectedModification());
            ArrayList<Integer> potentialModificationSites = Peptide.getPotentialModificationSites(peptideMatch.getTheoreticPeptide().getSequence(), selectedPtm);
            possibleLocationsTxt.setText(getlocationListAsString(potentialModificationSites));
            ptmLocationTxt.setText(getlocationListAsString(PtmScoring.getLocations(ptmScoring.getPtmLocation())));
            newPtmTxt.setText(ptmLocationTxt.getText());
            originalLocation = ptmLocationTxt.getText();
            cancelApplyButton.setEnabled(false);
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
        }
    }

    private void updatePsmTable() {
        psmTable.revalidate();
        psmTable.repaint();
    }

    private String getlocationListAsString(ArrayList<Integer> locations) {
        String result = "";
        boolean firstLine = true;
        for (int location : locations) {
            if (!firstLine) {
                result += ", ";
            } else {
                firstLine = false;
            }
            result += location;
        }
        return result;
    }

    private ArrayList<Integer> parseLocationList(String modificationPositons) throws IllegalArgumentException {
        ArrayList<Integer> result = new ArrayList<Integer>();
        String[] positionsAsString = modificationPositons.split(", ");
        for (String position : positionsAsString) {
            try {
                result.add(new Integer(position));
            } catch (Exception e) {
                throw new IllegalArgumentException("Could not parse " + position + "as integer.");
            }
        }
        return result;
    }

    /**
     * Table model for the selected peptide PSMs table
     */
    private class PsmsTable extends DefaultTableModel {

        @Override
        public int getRowCount() {
            return peptideMatch.getSpectrumCount();
        }

        @Override
        public int getColumnCount() {
            return 8;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return " ";
                case 1:
                    return "Sequence";
                case 2:
                    return "PTM";
                case 3:
                    return "Charge";
                case 4:
                    return "Error";
                case 5:
                    return "Score";
                case 6:
                    return "Confidence";
                case 7:
                    return "  ";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            try {
                String spectrumKey;
                PSParameter psParameter;
                switch (column) {
                    case 0:
                        return row + 1;
                    case 1:
                        spectrumKey = peptideMatch.getSpectrumMatches().get(row);
                        return identification.getSpectrumMatch(spectrumKey).getBestAssumption().getPeptide().getModifiedSequenceAsHtml(
                                peptideShakerGUI.getSearchParameters().getModificationProfile().getPtmColors(), true);
                    case 2:
                        spectrumKey = peptideMatch.getSpectrumMatches().get(row);
                        PSPtmScores ptmScores = new PSPtmScores();
                        ptmScores = (PSPtmScores) identification.getSpectrumMatch(spectrumKey).getUrParam(ptmScores);
                        if (ptmScores != null && ptmScores.getPtmScoring(getSelectedModification()) != null) {
                            return ptmScores.getPtmScoring(getSelectedModification()).getPtmSiteConfidence();
                        } else {
                            return PtmScoring.NOT_FOUND;
                        }
                    case 3:
                        spectrumKey = peptideMatch.getSpectrumMatches().get(row);
                        return peptideShakerGUI.getPrecursor(spectrumKey).getCharge().value;
                    case 4:
                        spectrumKey = peptideMatch.getSpectrumMatches().get(row);
                        return identification.getSpectrumMatch(spectrumKey).getBestAssumption().getDeltaMass();
                    case 5:
                        spectrumKey = peptideMatch.getSpectrumMatches().get(row);
                        psParameter = new PSParameter();
                        psParameter = (PSParameter) identification.getMatchParameter(spectrumKey, psParameter);
                        return psParameter.getPsmScore();
                    case 6:
                        spectrumKey = peptideMatch.getSpectrumMatches().get(row);
                        psParameter = new PSParameter();
                        psParameter = (PSParameter) identification.getMatchParameter(spectrumKey, psParameter);
                        return psParameter.getPsmConfidence();
                    case 7:
                        spectrumKey = peptideMatch.getSpectrumMatches().get(row);
                        psParameter = new PSParameter();
                        psParameter = (PSParameter) identification.getMatchParameter(spectrumKey, psParameter);
                        return psParameter.isValidated();
                    default:
                        return "";
                }
            } catch (Exception e) {
                peptideShakerGUI.catchException(e);
                return "";
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            for (int i = 0; i < getRowCount(); i++) {
                if (getValueAt(i, columnIndex) != null) {
                    return getValueAt(i, columnIndex).getClass();
                }
            }
            return (new Double(0.0)).getClass();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    }
}
