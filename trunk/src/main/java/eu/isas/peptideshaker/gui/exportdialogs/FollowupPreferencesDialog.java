package eu.isas.peptideshaker.gui.exportdialogs;

import com.compomics.util.Util;
import com.compomics.util.examples.BareBonesBrowserLaunch;
import com.compomics.util.experiment.biology.Peptide;
import com.compomics.util.experiment.biology.Protein;
import com.compomics.util.experiment.identification.SearchParameters;
import com.compomics.util.experiment.identification.SequenceFactory;
import com.compomics.util.experiment.identification.matches.PeptideMatch;
import com.compomics.util.experiment.identification.matches.ProteinMatch;
import com.compomics.util.experiment.identification.matches.SpectrumMatch;
import com.compomics.util.experiment.massspectrometry.MSnSpectrum;
import com.compomics.util.experiment.massspectrometry.Precursor;
import com.compomics.util.experiment.massspectrometry.Spectrum;
import com.compomics.util.experiment.massspectrometry.SpectrumFactory;
import com.compomics.util.gui.waiting.waitinghandlers.ProgressDialogX;
import com.compomics.util.gui.renderers.AlignedListCellRenderer;
import eu.isas.peptideshaker.export.OutputGenerator;
import eu.isas.peptideshaker.export.SpectrumExporter;
import eu.isas.peptideshaker.gui.PeptideShakerGUI;
import eu.isas.peptideshaker.myparameters.PSParameter;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.*;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.filechooser.FileFilter;

/**
 * This class will allow the user to generate spectrum information for follow up
 * analysis
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class FollowupPreferencesDialog extends javax.swing.JDialog {

    /**
     * The main GUI.
     */
    private PeptideShakerGUI peptideShakerGUI;
    /**
     * The spectrum factory.
     */
    private SpectrumFactory spectrumFactory = SpectrumFactory.getInstance();
    /**
     * A simple progress dialog.
     */
    private static ProgressDialogX progressDialog;

    /**
     * Creates a new FollowupPreferencesDialog.
     *
     * @param peptideShakerGUI
     */
    public FollowupPreferencesDialog(PeptideShakerGUI peptideShakerGUI) {
        super(peptideShakerGUI, true);
        this.peptideShakerGUI = peptideShakerGUI;
        initComponents();

        spectrumRecalibrationCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        spectrumValidationCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        idSelectionCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        vendorCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));

        this.setLocationRelativeTo(peptideShakerGUI);
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        spectraPanel = new javax.swing.JPanel();
        exportSpectraLabel = new javax.swing.JLabel();
        spectrumValidationCmb = new javax.swing.JComboBox();
        exportMgfButton = new javax.swing.JButton();
        recalibrateSpectraLabel = new javax.swing.JLabel();
        spectrumRecalibrationCmb = new javax.swing.JComboBox();
        recalibrateMgfButton = new javax.swing.JButton();
        inclusionListPanel = new javax.swing.JPanel();
        ignoredPeptidesLabel = new javax.swing.JLabel();
        miscleavedCheck = new javax.swing.JCheckBox();
        reactiveCheck = new javax.swing.JCheckBox();
        includeValidatedPsmsLabel = new javax.swing.JLabel();
        idSelectionCmb = new javax.swing.JComboBox();
        formatLabel = new javax.swing.JLabel();
        vendorCmb = new javax.swing.JComboBox();
        inclusionListButton = new javax.swing.JButton();
        ignoredProteinsLabel = new javax.swing.JLabel();
        relatedProteinsCheck = new javax.swing.JCheckBox();
        relatredAndUnrelatedCheck = new javax.swing.JCheckBox();
        unrelatedCheck = new javax.swing.JCheckBox();
        degeneratedCheck = new javax.swing.JCheckBox();
        minRtWindowLabel = new javax.swing.JLabel();
        rtWindow = new javax.swing.JTextField();
        minRtWindowUnitLabel = new javax.swing.JLabel();
        progenesisPanel = new javax.swing.JPanel();
        exportProgenesisButton = new javax.swing.JButton();
        exportToProgenesisPart1Label = new javax.swing.JLabel();
        progensisWarningLabel = new javax.swing.JLabel();
        exportToProgenesisLinkLabel = new javax.swing.JLabel();
        exportToProgenesisHelpLabel = new javax.swing.JLabel();
        unidentifiedProteinsPanel = new javax.swing.JPanel();
        exportAllUnidentifiedProteinsAsFastaLabel = new javax.swing.JLabel();
        exportUnidentifiedProteinsAsFastaButton = new javax.swing.JButton();
        includeNonValidatedInUnidentifiedFastaCheckBox = new javax.swing.JCheckBox();
        exportAllUnidentifiedAccessionsLabel = new javax.swing.JLabel();
        includeNonValidatedInProteinUnidentifiedCsvCheckBox = new javax.swing.JCheckBox();
        exportUnidentifiedProteinsAccessionNumbersAsCsvButton = new javax.swing.JButton();
        unidentifiedProteinsPanel1 = new javax.swing.JPanel();
        exportAllIdentifiedProteinsAsFastaLabel = new javax.swing.JLabel();
        exportIdentifiedProteinsAsFastaButton = new javax.swing.JButton();
        exportAllIdentifiedProteinAccessionsLabel = new javax.swing.JLabel();
        exportIdentifiedProteinAccessionNumbersAsCsvButton = new javax.swing.JButton();
        deNovoSearchPanel = new javax.swing.JPanel();
        exportPepnovoButton = new javax.swing.JButton();
        exportToPepNovoPart1Label = new javax.swing.JLabel();
        exportToPepNovoLinkLabel = new javax.swing.JLabel();
        deNovoGuiLinkLabel = new javax.swing.JLabel();
        recalibrateForDenovoCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export - Follow Up Analysis");
        setResizable(false);

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        spectraPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spectra"));
        spectraPanel.setOpaque(false);

        exportSpectraLabel.setText("Export Spectra");

        spectrumValidationCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Non-Validated PSMs / Unidentified Spectra", "Non-Validated Peptides", "Non-Validated Proteins", "Validated PSMs", "Validated PSMs of Validated Peptides", "Validated PSMs of Validated Peptides of Validated Proteins" }));

        exportMgfButton.setText("Export as MGF");
        exportMgfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMgfButtonActionPerformed(evt);
            }
        });

        recalibrateSpectraLabel.setText("Recalibrate Spectra (beta)");

        spectrumRecalibrationCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Precursor and Fragment Ions", "Precursor Ions", "Fragment Ions" }));

        recalibrateMgfButton.setText("Export as MGF");
        recalibrateMgfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalibrateMgfButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout spectraPanelLayout = new javax.swing.GroupLayout(spectraPanel);
        spectraPanel.setLayout(spectraPanelLayout);
        spectraPanelLayout.setHorizontalGroup(
            spectraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spectraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spectraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportSpectraLabel)
                    .addComponent(recalibrateSpectraLabel))
                .addGap(31, 31, 31)
                .addGroup(spectraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spectraPanelLayout.createSequentialGroup()
                        .addComponent(spectrumValidationCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(exportMgfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(spectraPanelLayout.createSequentialGroup()
                        .addComponent(spectrumRecalibrationCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(recalibrateMgfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        spectraPanelLayout.setVerticalGroup(
            spectraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, spectraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spectraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recalibrateSpectraLabel)
                    .addComponent(recalibrateMgfButton)
                    .addComponent(spectrumRecalibrationCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(spectraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportSpectraLabel)
                    .addComponent(exportMgfButton)
                    .addComponent(spectrumValidationCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inclusionListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Inclusion Lists"));
        inclusionListPanel.setOpaque(false);

        ignoredPeptidesLabel.setText("Ignored Peptides");

        miscleavedCheck.setSelected(true);
        miscleavedCheck.setText("miscleaved peptides");
        miscleavedCheck.setIconTextGap(10);
        miscleavedCheck.setOpaque(false);

        reactiveCheck.setSelected(true);
        reactiveCheck.setText("reactive peptides");
        reactiveCheck.setIconTextGap(10);
        reactiveCheck.setOpaque(false);

        includeValidatedPsmsLabel.setText("Include Validated PSMs");

        idSelectionCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Validated PSMs", "Validated PSMs of All Validated Peptides", "Validated PSMs of Validated Peptides of All Validated Proteins", "Validated PSMs of Currently Displayed Peptides", "Validated PSMs of Currently Displayed Proteins" }));

        formatLabel.setText("Format");

        vendorCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Thermo", "ABI", "Bruker", "MassLynx" }));

        inclusionListButton.setText("Generate Inclusion List");
        inclusionListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inclusionListButtonActionPerformed(evt);
            }
        });

        ignoredProteinsLabel.setText("Ignored Proteins");

        relatedProteinsCheck.setText("related proteins");
        relatedProteinsCheck.setIconTextGap(10);
        relatedProteinsCheck.setOpaque(false);

        relatredAndUnrelatedCheck.setText("related and unrelated proteins");
        relatredAndUnrelatedCheck.setIconTextGap(10);
        relatredAndUnrelatedCheck.setOpaque(false);

        unrelatedCheck.setSelected(true);
        unrelatedCheck.setText("unrelated proteins");
        unrelatedCheck.setIconTextGap(10);
        unrelatedCheck.setOpaque(false);

        degeneratedCheck.setSelected(true);
        degeneratedCheck.setText("degenerated peptides");
        degeneratedCheck.setIconTextGap(10);
        degeneratedCheck.setOpaque(false);

        minRtWindowLabel.setText("Minimum RT Window");

        rtWindow.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rtWindow.setText("20");

        minRtWindowUnitLabel.setText("s");

        javax.swing.GroupLayout inclusionListPanelLayout = new javax.swing.GroupLayout(inclusionListPanel);
        inclusionListPanel.setLayout(inclusionListPanelLayout);
        inclusionListPanelLayout.setHorizontalGroup(
            inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inclusionListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(includeValidatedPsmsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(inclusionListPanelLayout.createSequentialGroup()
                        .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(minRtWindowLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ignoredPeptidesLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ignoredProteinsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                            .addComponent(formatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inclusionListPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inclusionListPanelLayout.createSequentialGroup()
                                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(relatedProteinsCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(miscleavedCheck, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reactiveCheck)
                                    .addComponent(relatredAndUnrelatedCheck))
                                .addGap(24, 24, 24)
                                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(degeneratedCheck)
                                    .addComponent(unrelatedCheck)))
                            .addGroup(inclusionListPanelLayout.createSequentialGroup()
                                .addComponent(rtWindow, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(minRtWindowUnitLabel))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inclusionListPanelLayout.createSequentialGroup()
                        .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(vendorCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(idSelectionCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(inclusionListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        inclusionListPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {degeneratedCheck, reactiveCheck, relatredAndUnrelatedCheck, unrelatedCheck});

        inclusionListPanelLayout.setVerticalGroup(
            inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inclusionListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inclusionListPanelLayout.createSequentialGroup()
                        .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(miscleavedCheck)
                            .addComponent(ignoredPeptidesLabel)
                            .addComponent(reactiveCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(relatedProteinsCheck)
                            .addComponent(ignoredProteinsLabel)
                            .addComponent(unrelatedCheck)
                            .addComponent(relatredAndUnrelatedCheck))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minRtWindowLabel)
                            .addComponent(rtWindow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minRtWindowUnitLabel)))
                    .addComponent(degeneratedCheck))
                .addGap(8, 8, 8)
                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idSelectionCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(includeValidatedPsmsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inclusionListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vendorCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatLabel)
                    .addComponent(inclusionListButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        progenesisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Label Free Quantification"));
        progenesisPanel.setOpaque(false);

        exportProgenesisButton.setText("Export CSV");
        exportProgenesisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportProgenesisButtonActionPerformed(evt);
            }
        });

        exportToProgenesisPart1Label.setText("Export Spectrum IDs to");

        progensisWarningLabel.setText("<html><color=\"red\"><a href=\"\">Warning</a></html>");
        progensisWarningLabel.setToolTipText("Progenesis format warning");
        progensisWarningLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                progensisWarningLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                progensisWarningLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                progensisWarningLabelMouseExited(evt);
            }
        });

        exportToProgenesisLinkLabel.setText("<html><a href=\\\"http://www.nonlinear.com/products/progenesis/lc-ms/overview/\\\">Progenesis</a></html>");
        exportToProgenesisLinkLabel.setToolTipText("Open Progenesis LC-MS web page");
        exportToProgenesisLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportToProgenesisLinkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exportToProgenesisLinkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exportToProgenesisLinkLabelMouseExited(evt);
            }
        });

        exportToProgenesisHelpLabel.setText("<html>as <a href=\"\">Tab Separated Text</a></html>");
        exportToProgenesisHelpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exportToProgenesisHelpLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exportToProgenesisHelpLabelMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exportToProgenesisHelpLabelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout progenesisPanelLayout = new javax.swing.GroupLayout(progenesisPanel);
        progenesisPanel.setLayout(progenesisPanelLayout);
        progenesisPanelLayout.setHorizontalGroup(
            progenesisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progenesisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportToProgenesisPart1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportToProgenesisLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportToProgenesisHelpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progensisWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportProgenesisButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        progenesisPanelLayout.setVerticalGroup(
            progenesisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progenesisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progenesisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportToProgenesisPart1Label)
                    .addComponent(exportProgenesisButton)
                    .addComponent(progensisWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportToProgenesisLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportToProgenesisHelpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        unidentifiedProteinsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Unidentified Proteins"));
        unidentifiedProteinsPanel.setOpaque(false);

        exportAllUnidentifiedProteinsAsFastaLabel.setText("<html>Export all the <b>unidentified</b> proteins as a FASTA file</html>");

        exportUnidentifiedProteinsAsFastaButton.setText("Export as FASTA");
        exportUnidentifiedProteinsAsFastaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportUnidentifiedProteinsAsFastaButtonActionPerformed(evt);
            }
        });

        includeNonValidatedInUnidentifiedFastaCheckBox.setSelected(true);
        includeNonValidatedInUnidentifiedFastaCheckBox.setText("Include Non-Validated");
        includeNonValidatedInUnidentifiedFastaCheckBox.setToolTipText("Include non-validated protein identification");
        includeNonValidatedInUnidentifiedFastaCheckBox.setIconTextGap(10);
        includeNonValidatedInUnidentifiedFastaCheckBox.setOpaque(false);

        exportAllUnidentifiedAccessionsLabel.setText("<html>Export all the <b>unidentified</b> proteins accession numbers</html>");

        includeNonValidatedInProteinUnidentifiedCsvCheckBox.setSelected(true);
        includeNonValidatedInProteinUnidentifiedCsvCheckBox.setText("Include Non-Validated");
        includeNonValidatedInProteinUnidentifiedCsvCheckBox.setToolTipText("Include non-validated protein identification");
        includeNonValidatedInProteinUnidentifiedCsvCheckBox.setIconTextGap(10);
        includeNonValidatedInProteinUnidentifiedCsvCheckBox.setOpaque(false);

        exportUnidentifiedProteinsAccessionNumbersAsCsvButton.setText("Export as CSV");
        exportUnidentifiedProteinsAccessionNumbersAsCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportUnidentifiedProteinsAccessionNumbersAsCsvButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout unidentifiedProteinsPanelLayout = new javax.swing.GroupLayout(unidentifiedProteinsPanel);
        unidentifiedProteinsPanel.setLayout(unidentifiedProteinsPanelLayout);
        unidentifiedProteinsPanelLayout.setHorizontalGroup(
            unidentifiedProteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unidentifiedProteinsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(unidentifiedProteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(unidentifiedProteinsPanelLayout.createSequentialGroup()
                        .addComponent(exportAllUnidentifiedProteinsAsFastaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(includeNonValidatedInUnidentifiedFastaCheckBox))
                    .addGroup(unidentifiedProteinsPanelLayout.createSequentialGroup()
                        .addComponent(exportAllUnidentifiedAccessionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(includeNonValidatedInProteinUnidentifiedCsvCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(unidentifiedProteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exportUnidentifiedProteinsAccessionNumbersAsCsvButton, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(exportUnidentifiedProteinsAsFastaButton, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addContainerGap())
        );
        unidentifiedProteinsPanelLayout.setVerticalGroup(
            unidentifiedProteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unidentifiedProteinsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(unidentifiedProteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportAllUnidentifiedProteinsAsFastaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportUnidentifiedProteinsAsFastaButton)
                    .addComponent(includeNonValidatedInUnidentifiedFastaCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(unidentifiedProteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportAllUnidentifiedAccessionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportUnidentifiedProteinsAccessionNumbersAsCsvButton)
                    .addComponent(includeNonValidatedInProteinUnidentifiedCsvCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        unidentifiedProteinsPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Identified Proteins"));
        unidentifiedProteinsPanel1.setOpaque(false);

        exportAllIdentifiedProteinsAsFastaLabel.setText("<html>Export all the <b>identified</b> proteins as a FASTA file</html>");

        exportIdentifiedProteinsAsFastaButton.setText("Export as FASTA");
        exportIdentifiedProteinsAsFastaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportIdentifiedProteinsAsFastaButtonActionPerformed(evt);
            }
        });

        exportAllIdentifiedProteinAccessionsLabel.setText("<html>Export all the <b>identified</b> proteins accession numbers</html>");

        exportIdentifiedProteinAccessionNumbersAsCsvButton.setText("Export as CSV");
        exportIdentifiedProteinAccessionNumbersAsCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportIdentifiedProteinAccessionNumbersAsCsvButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout unidentifiedProteinsPanel1Layout = new javax.swing.GroupLayout(unidentifiedProteinsPanel1);
        unidentifiedProteinsPanel1.setLayout(unidentifiedProteinsPanel1Layout);
        unidentifiedProteinsPanel1Layout.setHorizontalGroup(
            unidentifiedProteinsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unidentifiedProteinsPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(unidentifiedProteinsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportAllIdentifiedProteinsAsFastaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportAllIdentifiedProteinAccessionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(unidentifiedProteinsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exportIdentifiedProteinAccessionNumbersAsCsvButton, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(exportIdentifiedProteinsAsFastaButton, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addContainerGap())
        );
        unidentifiedProteinsPanel1Layout.setVerticalGroup(
            unidentifiedProteinsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unidentifiedProteinsPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(unidentifiedProteinsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportAllIdentifiedProteinsAsFastaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportIdentifiedProteinsAsFastaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(unidentifiedProteinsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportAllIdentifiedProteinAccessionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportIdentifiedProteinAccessionNumbersAsCsvButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deNovoSearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("De Novo Search (beta)"));
        deNovoSearchPanel.setOpaque(false);

        exportPepnovoButton.setText("Export as MGF");
        exportPepnovoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPepnovoButtonActionPerformed(evt);
            }
        });

        exportToPepNovoPart1Label.setText("Export Training Files for");

        exportToPepNovoLinkLabel.setText("<html><a href=\\\"http://proteomics.ucsd.edu/Software/PepNovo.html\\\">PepNovo</a></html>");
        exportToPepNovoLinkLabel.setToolTipText("Open PepNovo home page");
        exportToPepNovoLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportToPepNovoLinkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exportToPepNovoLinkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exportToPepNovoLinkLabelMouseExited(evt);
            }
        });

        deNovoGuiLinkLabel.setText("<html>available via <a href=\\\"http://denovogui.googlecode.com\\\">DenovoGUI</a></html>");
        deNovoGuiLinkLabel.setToolTipText("");
        deNovoGuiLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deNovoGuiLinkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deNovoGuiLinkLabelMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deNovoGuiLinkLabelMouseReleased(evt);
            }
        });

        recalibrateForDenovoCheck.setSelected(true);
        recalibrateForDenovoCheck.setText("recalibrate spectra (beta)");
        recalibrateForDenovoCheck.setIconTextGap(10);
        recalibrateForDenovoCheck.setOpaque(false);

        javax.swing.GroupLayout deNovoSearchPanelLayout = new javax.swing.GroupLayout(deNovoSearchPanel);
        deNovoSearchPanel.setLayout(deNovoSearchPanelLayout);
        deNovoSearchPanelLayout.setHorizontalGroup(
            deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deNovoSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportToPepNovoPart1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportToPepNovoLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deNovoGuiLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(recalibrateForDenovoCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportPepnovoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        deNovoSearchPanelLayout.setVerticalGroup(
            deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deNovoSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deNovoSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportToPepNovoPart1Label)
                    .addComponent(exportPepnovoButton)
                    .addComponent(exportToPepNovoLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deNovoGuiLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recalibrateForDenovoCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spectraPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unidentifiedProteinsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unidentifiedProteinsPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progenesisPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inclusionListPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(deNovoSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spectraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unidentifiedProteinsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unidentifiedProteinsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(progenesisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deNovoSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inclusionListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 672, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Export the given spectra as an mgf file.
     *
     * @param evt
     */
    private void exportMgfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMgfButtonActionPerformed

        final File finalOutputFolder = peptideShakerGUI.getUserSelectedFile(".mgf", "(Mascot Generic File) *.mgf", "Select Destination File", false); //@Harald: we would need a folder now but I don't find the correct method

        if (finalOutputFolder != null) {

            final FollowupPreferencesDialog tempRef = this; // needed due to threading issues

            progressDialog = new ProgressDialogX(this, peptideShakerGUI,
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                    true);
            progressDialog.setIndeterminate(true);
            progressDialog.setTitle("Exporting. Please Wait...");

            new Thread(new Runnable() {
                public void run() {
                    try {
                        progressDialog.setVisible(true);
                    } catch (IndexOutOfBoundsException e) {
                        // ignore
                    }
                }
            }, "ProgressDialog").start();

            new Thread("SaveThread") {
                @Override
                public void run() {

                    try {

                        progressDialog.setIndeterminate(false);
                        int total = 0;
                        for (String mgfFile : spectrumFactory.getMgfFileNames()) {
                            total += spectrumFactory.getSpectrumTitles(mgfFile).size();
                        }
                        progressDialog.setMaxProgressValue(total);

                        SpectrumExporter spectrumExporter = new SpectrumExporter(peptideShakerGUI.getIdentification());
                        spectrumExporter.exportSpectra(finalOutputFolder, progressDialog, spectrumValidationCmb.getSelectedIndex()+1);

                        boolean processCancelled = progressDialog.isRunCanceled();
                        progressDialog.setRunFinished();

                        if (!processCancelled) {
                            JOptionPane.showMessageDialog(tempRef, "Spectra saved to " + finalOutputFolder + ".", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (Exception e) {
                        progressDialog.setRunFinished();
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_exportMgfButtonActionPerformed

    /**
     * Export the inclusion list to file.
     *
     * @param evt
     */
    private void inclusionListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inclusionListButtonActionPerformed


        if (validateInput()) {
            final JFileChooser fileChooser = new JFileChooser(peptideShakerGUI.getLastSelectedFolder());
            fileChooser.setDialogTitle("Select Destination File");
            fileChooser.setMultiSelectionEnabled(false);

            FileFilter filter = new FileFilter() {
                @Override
                public boolean accept(File myFile) {
                    if (vendorCmb.getSelectedIndex() == 2) {
                        return myFile.isDirectory() || myFile.getName().endsWith(".csv");
                    }
                    return myFile.isDirectory() || myFile.getName().endsWith(".txt");
                }

                @Override
                public String getDescription() {
                    switch (vendorCmb.getSelectedIndex()) {
                        case 0:
                            return "(Thermo inclusion list) .txt";
                        case 1:
                            return "(ABI inclusion list) .txt";
                        case 2:
                            return "(Bruker inclusion list) .csv";
                        case 3:
                            return "(MassLynx inclusion list) .txt";
                        default:
                            return "(unknown format) .txt";
                    }
                }
            };

            fileChooser.setFileFilter(filter);

            int returnVal = fileChooser.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {

                File tempOutputFile = fileChooser.getSelectedFile();

                int outcome = JOptionPane.YES_OPTION;

                if (tempOutputFile.exists()) {
                    outcome = JOptionPane.showConfirmDialog(this,
                            "Should " + tempOutputFile + " be overwritten?", "Selected File Already Exists",
                            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                }

                if (outcome == JOptionPane.YES_OPTION) {

                    if (vendorCmb.getSelectedIndex() == 2) {
                        if (!tempOutputFile.getName().endsWith(".csv")) {
                            tempOutputFile = new File(tempOutputFile.getParent(), tempOutputFile.getName() + ".csv");
                        }
                    } else {
                        if (!tempOutputFile.getName().endsWith(".txt")) {
                            tempOutputFile = new File(tempOutputFile.getParent(), tempOutputFile.getName() + ".txt");
                        }
                    }

                    progressDialog = new ProgressDialogX(this, peptideShakerGUI,
                            Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                            Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                            true);
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Exporting. Please Wait...");

                    // needed due to threading issues
                    final File outputFile = tempOutputFile;
                    final FollowupPreferencesDialog tempRef = this;

                    new Thread(new Runnable() {
                        public void run() {
                            progressDialog.setVisible(true);
                        }
                    }, "ProgressDialog").start();

                    new Thread("SaveThread") {
                        @Override
                        public void run() {

                            try {

                                ArrayList<String> inspectedProteins;

                                if (idSelectionCmb.getSelectedIndex() == 4) {
                                    inspectedProteins = peptideShakerGUI.getDisplayedProteins();
                                } else {
                                    inspectedProteins = new ArrayList<String>(peptideShakerGUI.getIdentification().getProteinIdentification());
                                }

                                progressDialog.setIndeterminate(false);
                                progressDialog.setMaxProgressValue(inspectedProteins.size());
                                ArrayList<String> displayedPeptides = peptideShakerGUI.getDisplayedPeptides();
                                FileWriter f = new FileWriter(outputFile);
                                BufferedWriter b = new BufferedWriter(f);
                                PSParameter psParameter = new PSParameter();
                                int cpt = 0;

                                for (String proteinKey : inspectedProteins) {

                                    ProteinMatch proteinMatch = peptideShakerGUI.getIdentification().getProteinMatch(proteinKey);
                                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getProteinMatchParameter(proteinKey, psParameter);

                                    if (idSelectionCmb.getSelectedIndex() == 0
                                            || idSelectionCmb.getSelectedIndex() == 1
                                            || idSelectionCmb.getSelectedIndex() == 3
                                            || idSelectionCmb.getSelectedIndex() == 2 && psParameter.isValidated()) {

                                        peptideShakerGUI.getIdentification().loadPeptideMatches(proteinMatch.getPeptideMatches(), progressDialog);
                                        peptideShakerGUI.getIdentification().loadPeptideMatchParameters(proteinMatch.getPeptideMatches(), psParameter, progressDialog);
                                        for (String peptideKey : proteinMatch.getPeptideMatches()) {

                                            psParameter = (PSParameter) peptideShakerGUI.getIdentification().getPeptideMatchParameter(peptideKey, psParameter);

                                            if (idSelectionCmb.getSelectedIndex() == 0
                                                    || idSelectionCmb.getSelectedIndex() == 1 && psParameter.isValidated()
                                                    || idSelectionCmb.getSelectedIndex() == 2 && psParameter.isValidated()
                                                    || idSelectionCmb.getSelectedIndex() == 3 && displayedPeptides.contains(peptideKey)) {

                                                PeptideMatch peptideMatch = peptideShakerGUI.getIdentification().getPeptideMatch(peptideKey);

                                                if (!shallExclude(proteinKey, peptideMatch.getTheoreticPeptide())) {

                                                    ArrayList<Double> retentionTimes = new ArrayList<Double>();

                                                    for (String spectrumKey : peptideMatch.getSpectrumMatches()) {

                                                        if (progressDialog.isRunCanceled()) {
                                                            break;
                                                        }

                                                        Precursor precursor = spectrumFactory.getPrecursor(spectrumKey);
                                                        retentionTimes.add(precursor.getRt());
                                                    }

                                                    peptideShakerGUI.getIdentification().loadSpectrumMatchParameters(peptideMatch.getSpectrumMatches(), psParameter, null);
                                                    for (String spectrumKey : peptideMatch.getSpectrumMatches()) {

                                                        if (progressDialog.isRunCanceled()) {
                                                            break;
                                                        }

                                                        psParameter = (PSParameter) peptideShakerGUI.getIdentification().getSpectrumMatchParameter(spectrumKey, psParameter);

                                                        if (psParameter.isValidated()) {
                                                            b.write(getInclusionListLine(spectrumKey, retentionTimes));
                                                        }
                                                    }
                                                }
                                            }

                                            if (progressDialog.isRunCanceled()) {
                                                break;
                                            }
                                        }
                                    }

                                    cpt++;
                                    progressDialog.setValue(cpt);

                                    if (progressDialog.isRunCanceled()) {
                                        break;
                                    }
                                }

                                b.close();
                                f.close();

                                boolean processCancelled = progressDialog.isRunCanceled();
                                progressDialog.setRunFinished();

                                if (!processCancelled) {
                                    JOptionPane.showMessageDialog(tempRef, "Inclusion list saved to " + fileChooser.getSelectedFile().getName() + ".",
                                            "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                                }
                            } catch (Exception e) {
                                progressDialog.setRunFinished();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }.start();
                }
            }
        }
    }//GEN-LAST:event_inclusionListButtonActionPerformed

    /**
     * Export the Spectrum IDs as a Phenyx tab separated text file for input to
     * Progenesis. Only works if the mgf files came from Progenesis in the first
     * place.
     *
     * @param evt
     */
    private void exportProgenesisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportProgenesisButtonActionPerformed

        try {
            ProgenesisOptionsDialog progenesisOptionsDialog = new ProgenesisOptionsDialog(peptideShakerGUI, peptideShakerGUI.getIdentification(), 
                    peptideShakerGUI.getIdentificationFeaturesGenerator(), peptideShakerGUI.getFilterPreferences(), peptideShakerGUI.getSearchParameters());
            final ArrayList<String> psms = progenesisOptionsDialog.getSelectedPsms();

            if (psms != null) {
                final File finalOutputFile = peptideShakerGUI.getUserSelectedFile(".txt", "(Tab Separated Text File) *.txt", "Select Destination File", false);

                if (finalOutputFile != null) {

                    final FollowupPreferencesDialog tempRef = this; // needed due to threading issues

                    progressDialog = new ProgressDialogX(this, peptideShakerGUI,
                            Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                            Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                            true);
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Exporting. Please Wait...");

                    new Thread(new Runnable() {
                        public void run() {
                            try {
                                progressDialog.setVisible(true);
                            } catch (IndexOutOfBoundsException e) {
                                // ignore
                            }
                        }
                    }, "ProgressDialog").start();

                    new Thread("ExportThread") {
                        @Override
                        public void run() {

                            try {
                                FileWriter f = new FileWriter(finalOutputFile);
                                BufferedWriter b = new BufferedWriter(f);

                                OutputGenerator outputGenerator = new OutputGenerator(peptideShakerGUI);
                                outputGenerator.getPSMsProgenesisExport(progressDialog, psms, b);

                                b.close();
                                f.close();

                                boolean processCancelled = progressDialog.isRunCanceled();
                                progressDialog.setRunFinished();

                                if (!processCancelled) {
                                    JOptionPane.showMessageDialog(tempRef, "Results exported to \'" + finalOutputFile.getName() + "\'.", "Export Complete", JOptionPane.INFORMATION_MESSAGE);
                                }

                            } catch (IOException e) {
                                progressDialog.setRunFinished();
                                JOptionPane.showMessageDialog(tempRef, "An error occured when exporting.", "Export Failed", JOptionPane.ERROR_MESSAGE);
                                e.printStackTrace();
                            } catch (Exception e) {
                                progressDialog.setRunFinished();
                                JOptionPane.showMessageDialog(tempRef, "An error occured when exporting.", "Export Failed", JOptionPane.ERROR_MESSAGE);
                                e.printStackTrace();
                            }
                        }
                    }.start();
                }
            }
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
        }
    }//GEN-LAST:event_exportProgenesisButtonActionPerformed

    /**
     * Export all the unidentified proteins to a FASTA file.
     *
     * @param evt
     */
    private void exportUnidentifiedProteinsAsFastaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportUnidentifiedProteinsAsFastaButtonActionPerformed

        // get the file to send the output to
        final File selectedFile = peptideShakerGUI.getUserSelectedFile(".fasta", "Supported formats: FASTA format (.fasta)", "Select Destination File", false);

        if (selectedFile != null) {

            final FollowupPreferencesDialog tempRef = this; // needed due to threading issues

            progressDialog = new ProgressDialogX(this, peptideShakerGUI,
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                    true);
            progressDialog.setIndeterminate(true);
            progressDialog.setTitle("Exporting. Please Wait...");

            new Thread(new Runnable() {
                public void run() {

                    try {
                        progressDialog.setVisible(true);
                    } catch (IndexOutOfBoundsException e) {
                        // ignore
                    }
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {
                @Override
                public void run() {

                    try {
                        SequenceFactory sequenceFactory = SequenceFactory.getInstance();
                        progressDialog.setIndeterminate(false);
                        progressDialog.setMaxProgressValue(sequenceFactory.getNTargetSequences());

                        FileWriter f = new FileWriter(selectedFile);
                        BufferedWriter b = new BufferedWriter(f);

                        ArrayList<String> accessions = sequenceFactory.getAccessions();
                        PSParameter probabilities = new PSParameter();

                        for (int i = 0; i < accessions.size(); i++) {

                            Protein tempProtein = sequenceFactory.getProtein(accessions.get(i));

                            if (!tempProtein.isDecoy()) {
                                if (!peptideShakerGUI.getIdentification().matchExists(accessions.get(i))) {
                                    b.write(sequenceFactory.getHeader(accessions.get(i)).toString() + System.getProperty("line.separator"));
                                    b.write(sequenceFactory.getProtein(accessions.get(i)).getSequence() + System.getProperty("line.separator"));
                                } else if (includeNonValidatedInUnidentifiedFastaCheckBox.isSelected()) {
                                    probabilities = (PSParameter) peptideShakerGUI.getIdentification().getProteinMatchParameter(accessions.get(i), probabilities);

                                    if (!probabilities.isValidated()) {
                                        b.write(sequenceFactory.getHeader(accessions.get(i)).toString() + System.getProperty("line.separator"));
                                        b.write(sequenceFactory.getProtein(accessions.get(i)).getSequence() + System.getProperty("line.separator"));
                                    }
                                }
                            }

                            progressDialog.increaseProgressValue();

                            if (progressDialog.isRunCanceled()) {
                                break;
                            }
                        }

                        b.close();
                        f.close();

                        boolean processCancelled = progressDialog.isRunCanceled();
                        progressDialog.setRunFinished();

                        if (!processCancelled) {
                            JOptionPane.showMessageDialog(tempRef, "Unidentified proteins exported to " + selectedFile.getPath() + ".", "Export Complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (Exception e) {
                        progressDialog.setRunFinished();
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(tempRef, "An error occured when exporting the data.", "Export Failed", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_exportUnidentifiedProteinsAsFastaButtonActionPerformed

    /**
     * Export all the unidentified protein accession numbers to a tab separated
     * text file.
     *
     * @param evt
     */
    private void exportUnidentifiedProteinsAccessionNumbersAsCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportUnidentifiedProteinsAccessionNumbersAsCsvButtonActionPerformed

        // get the file to send the output to
        final File selectedFile = peptideShakerGUI.getUserSelectedFile(".txt", "(Tab Separated Text File) *.txt", "Select Destination File", false);

        if (selectedFile != null) {

            final FollowupPreferencesDialog tempRef = this; // needed due to threading issues

            progressDialog = new ProgressDialogX(this, peptideShakerGUI,
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                    true);
            progressDialog.setIndeterminate(true);
            progressDialog.setTitle("Exporting. Please Wait...");

            new Thread(new Runnable() {
                public void run() {
                    try {
                        progressDialog.setVisible(true);
                    } catch (IndexOutOfBoundsException e) {
                        // ignore
                    }
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {
                @Override
                public void run() {

                    try {
                        SequenceFactory sequenceFactory = SequenceFactory.getInstance();
                        progressDialog.setIndeterminate(false);
                        progressDialog.setMaxProgressValue(sequenceFactory.getNTargetSequences());

                        FileWriter f = new FileWriter(selectedFile);
                        BufferedWriter b = new BufferedWriter(f);

                        ArrayList<String> accessions = sequenceFactory.getAccessions();
                        PSParameter probabilities = new PSParameter();

                        for (int i = 0; i < accessions.size(); i++) {

                            Protein tempProtein = sequenceFactory.getProtein(accessions.get(i));

                            if (!tempProtein.isDecoy()) {
                                if (!peptideShakerGUI.getIdentification().matchExists(accessions.get(i))) {
                                    b.write(accessions.get(i) + System.getProperty("line.separator"));
                                } else if (includeNonValidatedInProteinUnidentifiedCsvCheckBox.isSelected()) {
                                    probabilities = (PSParameter) peptideShakerGUI.getIdentification().getProteinMatchParameter(accessions.get(i), probabilities);

                                    if (!probabilities.isValidated()) {
                                        b.write(accessions.get(i) + System.getProperty("line.separator"));
                                    }
                                }
                            }

                            progressDialog.increaseProgressValue();

                            if (progressDialog.isRunCanceled()) {
                                break;
                            }
                        }

                        b.close();
                        f.close();

                        boolean processCancelled = progressDialog.isRunCanceled();
                        progressDialog.setRunFinished();

                        if (!processCancelled) {
                            JOptionPane.showMessageDialog(tempRef, "Unidentified proteins exported to " + selectedFile.getPath() + ".", "Export Complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (Exception e) {
                        progressDialog.setRunFinished();
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(tempRef, "An error occured when exporting the data.", "Export Failed", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_exportUnidentifiedProteinsAccessionNumbersAsCsvButtonActionPerformed

    /**
     * Export all the identified proteins to a FASTA file.
     *
     * @param evt
     */
    private void exportIdentifiedProteinsAsFastaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportIdentifiedProteinsAsFastaButtonActionPerformed

        // get the file to send the output to
        final File selectedFile = peptideShakerGUI.getUserSelectedFile(".fasta", "Supported formats: FASTA format (.fasta)", "Select Destination File", false);

        if (selectedFile != null) {

            final FollowupPreferencesDialog tempRef = this; // needed due to threading issues

            progressDialog = new ProgressDialogX(this, peptideShakerGUI,
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                    true);
            progressDialog.setIndeterminate(true);
            progressDialog.setTitle("Exporting. Please Wait...");

            new Thread(new Runnable() {
                public void run() {
                    try {
                        progressDialog.setVisible(true);
                    } catch (IndexOutOfBoundsException e) {
                        // ignore
                    }
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {
                @Override
                public void run() {

                    try {
                        SequenceFactory sequenceFactory = SequenceFactory.getInstance();
                        progressDialog.setIndeterminate(false);
                        progressDialog.setMaxProgressValue(sequenceFactory.getNTargetSequences());

                        FileWriter f = new FileWriter(selectedFile);
                        BufferedWriter b = new BufferedWriter(f);

                        ArrayList<String> accessions = sequenceFactory.getAccessions();
                        PSParameter probabilities = new PSParameter();

                        for (int i = 0; i < accessions.size(); i++) {

                            Protein tempProtein = sequenceFactory.getProtein(accessions.get(i));

                            if (!tempProtein.isDecoy()) {
                                if (peptideShakerGUI.getIdentification().matchExists(accessions.get(i))) {

                                    probabilities = (PSParameter) peptideShakerGUI.getIdentification().getProteinMatchParameter(accessions.get(i), probabilities);

                                    if (probabilities.isValidated()) {
                                        b.write(sequenceFactory.getHeader(accessions.get(i)).toString() + System.getProperty("line.separator"));
                                        b.write(sequenceFactory.getProtein(accessions.get(i)).getSequence() + System.getProperty("line.separator"));
                                    }
                                }
                            }

                            progressDialog.increaseProgressValue();

                            if (progressDialog.isRunCanceled()) {
                                break;
                            }
                        }

                        b.close();
                        f.close();


                        boolean processCancelled = progressDialog.isRunCanceled();
                        progressDialog.setRunFinished();

                        if (!processCancelled) {
                            JOptionPane.showMessageDialog(tempRef, "Identified proteins exported to " + selectedFile.getPath() + ".", "Export Complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (Exception e) {
                        progressDialog.setRunFinished();
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(tempRef, "An error occured when exporting the data.", "Export Failed", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_exportIdentifiedProteinsAsFastaButtonActionPerformed

    /**
     * Export all the identified protein accession numbers to a tab separated
     * text file.
     *
     * @param evt
     */
    private void exportIdentifiedProteinAccessionNumbersAsCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportIdentifiedProteinAccessionNumbersAsCsvButtonActionPerformed

        // get the file to send the output to
        final File selectedFile = peptideShakerGUI.getUserSelectedFile(".txt", "(Tab Separated Text File) *.txt", "Select Destination File", false);

        if (selectedFile != null) {

            final FollowupPreferencesDialog tempRef = this; // needed due to threading issues

            progressDialog = new ProgressDialogX(this, peptideShakerGUI,
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker.gif")),
                    Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/peptide-shaker-orange.gif")),
                    true);
            progressDialog.setIndeterminate(true);
            progressDialog.setTitle("Exporting. Please Wait...");

            new Thread(new Runnable() {
                public void run() {

                    try {
                        progressDialog.setVisible(true);
                    } catch (IndexOutOfBoundsException e) {
                        // ignore
                    }
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {
                @Override
                public void run() {

                    try {
                        SequenceFactory sequenceFactory = SequenceFactory.getInstance();
                        progressDialog.setIndeterminate(false);
                        progressDialog.setMaxProgressValue(sequenceFactory.getNTargetSequences());

                        FileWriter f = new FileWriter(selectedFile);
                        BufferedWriter b = new BufferedWriter(f);

                        ArrayList<String> accessions = sequenceFactory.getAccessions();
                        PSParameter probabilities = new PSParameter();

                        for (int i = 0; i < accessions.size(); i++) {

                            Protein tempProtein = sequenceFactory.getProtein(accessions.get(i));

                            if (!tempProtein.isDecoy()) {
                                if (peptideShakerGUI.getIdentification().matchExists(accessions.get(i))) {

                                    probabilities = (PSParameter) peptideShakerGUI.getIdentification().getProteinMatchParameter(accessions.get(i), probabilities);

                                    if (probabilities.isValidated()) {
                                        b.write(accessions.get(i) + System.getProperty("line.separator"));
                                    }
                                }
                            }

                            progressDialog.increaseProgressValue();

                            if (progressDialog.isRunCanceled()) {
                                break;
                            }
                        }

                        b.close();
                        f.close();


                        boolean processCancelled = progressDialog.isRunCanceled();
                        progressDialog.setRunFinished();

                        if (!processCancelled) {
                            JOptionPane.showMessageDialog(tempRef, "Identified proteins exported to " + selectedFile.getPath() + ".", "Export Complete", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (Exception e) {
                        progressDialog.setRunFinished();
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(tempRef, "An error occured when exporting the data.", "Export Failed", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_exportIdentifiedProteinAccessionNumbersAsCsvButtonActionPerformed

    /**
     * Recalibrate the spectra.
     *
     * @param evt
     */
    private void recalibrateMgfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalibrateMgfButtonActionPerformed
        boolean ms1 = true;
        boolean ms2 = true;
        if (spectrumRecalibrationCmb.getSelectedIndex() == 1) {
            ms2 = false;
        } else if (spectrumRecalibrationCmb.getSelectedIndex() == 2) {
            ms1 = false;
        }
        peptideShakerGUI.recalibrateSpectra(this, ms1, ms2);
    }//GEN-LAST:event_recalibrateMgfButtonActionPerformed

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void progensisWarningLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progensisWarningLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_progensisWarningLabelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void progensisWarningLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progensisWarningLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_progensisWarningLabelMouseExited

    /**
     * Show the Progensis warning.
     *
     * @param evt
     */
    private void progensisWarningLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progensisWarningLabelMouseClicked

        // create an empty label to put the message in
        JLabel label = new JLabel();

        // html content 
        JEditorPane ep = new JEditorPane("text/html", "<html><body bgcolor=\"#" + Util.color2Hex(label.getBackground()) + "\">"
                + "Note that using the Phenyx format simplifies the identification results.<br>"
                + "A direct PeptideShaker import is currently not available in Progenesis.<br>"
                + "If you would like this supported please contact <a href=\"http://www.nonlinear.com/products/progenesis/lc-ms/overview/\">Progenesis</a>."
                + "</body></html>");

        // handle link events 
        ep.addHyperlinkListener(new HyperlinkListener() {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED)) {
                    BareBonesBrowserLaunch.openURL(e.getURL().toString());
                }
            }
        });

        ep.setBorder(null);
        ep.setEditable(false);

        JOptionPane.showMessageDialog(this, ep, "Progenesis Format Warning", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_progensisWarningLabelMouseClicked

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void exportToProgenesisLinkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToProgenesisLinkLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_exportToProgenesisLinkLabelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void exportToProgenesisLinkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToProgenesisLinkLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_exportToProgenesisLinkLabelMouseExited

    /**
     * Open the Progenesis home page.
     *
     * @param evt
     */
    private void exportToProgenesisLinkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToProgenesisLinkLabelMouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("http://www.nonlinear.com/products/progenesis/lc-ms/overview/");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_exportToProgenesisLinkLabelMouseClicked

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void exportToProgenesisHelpLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToProgenesisHelpLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_exportToProgenesisHelpLabelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void exportToProgenesisHelpLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToProgenesisHelpLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_exportToProgenesisHelpLabelMouseExited

    /**
     * Open the export to Progenesis help.
     *
     * @param evt
     */
    private void exportToProgenesisHelpLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToProgenesisHelpLabelMouseReleased
        // create an empty label to put the message in
        JLabel label = new JLabel();

        // html content 
        JEditorPane ep = new JEditorPane("text/html", "<html><body bgcolor=\"#" + Util.color2Hex(label.getBackground()) + "\">"
                + "<a href=\"http://www.nonlinear.com/products/progenesis/lc-ms/overview/\">Progenesis</a> does not yet have a specific PeptideShaker import. In order to get the<br>"
                + "identifications back into Progenesis one therefore has to rely on the Phenyx import<br>"
                + "format, i.e., select 'Phenyx' when importing the results back into Progenesis.<br><br>"
                + "Note that converting to the 'Phenyx' format simplifies the identification results.<br><br>"
                + "If you would like to see a proper PeptideShaker import please contact <a href=\"http://www.nonlinear.com/products/progenesis/lc-ms/overview/\">Progenesis</a>."
                + "</body></html>");

        // handle link events 
        ep.addHyperlinkListener(new HyperlinkListener() {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if (e.getEventType().equals(HyperlinkEvent.EventType.ACTIVATED)) {
                    BareBonesBrowserLaunch.openURL(e.getURL().toString());
                }
            }
        });

        ep.setBorder(null);
        ep.setEditable(false);

        JOptionPane.showMessageDialog(this, ep, "Progenesis Help", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_exportToProgenesisHelpLabelMouseReleased

    /**
     * Export the data to PepNovo.
     * 
     * @param evt 
     */
    private void exportPepnovoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPepnovoButtonActionPerformed
        //  @TODO: implement me!!
    }//GEN-LAST:event_exportPepnovoButtonActionPerformed

    /**
     * Open the PepNovo home page.
     *
     * @param evt
     */
    private void exportToPepNovoLinkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToPepNovoLinkLabelMouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("http://proteomics.ucsd.edu/Software/PepNovo.html");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_exportToPepNovoLinkLabelMouseClicked

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void exportToPepNovoLinkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToPepNovoLinkLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_exportToPepNovoLinkLabelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void exportToPepNovoLinkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportToPepNovoLinkLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_exportToPepNovoLinkLabelMouseExited

    /**
     * Change the cursor to a hand cursor.
     *
     * @param evt
     */
    private void deNovoGuiLinkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deNovoGuiLinkLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_deNovoGuiLinkLabelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void deNovoGuiLinkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deNovoGuiLinkLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_deNovoGuiLinkLabelMouseExited

    /**
     * Open the PepNovo home page.
     *
     * @param evt
     */
    private void deNovoGuiLinkLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deNovoGuiLinkLabelMouseReleased
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("http://denovogui.googlecode.com");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_deNovoGuiLinkLabelMouseReleased

    /**
     * Indicates whether a spectrum is validated according to the user's
     * settings.
     *
     * @param spectrumKey the key of the spectrum
     * @return a boolean indicating whether the spectrum is validated
     */
    private boolean isValidated(String spectrumKey) {
        PSParameter psParameter = new PSParameter();
        if (peptideShakerGUI.getIdentification().matchExists(spectrumKey)) {
            try {
                psParameter = (PSParameter) peptideShakerGUI.getIdentification().getSpectrumMatchParameter(spectrumKey, psParameter);
            } catch (Exception e) {
                peptideShakerGUI.catchException(e);
                return false;
            }
        } else {
            return false;
        }
        switch (spectrumValidationCmb.getSelectedIndex()) {
            case 0:
                return psParameter.isValidated();
            case 1:
                if (!psParameter.isValidated()) {
                    return false;
                }
                try {
                    SpectrumMatch spectrumMatch = peptideShakerGUI.getIdentification().getSpectrumMatch(spectrumKey);
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getPeptideMatchParameter(spectrumMatch.getBestAssumption().getPeptide().getKey(), psParameter);
                    return psParameter.isValidated();
                } catch (Exception e) {
                    peptideShakerGUI.catchException(e);
                }
                return false;
            case 2:
                if (!psParameter.isValidated()) {
                    return false;
                }
                try {
                    SpectrumMatch spectrumMatch = peptideShakerGUI.getIdentification().getSpectrumMatch(spectrumKey);
                    for (String protein : spectrumMatch.getBestAssumption().getPeptide().getParentProteins()) {
                        for (String proteinMatch : peptideShakerGUI.getIdentification().getProteinMap().get(protein)) {
                            psParameter = (PSParameter) peptideShakerGUI.getIdentification().getProteinMatchParameter(proteinMatch, psParameter);
                            if (psParameter != null && psParameter.isValidated()) {
                                return true;
                            }
                        }
                    }
                } catch (Exception e) {
                    peptideShakerGUI.catchException(e);
                }
                return false;
            default:
                return false;
        }
    }

    /**
     * Returns whether a peptide should be excluded from the inclusion list
     * according to the GUI setting and the protein match it belongs to.
     *
     * @param proteinMatch the protein match this peptide belongs to
     * @param peptide the peptide of interest
     * @return a boolean indicating whether this peptide should be excluded
     */
    private boolean shallExclude(String proteinKey, Peptide peptide) {
        if (miscleavedCheck.isSelected() && peptide.getNMissedCleavages(peptideShakerGUI.getSearchParameters().getEnzyme()) > 0) {
            return true;
        }
        if (reactiveCheck.isSelected()) {
            String sequence = peptide.getSequence();
            if (sequence.contains("M")
                    || sequence.contains("C")
                    || sequence.contains("W")
                    || sequence.contains("NG")
                    || sequence.contains("DG")
                    || sequence.contains("QG")
                    || sequence.startsWith("N")
                    || sequence.startsWith("Q")) {
                return true;
            }
        }
        if (relatedProteinsCheck.isSelected() || relatredAndUnrelatedCheck.isSelected() || unrelatedCheck.isSelected()) {
            PSParameter pSParameter = new PSParameter();
            try {
                pSParameter = (PSParameter) peptideShakerGUI.getIdentification().getSpectrumMatchParameter(proteinKey, pSParameter);
            } catch (Exception e) {
                peptideShakerGUI.catchException(e);
                return false;
            }
            if (relatedProteinsCheck.isSelected() && pSParameter.getProteinInferenceClass() == PSParameter.RELATED) {
                return true;
            }
            if (relatredAndUnrelatedCheck.isSelected() && pSParameter.getProteinInferenceClass() == PSParameter.RELATED_AND_UNRELATED) {
                return true;
            }
            if (unrelatedCheck.isSelected() && pSParameter.getProteinInferenceClass() == PSParameter.UNRELATED) {
                return true;
            }
        }
        if (degeneratedCheck.isSelected()) {
            for (String protein : peptide.getParentProteins()) {
                if (!proteinKey.contains(protein)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Validates the user's input.
     *
     * @return a boolean indicating whether the input is valid.
     */
    private boolean validateInput() {
        try {
            new Double(rtWindow.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please verify the input for the RT minimal window.", "Wrong input", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Returns a line to be output in an inclusion list according to the user's
     * input.
     *
     * @param spectrumKey The key of the spectrum
     * @param retentionTimes The retention times found for this peptide
     * @return a line to be appended in the inclusion list
     * @throws Exception exception thrown whenever a problem was encountered
     * while reading the spectrum file
     */
    private String getInclusionListLine(String spectrumKey, ArrayList<Double> retentionTimes) throws Exception {
        Collections.sort(retentionTimes);
        Precursor precursor = spectrumFactory.getPrecursor(spectrumKey);
        double minWindow = new Double(rtWindow.getText().trim());
        switch (vendorCmb.getSelectedIndex()) {
            case 0:
                int index = (int) (0.25 * retentionTimes.size());
                double rtMin = retentionTimes.get(index) / 60;
                index = (int) (0.75 * retentionTimes.size());
                double rtMax = retentionTimes.get(index) / 60;
                if (rtMax - rtMin < minWindow / 60) {
                    index = (int) (0.5 * retentionTimes.size());
                    rtMin = (retentionTimes.get(index) - minWindow / 2) / 60;
                    rtMax = (retentionTimes.get(index) + minWindow / 2) / 60;
                }
                return precursor.getMz() + "\t" + rtMin + "\t" + rtMax + System.getProperty("line.separator");
            case 1:
                index = (int) (0.5 * retentionTimes.size());
                double rtInMin = retentionTimes.get(index) / 60;
                return rtInMin + "\t" + precursor.getMz() + System.getProperty("line.separator");
            case 2:
                index = (int) 0.5 * retentionTimes.size();
                double rt = retentionTimes.get(index);
                int index25 = (int) (0.25 * retentionTimes.size());
                int index75 = (int) (0.75 * retentionTimes.size());
                double range = retentionTimes.get(index75) - retentionTimes.get(index25);
                if (range < minWindow) {
                    range = minWindow;
                }
                if (peptideShakerGUI.getSearchParameters().getPrecursorAccuracyType() == SearchParameters.PrecursorAccuracyType.PPM) {
                    double deltaMZ = peptideShakerGUI.getSearchParameters().getPrecursorAccuracy() / 1000000 * precursor.getMz();
                    double mzMin = precursor.getMz() - deltaMZ;
                    double mzMax = precursor.getMz() + deltaMZ;
                    return rt + "," + range + "," + mzMin + "," + mzMax + System.getProperty("line.separator");
                } else { // Dalton
                    SpectrumMatch spectrumMatch = peptideShakerGUI.getIdentification().getSpectrumMatch(spectrumKey);
                    double deltaMZ = peptideShakerGUI.getSearchParameters().getPrecursorAccuracy() / spectrumMatch.getBestAssumption().getIdentificationCharge().value;
                    double mzMin = precursor.getMz() - deltaMZ;
                    double mzMax = precursor.getMz() + deltaMZ;
                    return rt + "," + range + "," + mzMin + "," + mzMax + System.getProperty("line.separator");
                }
            case 3:
                index = (int) (0.5 * retentionTimes.size());
                rt = retentionTimes.get(index);
                return precursor.getMz() + "," + rt + System.getProperty("line.separator");
            default:
                return "";
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel deNovoGuiLinkLabel;
    private javax.swing.JPanel deNovoSearchPanel;
    private javax.swing.JCheckBox degeneratedCheck;
    private javax.swing.JLabel exportAllIdentifiedProteinAccessionsLabel;
    private javax.swing.JLabel exportAllIdentifiedProteinsAsFastaLabel;
    private javax.swing.JLabel exportAllUnidentifiedAccessionsLabel;
    private javax.swing.JLabel exportAllUnidentifiedProteinsAsFastaLabel;
    private javax.swing.JButton exportIdentifiedProteinAccessionNumbersAsCsvButton;
    private javax.swing.JButton exportIdentifiedProteinsAsFastaButton;
    private javax.swing.JButton exportMgfButton;
    private javax.swing.JButton exportPepnovoButton;
    private javax.swing.JButton exportProgenesisButton;
    private javax.swing.JLabel exportSpectraLabel;
    private javax.swing.JLabel exportToPepNovoLinkLabel;
    private javax.swing.JLabel exportToPepNovoPart1Label;
    private javax.swing.JLabel exportToProgenesisHelpLabel;
    private javax.swing.JLabel exportToProgenesisLinkLabel;
    private javax.swing.JLabel exportToProgenesisPart1Label;
    private javax.swing.JButton exportUnidentifiedProteinsAccessionNumbersAsCsvButton;
    private javax.swing.JButton exportUnidentifiedProteinsAsFastaButton;
    private javax.swing.JLabel formatLabel;
    private javax.swing.JComboBox idSelectionCmb;
    private javax.swing.JLabel ignoredPeptidesLabel;
    private javax.swing.JLabel ignoredProteinsLabel;
    private javax.swing.JCheckBox includeNonValidatedInProteinUnidentifiedCsvCheckBox;
    private javax.swing.JCheckBox includeNonValidatedInUnidentifiedFastaCheckBox;
    private javax.swing.JLabel includeValidatedPsmsLabel;
    private javax.swing.JButton inclusionListButton;
    private javax.swing.JPanel inclusionListPanel;
    private javax.swing.JLabel minRtWindowLabel;
    private javax.swing.JLabel minRtWindowUnitLabel;
    private javax.swing.JCheckBox miscleavedCheck;
    private javax.swing.JPanel progenesisPanel;
    private javax.swing.JLabel progensisWarningLabel;
    private javax.swing.JCheckBox reactiveCheck;
    private javax.swing.JCheckBox recalibrateForDenovoCheck;
    private javax.swing.JButton recalibrateMgfButton;
    private javax.swing.JLabel recalibrateSpectraLabel;
    private javax.swing.JCheckBox relatedProteinsCheck;
    private javax.swing.JCheckBox relatredAndUnrelatedCheck;
    private javax.swing.JTextField rtWindow;
    private javax.swing.JPanel spectraPanel;
    private javax.swing.JComboBox spectrumRecalibrationCmb;
    private javax.swing.JComboBox spectrumValidationCmb;
    private javax.swing.JPanel unidentifiedProteinsPanel;
    private javax.swing.JPanel unidentifiedProteinsPanel1;
    private javax.swing.JCheckBox unrelatedCheck;
    private javax.swing.JComboBox vendorCmb;
    // End of variables declaration//GEN-END:variables
}
