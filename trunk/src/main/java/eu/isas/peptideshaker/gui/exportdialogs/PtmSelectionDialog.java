/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.isas.peptideshaker.gui.exportdialogs;

import com.compomics.util.preferences.ModificationProfile;
import eu.isas.peptideshaker.preferences.UserPreferences;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marc
 */
public class PtmSelectionDialog extends javax.swing.JDialog {

    /**
     * The modification profile used for the search
     */
    private ArrayList<String> searchedModifications = null;
    /**
     * The selected modifications
     */
    private ArrayList<String> selectedModifications;
    /**
     * Boolean indicating whether the user canceled the input
     */
    private boolean canceled = false;
    
    /**
     * Creates new form PtmSelectionDialog
     */
    public PtmSelectionDialog(java.awt.Frame parent, ArrayList<String> searchedModifications) {
        super(parent, true);
        this.searchedModifications = searchedModifications;
        selectedModifications = new ArrayList<String>();
        //Let's try to find the modifications of interest
        for (String ptm : searchedModifications) {
            if (ptm.contains("phospho") || ptm.contains("glyco")) {
                selectedModifications.add(ptm);
            }
        }
        initComponents();
        this.setLocationRelativeTo(parent);
        setVisible(true);
    }
    
    /**
     * Indicates whether only the confident modifications sites are of interest
     * @return 
     */
    public boolean confidentOnly() {
        return confidentCheck.isSelected();
    }
    
    /**
     * Returns a list of selected modifications. Null if the user pressed cancel
     * @return 
     */
    public ArrayList<String> selectedModifications() {
        if (!canceled) {
            return selectedModifications;
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        confidentCheck = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        modificationList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Cancel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        confidentCheck.setText("Confidently localized only");

        modificationList.setModel(new PTMTableModel());
        jScrollPane1.setViewportView(modificationList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confidentCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(confidentCheck))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        canceled = true;
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox confidentCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable modificationList;
    // End of variables declaration//GEN-END:variables


private class PTMTableModel extends DefaultTableModel {
    /**
     * Constructor
     */
    public PTMTableModel() {
    }

    @Override
    public int getRowCount() {
        if (searchedModifications == null) {
            return 0;
        }
        return searchedModifications.size();
    }

    @Override
    public int getColumnCount() {
        return 2;
    }

    @Override
    public String getColumnName(int column) {
        switch (column) {
            case 0: return " ";
            case 1: return "Modification";
                default: return "";
        }
    }

    @Override
    public Object getValueAt(int row, int column) {
        String ptm = searchedModifications.get(row);
        if (ptm == null) {
            return "";
        }
        switch (column) {
            case 0: return selectedModifications.contains(ptm);
            case 1: return ptm;
            default: return "";
        }
    }

    @Override
    public Class getColumnClass(int columnIndex) {
        for (int i = 0; i < getRowCount(); i++) {
            if (getValueAt(i, columnIndex) != null) {
                return getValueAt(i, columnIndex).getClass();
            }
        }
        return String.class;
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false;
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        if (columnIndex == 0) {
            String ptm = searchedModifications.get(rowIndex);
            if (ptm != null) {
                if (selectedModifications.contains(ptm)) {
                    selectedModifications.remove(ptm);
                } else {
                    selectedModifications.add(ptm);
                }
            }
        }
    }
}

}
