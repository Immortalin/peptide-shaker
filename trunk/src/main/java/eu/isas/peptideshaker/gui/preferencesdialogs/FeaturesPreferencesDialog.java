package eu.isas.peptideshaker.gui.preferencesdialogs;

import com.compomics.util.gui.dialogs.ProgressDialogX;
import eu.isas.peptideshaker.export.CsvExporter;
import eu.isas.peptideshaker.export.FeaturesGenerator;
import eu.isas.peptideshaker.gui.HelpWindow;
import eu.isas.peptideshaker.gui.PeptideShakerGUI;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 * Dialog for exporting protein, peptide, psms and search engine features.
 * 
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class FeaturesPreferencesDialog extends javax.swing.JDialog {

    /**
     * Peptide-Shaker main GUI
     */
    private PeptideShakerGUI peptideShakerGUI;
    /**
     * The output generator will generate the output based on the user's choice
     */
    private FeaturesGenerator outputGenerator;
    /**
     * A simple progress dialog.
     */
    private static ProgressDialogX progressDialog;
    /**
     * The current feature
     */
    private String feature;

    /** 
     * Creates a new ExportPreferencesDialog.
     * 
     * @param peptideShakerGUI the PeptideShaker GUI parent
     */
    public FeaturesPreferencesDialog(PeptideShakerGUI peptideShakerGUI) {
        super(peptideShakerGUI, true);
        this.peptideShakerGUI = peptideShakerGUI;
        initComponents();
        this.outputGenerator = new FeaturesGenerator(peptideShakerGUI);
        this.pack();
        this.setLocationRelativeTo(peptideShakerGUI);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        projectPanel = new javax.swing.JPanel();
        exportTextFilesLabel = new javax.swing.JLabel();
        exportAll = new javax.swing.JButton();
        featuresPanel = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        proteinsPanel = new javax.swing.JPanel();
        proteinAccession = new javax.swing.JCheckBox();
        proteinPI = new javax.swing.JCheckBox();
        proteinNPeptides = new javax.swing.JCheckBox();
        proteinNSpectra = new javax.swing.JCheckBox();
        proteinDescription = new javax.swing.JCheckBox();
        proteinEmpai = new javax.swing.JCheckBox();
        proteinNsaf = new javax.swing.JCheckBox();
        proteinScore = new javax.swing.JCheckBox();
        proteinConfidence = new javax.swing.JCheckBox();
        proteinExportAll = new javax.swing.JButton();
        proteinSelectAll = new javax.swing.JButton();
        proteinUnselectAll = new javax.swing.JButton();
        proteinExportValidated = new javax.swing.JButton();
        proteinSequenceCoverage = new javax.swing.JCheckBox();
        peptidesPanel = new javax.swing.JPanel();
        peptideAccession = new javax.swing.JCheckBox();
        peptideModification = new javax.swing.JCheckBox();
        peptideNSpectra = new javax.swing.JCheckBox();
        peptideScore = new javax.swing.JCheckBox();
        peptideConfidence = new javax.swing.JCheckBox();
        peptideSelectAll = new javax.swing.JButton();
        peptideUnselectAll = new javax.swing.JButton();
        peptideExportAll = new javax.swing.JButton();
        peptideExportValidated = new javax.swing.JButton();
        peptideSequence = new javax.swing.JCheckBox();
        peptidePosition = new javax.swing.JCheckBox();
        peptideLocation = new javax.swing.JCheckBox();
        psmPanel = new javax.swing.JPanel();
        psmAccession = new javax.swing.JCheckBox();
        psmSequence = new javax.swing.JCheckBox();
        psmFile = new javax.swing.JCheckBox();
        psmTitle = new javax.swing.JCheckBox();
        psmPrecursor = new javax.swing.JCheckBox();
        psmLocation = new javax.swing.JCheckBox();
        psmModification = new javax.swing.JCheckBox();
        psmScore = new javax.swing.JCheckBox();
        psmConfidence = new javax.swing.JCheckBox();
        psmSelectAll = new javax.swing.JButton();
        psmUnselectAll = new javax.swing.JButton();
        psmExportAll = new javax.swing.JButton();
        psmExportValidated = new javax.swing.JButton();
        searchEnginePanel = new javax.swing.JPanel();
        assumptionAccession = new javax.swing.JCheckBox();
        assumptionSequence = new javax.swing.JCheckBox();
        assumptionModification = new javax.swing.JCheckBox();
        assumptionLocation = new javax.swing.JCheckBox();
        assumptionFile = new javax.swing.JCheckBox();
        assumptionTitle = new javax.swing.JCheckBox();
        assumptionPrecursor = new javax.swing.JCheckBox();
        assumptionScores = new javax.swing.JCheckBox();
        assumptionConfidence = new javax.swing.JCheckBox();
        assumptionsExportAll = new javax.swing.JButton();
        assumptionUnselectAll = new javax.swing.JButton();
        assumptionExportAll = new javax.swing.JButton();
        assumptionsExportValidated = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        helpJButton = new javax.swing.JButton();

        setTitle("Export Features");
        setResizable(false);

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        projectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Project"));
        projectPanel.setOpaque(false);

        exportTextFilesLabel.setText("Export All Identification Results:");

        exportAll.setText("Export as Text Files");
        exportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout projectPanelLayout = new javax.swing.GroupLayout(projectPanel);
        projectPanel.setLayout(projectPanelLayout);
        projectPanelLayout.setHorizontalGroup(
            projectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportTextFilesLabel)
                .addGap(18, 18, 18)
                .addComponent(exportAll, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                .addContainerGap())
        );
        projectPanelLayout.setVerticalGroup(
            projectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportTextFilesLabel)
                    .addComponent(exportAll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        featuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Features"));
        featuresPanel.setOpaque(false);

        proteinsPanel.setBackground(new java.awt.Color(230, 230, 230));

        proteinAccession.setSelected(true);
        proteinAccession.setText("Protein Accession");
        proteinAccession.setIconTextGap(10);
        proteinAccession.setOpaque(false);

        proteinPI.setText("Protein Inference");
        proteinPI.setIconTextGap(10);
        proteinPI.setOpaque(false);

        proteinNPeptides.setText("#Validated Peptides");
        proteinNPeptides.setIconTextGap(10);
        proteinNPeptides.setOpaque(false);

        proteinNSpectra.setText("#Validated Spectra");
        proteinNSpectra.setIconTextGap(10);
        proteinNSpectra.setOpaque(false);

        proteinDescription.setText("Protein Description");
        proteinDescription.setIconTextGap(10);
        proteinDescription.setOpaque(false);

        proteinEmpai.setText("emPAI");
        proteinEmpai.setIconTextGap(10);
        proteinEmpai.setOpaque(false);

        proteinNsaf.setText("NSAF");
        proteinNsaf.setIconTextGap(10);
        proteinNsaf.setOpaque(false);

        proteinScore.setText("Score");
        proteinScore.setIconTextGap(10);
        proteinScore.setOpaque(false);

        proteinConfidence.setText("Confidence");
        proteinConfidence.setIconTextGap(10);
        proteinConfidence.setOpaque(false);

        proteinExportAll.setText("Export All");
        proteinExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinExportAllActionPerformed(evt);
            }
        });

        proteinSelectAll.setText("Select All");
        proteinSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinSelectAllActionPerformed(evt);
            }
        });

        proteinUnselectAll.setText("Deselect All");
        proteinUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinUnselectAllActionPerformed(evt);
            }
        });

        proteinExportValidated.setText("Export Validated");
        proteinExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinExportValidatedActionPerformed(evt);
            }
        });

        proteinSequenceCoverage.setText("Sequence Coverage");
        proteinSequenceCoverage.setIconTextGap(10);
        proteinSequenceCoverage.setOpaque(false);

        javax.swing.GroupLayout proteinsPanelLayout = new javax.swing.GroupLayout(proteinsPanel);
        proteinsPanel.setLayout(proteinsPanelLayout);
        proteinsPanelLayout.setHorizontalGroup(
            proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(proteinsPanelLayout.createSequentialGroup()
                        .addComponent(proteinDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(proteinSequenceCoverage))
                    .addGroup(proteinsPanelLayout.createSequentialGroup()
                        .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinAccession, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proteinPI, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinEmpai, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proteinNPeptides, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinNSpectra, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proteinNsaf, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinScore, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proteinConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(proteinsPanelLayout.createSequentialGroup()
                        .addComponent(proteinSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proteinUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 264, Short.MAX_VALUE)
                        .addComponent(proteinExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proteinExportAll)))
                .addContainerGap())
        );

        proteinsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {proteinAccession, proteinConfidence, proteinDescription, proteinEmpai, proteinNPeptides, proteinNSpectra, proteinNsaf, proteinPI, proteinScore, proteinSequenceCoverage});

        proteinsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {proteinSelectAll, proteinUnselectAll});

        proteinsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {proteinExportAll, proteinExportValidated});

        proteinsPanelLayout.setVerticalGroup(
            proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinAccession)
                    .addComponent(proteinScore)
                    .addComponent(proteinNPeptides)
                    .addComponent(proteinNSpectra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinPI)
                    .addComponent(proteinEmpai)
                    .addComponent(proteinNsaf)
                    .addComponent(proteinConfidence))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinDescription)
                    .addComponent(proteinSequenceCoverage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(proteinsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinSelectAll)
                    .addComponent(proteinUnselectAll)
                    .addComponent(proteinExportAll)
                    .addComponent(proteinExportValidated))
                .addContainerGap())
        );

        proteinsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {proteinAccession, proteinConfidence, proteinDescription, proteinEmpai, proteinNPeptides, proteinNSpectra, proteinNsaf, proteinPI, proteinScore});

        tabbedPane.addTab("Proteins", proteinsPanel);

        peptidesPanel.setBackground(new java.awt.Color(230, 230, 230));

        peptideAccession.setSelected(true);
        peptideAccession.setText("Protein Accession");
        peptideAccession.setIconTextGap(10);
        peptideAccession.setOpaque(false);

        peptideModification.setText("Modification Status");
        peptideModification.setIconTextGap(10);
        peptideModification.setOpaque(false);

        peptideNSpectra.setText("#Validated Spectra");
        peptideNSpectra.setIconTextGap(10);
        peptideNSpectra.setOpaque(false);

        peptideScore.setText("Score");
        peptideScore.setIconTextGap(10);
        peptideScore.setOpaque(false);

        peptideConfidence.setSelected(true);
        peptideConfidence.setText("Confidence");
        peptideConfidence.setIconTextGap(10);
        peptideConfidence.setOpaque(false);

        peptideSelectAll.setText("Select All");
        peptideSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideSelectAllActionPerformed(evt);
            }
        });

        peptideUnselectAll.setText("Deselect All");
        peptideUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideUnselectAllActionPerformed(evt);
            }
        });

        peptideExportAll.setText("Export All");
        peptideExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideExportAllActionPerformed(evt);
            }
        });

        peptideExportValidated.setText("Export Validated");
        peptideExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideExportValidatedActionPerformed(evt);
            }
        });

        peptideSequence.setSelected(true);
        peptideSequence.setText("Peptide Sequence");
        peptideSequence.setIconTextGap(10);
        peptideSequence.setOpaque(false);

        peptidePosition.setText("Peptide Position");
        peptidePosition.setIconTextGap(10);
        peptidePosition.setOpaque(false);

        peptideLocation.setText("Location Scores");
        peptideLocation.setIconTextGap(10);
        peptideLocation.setOpaque(false);

        javax.swing.GroupLayout peptidesPanelLayout = new javax.swing.GroupLayout(peptidesPanel);
        peptidesPanel.setLayout(peptidesPanelLayout);
        peptidesPanelLayout.setHorizontalGroup(
            peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptidesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peptidePosition)
                    .addGroup(peptidesPanelLayout.createSequentialGroup()
                        .addGroup(peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(peptidesPanelLayout.createSequentialGroup()
                                .addComponent(peptideAccession, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(peptideModification, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(peptideNSpectra, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(peptidesPanelLayout.createSequentialGroup()
                                .addComponent(peptideSequence, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(peptideLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(peptideConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(peptideScore, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, peptidesPanelLayout.createSequentialGroup()
                        .addComponent(peptideSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peptideUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 264, Short.MAX_VALUE)
                        .addComponent(peptideExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peptideExportAll)))
                .addContainerGap())
        );

        peptidesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {peptideAccession, peptideConfidence, peptideLocation, peptideModification, peptideNSpectra, peptidePosition, peptideScore, peptideSequence});

        peptidesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {peptideExportAll, peptideExportValidated});

        peptidesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {peptideSelectAll, peptideUnselectAll});

        peptidesPanelLayout.setVerticalGroup(
            peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peptidesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peptideAccession)
                    .addComponent(peptideModification)
                    .addComponent(peptideNSpectra)
                    .addComponent(peptideScore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peptideConfidence)
                    .addComponent(peptideSequence)
                    .addComponent(peptideLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peptidePosition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(peptidesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peptideSelectAll)
                    .addComponent(peptideUnselectAll)
                    .addComponent(peptideExportAll)
                    .addComponent(peptideExportValidated))
                .addContainerGap())
        );

        peptidesPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {peptideAccession, peptideConfidence, peptideModification, peptideNSpectra, peptideScore, peptideSequence});

        tabbedPane.addTab("Peptides", peptidesPanel);

        psmPanel.setBackground(new java.awt.Color(230, 230, 230));

        psmAccession.setSelected(true);
        psmAccession.setText("Protein Accession");
        psmAccession.setIconTextGap(10);
        psmAccession.setOpaque(false);

        psmSequence.setSelected(true);
        psmSequence.setText("Peptide Sequence");
        psmSequence.setIconTextGap(10);
        psmSequence.setOpaque(false);

        psmFile.setText("Spectrum File");
        psmFile.setIconTextGap(10);
        psmFile.setOpaque(false);

        psmTitle.setSelected(true);
        psmTitle.setText("Spectrum Title");
        psmTitle.setIconTextGap(10);
        psmTitle.setOpaque(false);

        psmPrecursor.setText("Precursor Details");
        psmPrecursor.setIconTextGap(10);
        psmPrecursor.setOpaque(false);

        psmLocation.setText("Location Scores");
        psmLocation.setIconTextGap(10);
        psmLocation.setOpaque(false);

        psmModification.setText("Modification Status");
        psmModification.setIconTextGap(10);
        psmModification.setOpaque(false);

        psmScore.setText("Score");
        psmScore.setIconTextGap(10);
        psmScore.setOpaque(false);

        psmConfidence.setSelected(true);
        psmConfidence.setText("Confidence");
        psmConfidence.setIconTextGap(10);
        psmConfidence.setOpaque(false);

        psmSelectAll.setText("Select All");
        psmSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmSelectAllActionPerformed(evt);
            }
        });

        psmUnselectAll.setText("Deselect All");
        psmUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmUnselectAllActionPerformed(evt);
            }
        });

        psmExportAll.setText("Export All");
        psmExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmExportAllActionPerformed(evt);
            }
        });

        psmExportValidated.setText("Export Validated");
        psmExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmExportValidatedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout psmPanelLayout = new javax.swing.GroupLayout(psmPanel);
        psmPanel.setLayout(psmPanelLayout);
        psmPanelLayout.setHorizontalGroup(
            psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(psmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(psmPanelLayout.createSequentialGroup()
                        .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmAccession, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(psmSequence, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmModification, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(psmLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(psmFile, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(psmPrecursor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(psmScore, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(psmPanelLayout.createSequentialGroup()
                        .addComponent(psmSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psmUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 264, Short.MAX_VALUE)
                        .addComponent(psmExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psmExportAll)))
                .addContainerGap())
        );

        psmPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {psmAccession, psmConfidence, psmFile, psmLocation, psmModification, psmPrecursor, psmScore, psmSequence, psmTitle});

        psmPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {psmExportAll, psmExportValidated});

        psmPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {psmSelectAll, psmUnselectAll});

        psmPanelLayout.setVerticalGroup(
            psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(psmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(psmAccession)
                    .addComponent(psmModification)
                    .addComponent(psmFile)
                    .addComponent(psmScore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(psmSequence)
                    .addComponent(psmLocation)
                    .addComponent(psmTitle)
                    .addComponent(psmConfidence))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(psmPrecursor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(psmSelectAll)
                    .addComponent(psmUnselectAll)
                    .addComponent(psmExportAll)
                    .addComponent(psmExportValidated))
                .addContainerGap())
        );

        psmPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {psmAccession, psmConfidence, psmFile, psmLocation, psmModification, psmPrecursor, psmScore, psmSequence, psmTitle});

        tabbedPane.addTab("PSMs", psmPanel);

        searchEnginePanel.setBackground(new java.awt.Color(230, 230, 230));

        assumptionAccession.setSelected(true);
        assumptionAccession.setText("Protein Accession");
        assumptionAccession.setIconTextGap(10);
        assumptionAccession.setOpaque(false);

        assumptionSequence.setSelected(true);
        assumptionSequence.setText("Peptide Sequence");
        assumptionSequence.setIconTextGap(10);
        assumptionSequence.setOpaque(false);

        assumptionModification.setText("Modification Status");
        assumptionModification.setIconTextGap(10);
        assumptionModification.setOpaque(false);

        assumptionLocation.setText("Location Scores");
        assumptionLocation.setIconTextGap(10);
        assumptionLocation.setOpaque(false);

        assumptionFile.setText("Spectrum File");
        assumptionFile.setIconTextGap(10);
        assumptionFile.setOpaque(false);

        assumptionTitle.setSelected(true);
        assumptionTitle.setText("Spectrum Title");
        assumptionTitle.setIconTextGap(10);
        assumptionTitle.setOpaque(false);

        assumptionPrecursor.setText("Precursor Details");
        assumptionPrecursor.setIconTextGap(10);
        assumptionPrecursor.setOpaque(false);

        assumptionScores.setSelected(true);
        assumptionScores.setText("Search Engine Scores");
        assumptionScores.setIconTextGap(10);
        assumptionScores.setOpaque(false);

        assumptionConfidence.setSelected(true);
        assumptionConfidence.setText("Confidence");
        assumptionConfidence.setIconTextGap(10);
        assumptionConfidence.setOpaque(false);

        assumptionsExportAll.setText("Select All");
        assumptionsExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionsExportAllActionPerformed(evt);
            }
        });

        assumptionUnselectAll.setText("Deselect All");
        assumptionUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionUnselectAllActionPerformed(evt);
            }
        });

        assumptionExportAll.setText("Export All");
        assumptionExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionExportAllActionPerformed(evt);
            }
        });

        assumptionsExportValidated.setText("Export Validated");
        assumptionsExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionsExportValidatedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchEnginePanelLayout = new javax.swing.GroupLayout(searchEnginePanel);
        searchEnginePanel.setLayout(searchEnginePanelLayout);
        searchEnginePanelLayout.setHorizontalGroup(
            searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchEnginePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchEnginePanelLayout.createSequentialGroup()
                        .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionAccession, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(assumptionSequence, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionModification, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(assumptionLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(assumptionFile, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(assumptionPrecursor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(assumptionScores, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(searchEnginePanelLayout.createSequentialGroup()
                        .addComponent(assumptionsExportAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumptionUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 264, Short.MAX_VALUE)
                        .addComponent(assumptionsExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumptionExportAll)))
                .addContainerGap())
        );

        searchEnginePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {assumptionAccession, assumptionConfidence, assumptionFile, assumptionLocation, assumptionModification, assumptionPrecursor, assumptionSequence, assumptionTitle});

        searchEnginePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {assumptionExportAll, assumptionsExportValidated});

        searchEnginePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {assumptionUnselectAll, assumptionsExportAll});

        searchEnginePanelLayout.setVerticalGroup(
            searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchEnginePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumptionAccession)
                    .addComponent(assumptionModification)
                    .addComponent(assumptionFile)
                    .addComponent(assumptionScores))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumptionConfidence)
                    .addComponent(assumptionSequence)
                    .addComponent(assumptionLocation)
                    .addComponent(assumptionTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assumptionPrecursor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumptionsExportAll)
                    .addComponent(assumptionUnselectAll)
                    .addComponent(assumptionExportAll)
                    .addComponent(assumptionsExportValidated))
                .addContainerGap())
        );

        searchEnginePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {assumptionAccession, assumptionConfidence, assumptionFile, assumptionLocation, assumptionModification, assumptionPrecursor, assumptionScores, assumptionSequence, assumptionTitle});

        tabbedPane.addTab("Search Engine Results", searchEnginePanel);

        javax.swing.GroupLayout featuresPanelLayout = new javax.swing.GroupLayout(featuresPanel);
        featuresPanel.setLayout(featuresPanelLayout);
        featuresPanelLayout.setHorizontalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                .addContainerGap())
        );
        featuresPanelLayout.setVerticalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        helpJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.GIF"))); // NOI18N
        helpJButton.setToolTipText("Help");
        helpJButton.setBorder(null);
        helpJButton.setBorderPainted(false);
        helpJButton.setContentAreaFilled(false);
        helpJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                helpJButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                helpJButtonMouseExited(evt);
            }
        });
        helpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(featuresPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(projectPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(helpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 645, Short.MAX_VALUE)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(featuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(helpJButton)
                    .addComponent(exitButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Export the protein features to file.
     * 
     * @param evt 
     */
    private void proteinExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinExportAllActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getProteinsOutput(progressDialog, null, false, false, proteinAccession.isSelected(), proteinPI.isSelected(),
                                proteinDescription.isSelected(), proteinNPeptides.isSelected(), proteinEmpai.isSelected(), proteinSequenceCoverage.isSelected(), proteinNSpectra.isSelected(),
                                proteinNsaf.isSelected(), proteinScore.isSelected(), proteinConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_proteinExportAllActionPerformed

    /**
     * Select all protein features.
     * 
     * @param evt 
     */
    private void proteinSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinSelectAllActionPerformed
        proteinAccession.setSelected(true);
        proteinPI.setSelected(true);
        proteinDescription.setSelected(true);
        proteinNPeptides.setSelected(true);
        proteinEmpai.setSelected(true);
        proteinNSpectra.setSelected(true);
        proteinNsaf.setSelected(true);
        proteinScore.setSelected(true);
        proteinConfidence.setSelected(true);
        proteinSequenceCoverage.setSelected(true);
    }//GEN-LAST:event_proteinSelectAllActionPerformed

    /**
     * Deselect all protein features.
     * 
     * @param evt 
     */
    private void proteinUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinUnselectAllActionPerformed
        proteinAccession.setSelected(false);
        proteinPI.setSelected(false);
        proteinDescription.setSelected(false);
        proteinNPeptides.setSelected(false);
        proteinEmpai.setSelected(false);
        proteinNSpectra.setSelected(false);
        proteinNsaf.setSelected(false);
        proteinScore.setSelected(false);
        proteinConfidence.setSelected(false);
        proteinSequenceCoverage.setSelected(false);
    }//GEN-LAST:event_proteinUnselectAllActionPerformed

    /**
     * Select all peptide features.
     * 
     * @param evt 
     */
    private void peptideSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideSelectAllActionPerformed
        peptideAccession.setSelected(true);
        peptideSequence.setSelected(true);
        peptideModification.setSelected(true);
        peptideLocation.setSelected(true);
        peptideNSpectra.setSelected(true);
        peptideScore.setSelected(true);
        peptideConfidence.setSelected(true);
        peptideLocation.setSelected(true);
        peptidePosition.setSelected(true);
    }//GEN-LAST:event_peptideSelectAllActionPerformed

    /**
     * Deselect all peptide features.
     * 
     * @param evt 
     */
    private void peptideUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideUnselectAllActionPerformed
        peptideAccession.setSelected(false);
        peptideSequence.setSelected(false);
        peptideModification.setSelected(false);
        peptideLocation.setSelected(false);
        peptideNSpectra.setSelected(false);
        peptideScore.setSelected(false);
        peptideConfidence.setSelected(false);
        peptideLocation.setSelected(false);
        peptidePosition.setSelected(false);
    }//GEN-LAST:event_peptideUnselectAllActionPerformed

    /**
     * Select all psm features.
     * 
     * @param evt 
     */
    private void psmSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmSelectAllActionPerformed
        psmAccession.setSelected(true);
        psmSequence.setSelected(true);
        psmModification.setSelected(true);
        psmLocation.setSelected(true);
        psmFile.setSelected(true);
        psmTitle.setSelected(true);
        psmPrecursor.setSelected(true);
        psmScore.setSelected(true);
        psmConfidence.setSelected(true);
    }//GEN-LAST:event_psmSelectAllActionPerformed

    /**
     * Deselect all psm features.
     * 
     * @param evt 
     */
    private void psmUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmUnselectAllActionPerformed
        psmAccession.setSelected(false);
        psmSequence.setSelected(false);
        psmModification.setSelected(false);
        psmLocation.setSelected(false);
        psmFile.setSelected(false);
        psmTitle.setSelected(false);
        psmPrecursor.setSelected(false);
        psmScore.setSelected(false);
        psmConfidence.setSelected(false);
    }//GEN-LAST:event_psmUnselectAllActionPerformed

    /**
     * Select all search engine features.
     * 
     * @param evt 
     */
    private void assumptionsExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionsExportAllActionPerformed
        assumptionAccession.setSelected(true);
        assumptionSequence.setSelected(true);
        assumptionModification.setSelected(true);
        assumptionLocation.setSelected(true);
        assumptionFile.setSelected(true);
        assumptionTitle.setSelected(true);
        assumptionPrecursor.setSelected(true);
        assumptionScores.setSelected(true);
        assumptionConfidence.setSelected(true);
    }//GEN-LAST:event_assumptionsExportAllActionPerformed

    /**
     * Deselect all search engine features.
     * 
     * @param evt 
     */
    private void assumptionUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionUnselectAllActionPerformed
        assumptionAccession.setSelected(false);
        assumptionSequence.setSelected(false);
        assumptionModification.setSelected(false);
        assumptionLocation.setSelected(false);
        assumptionFile.setSelected(false);
        assumptionTitle.setSelected(false);
        assumptionPrecursor.setSelected(false);
        assumptionScores.setSelected(false);
        assumptionConfidence.setSelected(false);
    }//GEN-LAST:event_assumptionUnselectAllActionPerformed

    /**
     * Export the validated protein features to file.
     * 
     * @param evt 
     */
    private void proteinExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinExportValidatedActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getProteinsOutput(progressDialog, null, false, true, proteinAccession.isSelected(), proteinPI.isSelected(),
                                proteinDescription.isSelected(), proteinNPeptides.isSelected(), proteinSequenceCoverage.isSelected(), proteinEmpai.isSelected(), proteinNSpectra.isSelected(),
                                proteinNsaf.isSelected(), proteinScore.isSelected(), proteinConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_proteinExportValidatedActionPerformed

    /**
     * Export the validated peptide features to file.
     * 
     * @param evt 
     */
    private void peptideExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideExportValidatedActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getPeptidesOutput(progressDialog, null, false, true, peptideAccession.isSelected(), peptidePosition.isSelected(), peptideSequence.isSelected(),
                                peptideModification.isSelected(), peptideLocation.isSelected(), peptideNSpectra.isSelected(), peptideScore.isSelected(),
                                peptideConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_peptideExportValidatedActionPerformed

    /**
     * Export all peptide features to file.
     * 
     * @param evt 
     */
    private void peptideExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideExportAllActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getPeptidesOutput(progressDialog, null, false, false, peptideAccession.isSelected(), peptidePosition.isSelected(), peptideSequence.isSelected(),
                                peptideModification.isSelected(), peptideLocation.isSelected(), peptideNSpectra.isSelected(),
                                peptideScore.isSelected(), peptideConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_peptideExportAllActionPerformed

    /**
     * Export the validated psm features to file.
     * 
     * @param evt 
     */
    private void psmExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmExportValidatedActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getPSMsOutput(progressDialog, null, false, true, psmAccession.isSelected(), psmSequence.isSelected(),
                                psmModification.isSelected(), psmLocation.isSelected(), psmFile.isSelected(), psmTitle.isSelected(),
                                psmPrecursor.isSelected(), psmScore.isSelected(), psmConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_psmExportValidatedActionPerformed

    /**
     * Export all psm features to file.
     * 
     * @param evt 
     */
    private void psmExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmExportAllActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getPSMsOutput(progressDialog, null, false, false, psmAccession.isSelected(), psmSequence.isSelected(),
                                psmModification.isSelected(), psmLocation.isSelected(), psmFile.isSelected(), psmTitle.isSelected(),
                                psmPrecursor.isSelected(), psmScore.isSelected(), psmConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_psmExportAllActionPerformed

    /**
     * Export all search engine features to file.
     * 
     * @param evt 
     */
    private void assumptionExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionExportAllActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getAssumptionsOutput(progressDialog, null, false, assumptionAccession.isSelected(), assumptionSequence.isSelected(),
                                assumptionModification.isSelected(), assumptionLocation.isSelected(), assumptionFile.isSelected(), assumptionTitle.isSelected(),
                                assumptionPrecursor.isSelected(), assumptionScores.isSelected(), assumptionConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_assumptionExportAllActionPerformed

    /**
     * Export all features to file.
     * 
     * @param evt 
     */
    private void exportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAllActionPerformed

        final JFileChooser fileChooser = new JFileChooser(peptideShakerGUI.getLastSelectedFolder());
        fileChooser.setDialogTitle("Select Result Folder");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(File myFile) {
                return myFile.isDirectory();
            }

            @Override
            public String getDescription() {
                return "(Tab separated text file) *.txt";
            }
        };

        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {

            peptideShakerGUI.setLastSelectedFolder(fileChooser.getSelectedFile().getAbsolutePath());

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Exporting. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("SaveThread") {

                @Override
                public void run() {

                    CsvExporter exporter = new CsvExporter(peptideShakerGUI.getExperiment(), peptideShakerGUI.getSample(),
                            peptideShakerGUI.getReplicateNumber(), peptideShakerGUI.getSearchParameters().getEnzyme());
                    boolean exported = exporter.exportResults(progressDialog, fileChooser.getSelectedFile());

                    if (exported) {
                        JOptionPane.showMessageDialog(tempRef, "Identification results saved to folder \'" + fileChooser.getSelectedFile().getName() + "\'.",
                                "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(tempRef, "An error occured during saving. See conf/PeptideShaker.log for details.", "Save Error", JOptionPane.ERROR_MESSAGE);
                    }

                    progressDialog.setVisible(false);
                    progressDialog.dispose();
                }
            }.start();
        }
    }//GEN-LAST:event_exportAllActionPerformed

    /**
     * Export the validated search engine features to file.
     * 
     * @param evt 
     */
    private void assumptionsExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionsExportValidatedActionPerformed

        final File saveFile = getSaveFile();

        if (saveFile != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Getting Features. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("ExportThread") {

                @Override
                public void run() {
                    try {
                        feature = outputGenerator.getAssumptionsOutput(progressDialog, null, true, assumptionAccession.isSelected(),
                                assumptionSequence.isSelected(), assumptionModification.isSelected(), assumptionLocation.isSelected(),
                                assumptionFile.isSelected(), assumptionTitle.isSelected(), assumptionPrecursor.isSelected(),
                                assumptionScores.isSelected(), assumptionConfidence.isSelected(), true);

                        progressDialog.setIndeterminate(true);
                        progressDialog.setTitle("Saving File. Please Wait...");

                        FileWriter f = new FileWriter(saveFile);
                        BufferedWriter b = new BufferedWriter(f);
                        b.write(feature);
                        b.close();
                        f.close();

                        progressDialog.setVisible(false);
                        progressDialog.dispose();

                        JOptionPane.showMessageDialog(tempRef, "Features saved to \'" + saveFile.getName() + "\'.", "Save Complete", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(tempRef, "An error occured when saving the file.", "Saving Failed", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                    }

                    if (progressDialog != null) {
                        progressDialog.setVisible(false);
                        progressDialog.dispose();
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_assumptionsExportValidatedActionPerformed

    /**
     * Close the dialog.
     * 
     * @param evt 
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Open the help dialog.
     * 
     * @param evt 
     */
    private void helpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpJButtonActionPerformed
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new HelpWindow(peptideShakerGUI, getClass().getResource("/helpFiles/FeatureExport.html"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_helpJButtonActionPerformed

    /**
     * Change the cursor back to a hand icon.
     * 
     * @param evt 
     */
    private void helpJButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpJButtonMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_helpJButtonMouseEntered

    /**
     * Change the cursor back to the default icon.
     * 
     * @param evt 
     */
    private void helpJButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpJButtonMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_helpJButtonMouseExited
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox assumptionAccession;
    private javax.swing.JCheckBox assumptionConfidence;
    private javax.swing.JButton assumptionExportAll;
    private javax.swing.JCheckBox assumptionFile;
    private javax.swing.JCheckBox assumptionLocation;
    private javax.swing.JCheckBox assumptionModification;
    private javax.swing.JCheckBox assumptionPrecursor;
    private javax.swing.JCheckBox assumptionScores;
    private javax.swing.JCheckBox assumptionSequence;
    private javax.swing.JCheckBox assumptionTitle;
    private javax.swing.JButton assumptionUnselectAll;
    private javax.swing.JButton assumptionsExportAll;
    private javax.swing.JButton assumptionsExportValidated;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exportAll;
    private javax.swing.JLabel exportTextFilesLabel;
    private javax.swing.JPanel featuresPanel;
    private javax.swing.JButton helpJButton;
    private javax.swing.JCheckBox peptideAccession;
    private javax.swing.JCheckBox peptideConfidence;
    private javax.swing.JButton peptideExportAll;
    private javax.swing.JButton peptideExportValidated;
    private javax.swing.JCheckBox peptideLocation;
    private javax.swing.JCheckBox peptideModification;
    private javax.swing.JCheckBox peptideNSpectra;
    private javax.swing.JCheckBox peptidePosition;
    private javax.swing.JCheckBox peptideScore;
    private javax.swing.JButton peptideSelectAll;
    private javax.swing.JCheckBox peptideSequence;
    private javax.swing.JButton peptideUnselectAll;
    private javax.swing.JPanel peptidesPanel;
    private javax.swing.JPanel projectPanel;
    private javax.swing.JCheckBox proteinAccession;
    private javax.swing.JCheckBox proteinConfidence;
    private javax.swing.JCheckBox proteinDescription;
    private javax.swing.JCheckBox proteinEmpai;
    private javax.swing.JButton proteinExportAll;
    private javax.swing.JButton proteinExportValidated;
    private javax.swing.JCheckBox proteinNPeptides;
    private javax.swing.JCheckBox proteinNSpectra;
    private javax.swing.JCheckBox proteinNsaf;
    private javax.swing.JCheckBox proteinPI;
    private javax.swing.JCheckBox proteinScore;
    private javax.swing.JButton proteinSelectAll;
    private javax.swing.JCheckBox proteinSequenceCoverage;
    private javax.swing.JButton proteinUnselectAll;
    private javax.swing.JPanel proteinsPanel;
    private javax.swing.JCheckBox psmAccession;
    private javax.swing.JCheckBox psmConfidence;
    private javax.swing.JButton psmExportAll;
    private javax.swing.JButton psmExportValidated;
    private javax.swing.JCheckBox psmFile;
    private javax.swing.JCheckBox psmLocation;
    private javax.swing.JCheckBox psmModification;
    private javax.swing.JPanel psmPanel;
    private javax.swing.JCheckBox psmPrecursor;
    private javax.swing.JCheckBox psmScore;
    private javax.swing.JButton psmSelectAll;
    private javax.swing.JCheckBox psmSequence;
    private javax.swing.JCheckBox psmTitle;
    private javax.swing.JButton psmUnselectAll;
    private javax.swing.JPanel searchEnginePanel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Opens a file chooser where the user can select the file to save the 
     * features to. Returns the file to save to.
     * 
     * @return the file to save to, or null of save as aborted
     */
    private File getSaveFile() {

        final JFileChooser fileChooser = new JFileChooser(peptideShakerGUI.getLastSelectedFolder());
        fileChooser.setDialogTitle("Save As...");
        fileChooser.setMultiSelectionEnabled(false);

        FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(File myFile) {
                return myFile.getName().toLowerCase().endsWith("txt") || myFile.isDirectory();
            }

            @Override
            public String getDescription() {
                return "(Tab separated text file) *.txt";
            }
        };

        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            peptideShakerGUI.setLastSelectedFolder(fileChooser.getSelectedFile().getAbsolutePath());

            String filePath = fileChooser.getSelectedFile().getAbsolutePath();

            if (!filePath.endsWith(".txt")) {
                filePath = filePath + ".txt";
            }

            return new File(filePath);
        } else {
            return null;
        }
    }
}
