/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExportPreferencesDialog.java
 *
 * Created on Aug 4, 2011, 4:29:25 PM
 */
package eu.isas.peptideshaker.gui.preferencesdialogs;

import com.compomics.util.gui.dialogs.ProgressDialogX;
import eu.isas.peptideshaker.export.CsvExporter;
import eu.isas.peptideshaker.export.FeaturesGenerator;
import eu.isas.peptideshaker.gui.ExportFeatureDialog;
import eu.isas.peptideshaker.gui.PeptideShakerGUI;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author vaudel
 */
public class FeaturesPreferencesDialog extends javax.swing.JDialog {

    /**
     * Peptide-Shaker main GUI
     */
    private PeptideShakerGUI peptideShakerGUI;
    /**
     * The output generator will generate the output based on the user's choice
     */
    private FeaturesGenerator outputGenerator;
    /**
     * A simple progress dialog.
     */
    private static ProgressDialogX progressDialog;
    /**
     * The current feature
     */
    private String feature;

    /** 
     * Creates a new ExportPreferencesDialog.
     * 
     * @param peptideShakerGUI the PeptideShaker GUI parent
     */
    public FeaturesPreferencesDialog(PeptideShakerGUI peptideShakerGUI) {
        super(peptideShakerGUI, true);
        this.peptideShakerGUI = peptideShakerGUI;
        initComponents();
        this.outputGenerator = new FeaturesGenerator(peptideShakerGUI);
        this.pack();
        this.setLocationRelativeTo(peptideShakerGUI);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        exportAll = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        proteinAccession = new javax.swing.JCheckBox();
        proteinPI = new javax.swing.JCheckBox();
        proteinNPeptides = new javax.swing.JCheckBox();
        proteinNSpectra = new javax.swing.JCheckBox();
        proteinDescription = new javax.swing.JCheckBox();
        proteinEmpai = new javax.swing.JCheckBox();
        proteinNsaf = new javax.swing.JCheckBox();
        proteinScore = new javax.swing.JCheckBox();
        proteinConfidence = new javax.swing.JCheckBox();
        proteinExportAll = new javax.swing.JButton();
        proteinSelectAll = new javax.swing.JButton();
        proteinUnselectAll = new javax.swing.JButton();
        proteinExportValidated = new javax.swing.JButton();
        proteinExportDisplayed = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        peptideAccession = new javax.swing.JCheckBox();
        peptideSequence = new javax.swing.JCheckBox();
        peptideModification = new javax.swing.JCheckBox();
        peptideNSpectra = new javax.swing.JCheckBox();
        peptideScore = new javax.swing.JCheckBox();
        peptideConfidence = new javax.swing.JCheckBox();
        peptideLocation = new javax.swing.JCheckBox();
        peptideSelectAll = new javax.swing.JButton();
        peptideUnselectAll = new javax.swing.JButton();
        peptideExportAll = new javax.swing.JButton();
        peptideExportValidated = new javax.swing.JButton();
        peptideExportDisplayed = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        psmAccession = new javax.swing.JCheckBox();
        psmSequence = new javax.swing.JCheckBox();
        psmFile = new javax.swing.JCheckBox();
        psmTitle = new javax.swing.JCheckBox();
        psmPrecursor = new javax.swing.JCheckBox();
        psmLocation = new javax.swing.JCheckBox();
        psmModification = new javax.swing.JCheckBox();
        psmScore = new javax.swing.JCheckBox();
        psmConfidence = new javax.swing.JCheckBox();
        psmSelectAll = new javax.swing.JButton();
        psmUnselectAll = new javax.swing.JButton();
        psmExportAll = new javax.swing.JButton();
        psmExportValidated = new javax.swing.JButton();
        psmExportDisplayed = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        assumptionAccession = new javax.swing.JCheckBox();
        assumptionSequence = new javax.swing.JCheckBox();
        assumptionModification = new javax.swing.JCheckBox();
        assumptionLocation = new javax.swing.JCheckBox();
        assumptionFile = new javax.swing.JCheckBox();
        assumptionTitle = new javax.swing.JCheckBox();
        assumptionPrecursor = new javax.swing.JCheckBox();
        assumptionScores = new javax.swing.JCheckBox();
        assumptionConfidence = new javax.swing.JCheckBox();
        assumptionsExportAll = new javax.swing.JButton();
        assumptionUnselectAll = new javax.swing.JButton();
        assumptionExportAll = new javax.swing.JButton();
        assumptionsExportDisplayed = new javax.swing.JButton();
        assumptionsExportValidated = new javax.swing.JButton();

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Project"));

        jLabel1.setText("Export all identification results:");

        exportAll.setText("Export as text files");
        exportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 458, Short.MAX_VALUE)
                .addComponent(exportAll)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(exportAll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        proteinAccession.setSelected(true);
        proteinAccession.setText("Accession");

        proteinPI.setText("Protein inference details");

        proteinNPeptides.setText("# validated peptides");

        proteinNSpectra.setText("# validated spectra");

        proteinDescription.setText("Protein description");

        proteinEmpai.setText("emPAI");

        proteinNsaf.setText("NSAF");

        proteinScore.setText("Score");

        proteinConfidence.setText("Confidence");

        proteinExportAll.setText("Export All");
        proteinExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinExportAllActionPerformed(evt);
            }
        });

        proteinSelectAll.setText("Select all");
        proteinSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinSelectAllActionPerformed(evt);
            }
        });

        proteinUnselectAll.setText("Unselect all");
        proteinUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinUnselectAllActionPerformed(evt);
            }
        });

        proteinExportValidated.setText("Export Validated");
        proteinExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinExportValidatedActionPerformed(evt);
            }
        });

        proteinExportDisplayed.setText("Export Displayed");
        proteinExportDisplayed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinExportDisplayedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinAccession)
                            .addComponent(proteinPI)
                            .addComponent(proteinDescription))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinNPeptides)
                            .addComponent(proteinEmpai))
                        .addGap(83, 83, 83)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinNSpectra)
                            .addComponent(proteinNsaf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proteinScore)
                            .addComponent(proteinConfidence))
                        .addContainerGap(63, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(proteinSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proteinUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                        .addComponent(proteinExportDisplayed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proteinExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proteinExportAll)
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinAccession)
                    .addComponent(proteinNPeptides)
                    .addComponent(proteinNSpectra)
                    .addComponent(proteinScore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinPI)
                    .addComponent(proteinConfidence)
                    .addComponent(proteinEmpai)
                    .addComponent(proteinNsaf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(proteinDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinSelectAll)
                    .addComponent(proteinUnselectAll)
                    .addComponent(proteinExportAll)
                    .addComponent(proteinExportValidated)
                    .addComponent(proteinExportDisplayed))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Proteins", jPanel5);

        peptideAccession.setSelected(true);
        peptideAccession.setText("Protein accession");

        peptideSequence.setSelected(true);
        peptideSequence.setText("Peptide Sequence");

        peptideModification.setText("Modification status");

        peptideNSpectra.setText("# validated spectra");

        peptideScore.setText("Score");

        peptideConfidence.setSelected(true);
        peptideConfidence.setText("Confidence");

        peptideLocation.setText("Location scores");

        peptideSelectAll.setText("Select all");
        peptideSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideSelectAllActionPerformed(evt);
            }
        });

        peptideUnselectAll.setText("Unselect all");
        peptideUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideUnselectAllActionPerformed(evt);
            }
        });

        peptideExportAll.setText("Export All");
        peptideExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideExportAllActionPerformed(evt);
            }
        });

        peptideExportValidated.setText("Export Validated");
        peptideExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideExportValidatedActionPerformed(evt);
            }
        });

        peptideExportDisplayed.setText("Export Displayed");
        peptideExportDisplayed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideExportDisplayedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(peptideAccession)
                            .addComponent(peptideSequence))
                        .addGap(77, 77, 77)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(peptideModification)
                                .addGap(136, 136, 136)
                                .addComponent(peptideNSpectra))
                            .addComponent(peptideLocation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(peptideScore)
                            .addComponent(peptideConfidence))
                        .addContainerGap(39, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(peptideSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peptideUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                        .addComponent(peptideExportDisplayed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peptideExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(peptideExportAll)
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peptideAccession)
                    .addComponent(peptideNSpectra)
                    .addComponent(peptideScore)
                    .addComponent(peptideModification))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peptideConfidence)
                    .addComponent(peptideSequence)
                    .addComponent(peptideLocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peptideSelectAll)
                    .addComponent(peptideUnselectAll)
                    .addComponent(peptideExportAll)
                    .addComponent(peptideExportValidated)
                    .addComponent(peptideExportDisplayed))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Peptides", jPanel6);

        psmAccession.setSelected(true);
        psmAccession.setText("Protein accession");

        psmSequence.setSelected(true);
        psmSequence.setText("Peptide Sequence");

        psmFile.setText("Spectrum File");

        psmTitle.setSelected(true);
        psmTitle.setText("Spectrum Title");

        psmPrecursor.setText("Precursor details");

        psmLocation.setText("Location Scores");

        psmModification.setText("Modification status");

        psmScore.setText("Score");

        psmConfidence.setSelected(true);
        psmConfidence.setText("Confidence");

        psmSelectAll.setText("Select all");
        psmSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmSelectAllActionPerformed(evt);
            }
        });

        psmUnselectAll.setText("Unselect all");
        psmUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmUnselectAllActionPerformed(evt);
            }
        });

        psmExportAll.setText("Export All");
        psmExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmExportAllActionPerformed(evt);
            }
        });

        psmExportValidated.setText("Export Validated");
        psmExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmExportValidatedActionPerformed(evt);
            }
        });

        psmExportDisplayed.setText("Export Displayed");
        psmExportDisplayed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmExportDisplayedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(psmSelectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psmUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                        .addComponent(psmExportDisplayed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psmExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psmExportAll)
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmAccession)
                            .addComponent(psmSequence))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmModification)
                            .addComponent(psmLocation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmFile)
                            .addComponent(psmTitle)
                            .addComponent(psmPrecursor))
                        .addGap(101, 101, 101)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmScore)
                            .addComponent(psmConfidence))
                        .addGap(65, 65, 65))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(psmFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psmTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(psmPrecursor))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(psmAccession)
                                    .addComponent(psmModification))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(psmSequence)
                                    .addComponent(psmLocation)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(psmScore)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(psmConfidence)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(psmSelectAll)
                            .addComponent(psmUnselectAll)
                            .addComponent(psmExportAll)
                            .addComponent(psmExportValidated)
                            .addComponent(psmExportDisplayed))))
                .addContainerGap())
        );

        jTabbedPane2.addTab("PSMs", jPanel7);

        assumptionAccession.setSelected(true);
        assumptionAccession.setText("Accession");

        assumptionSequence.setSelected(true);
        assumptionSequence.setText("Peptide Sequence");

        assumptionModification.setText("Modification status");

        assumptionLocation.setText("Location Scores");

        assumptionFile.setText("Spectrum File");

        assumptionTitle.setSelected(true);
        assumptionTitle.setText("Spectrum Title");

        assumptionPrecursor.setText("Precursor Details");

        assumptionScores.setSelected(true);
        assumptionScores.setText("Search engine scores");

        assumptionConfidence.setSelected(true);
        assumptionConfidence.setText("Confidence");

        assumptionsExportAll.setText("Select all");
        assumptionsExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionsExportAllActionPerformed(evt);
            }
        });

        assumptionUnselectAll.setText("Unselect all");
        assumptionUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionUnselectAllActionPerformed(evt);
            }
        });

        assumptionExportAll.setText("Export All");
        assumptionExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionExportAllActionPerformed(evt);
            }
        });

        assumptionsExportDisplayed.setText("Export Displayed");
        assumptionsExportDisplayed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionsExportDisplayedActionPerformed(evt);
            }
        });

        assumptionsExportValidated.setText("Export Validated");
        assumptionsExportValidated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumptionsExportValidatedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionAccession)
                            .addComponent(assumptionSequence))
                        .addGap(73, 73, 73)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionModification)
                            .addComponent(assumptionLocation))
                        .addGap(89, 89, 89)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionFile)
                            .addComponent(assumptionPrecursor)
                            .addComponent(assumptionTitle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumptionScores)
                            .addComponent(assumptionConfidence))
                        .addContainerGap(13, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(assumptionsExportAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumptionUnselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                        .addComponent(assumptionsExportDisplayed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumptionsExportValidated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumptionExportAll)
                        .addContainerGap())))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumptionAccession)
                    .addComponent(assumptionFile)
                    .addComponent(assumptionScores)
                    .addComponent(assumptionModification))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumptionTitle)
                    .addComponent(assumptionConfidence)
                    .addComponent(assumptionSequence)
                    .addComponent(assumptionLocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assumptionPrecursor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumptionsExportAll)
                    .addComponent(assumptionUnselectAll)
                    .addComponent(assumptionExportAll)
                    .addComponent(assumptionsExportValidated)
                    .addComponent(assumptionsExportDisplayed))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Search Engine Results", jPanel8);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitButton)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void proteinExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinExportAllActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getProteinsOutput(progressDialog, null, false, proteinAccession.isSelected(), proteinPI.isSelected(), proteinDescription.isSelected(), proteinNPeptides.isSelected(), proteinEmpai.isSelected(), proteinNSpectra.isSelected(), proteinNsaf.isSelected(), proteinScore.isSelected(), proteinConfidence.isSelected());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "All Proteins");
            }
        }.start();
    }//GEN-LAST:event_proteinExportAllActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void proteinSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinSelectAllActionPerformed
        proteinAccession.setSelected(true);
        proteinPI.setSelected(true);
        proteinDescription.setSelected(true);
        proteinNPeptides.setSelected(true);
        proteinEmpai.setSelected(true);
        proteinNSpectra.setSelected(true);
        proteinNsaf.setSelected(true);
        proteinScore.setSelected(true);
        proteinConfidence.setSelected(true);
    }//GEN-LAST:event_proteinSelectAllActionPerformed

    private void proteinUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinUnselectAllActionPerformed
        proteinAccession.setSelected(false);
        proteinPI.setSelected(false);
        proteinDescription.setSelected(false);
        proteinNPeptides.setSelected(false);
        proteinEmpai.setSelected(false);
        proteinNSpectra.setSelected(false);
        proteinNsaf.setSelected(false);
        proteinScore.setSelected(false);
        proteinConfidence.setSelected(false);
    }//GEN-LAST:event_proteinUnselectAllActionPerformed

    private void peptideSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideSelectAllActionPerformed
        peptideAccession.setSelected(true);
        peptideSequence.setSelected(true);
        peptideModification.setSelected(true);
        peptideLocation.setSelected(true);
        peptideNSpectra.setSelected(true);
        peptideScore.setSelected(true);
        peptideConfidence.setSelected(true);
    }//GEN-LAST:event_peptideSelectAllActionPerformed

    private void peptideUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideUnselectAllActionPerformed
        peptideAccession.setSelected(false);
        peptideSequence.setSelected(false);
        peptideModification.setSelected(false);
        peptideLocation.setSelected(false);
        peptideNSpectra.setSelected(false);
        peptideScore.setSelected(false);
        peptideConfidence.setSelected(false);
    }//GEN-LAST:event_peptideUnselectAllActionPerformed

    private void psmSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmSelectAllActionPerformed
        psmAccession.setSelected(true);
        psmSequence.setSelected(true);
        psmModification.setSelected(true);
        psmLocation.setSelected(true);
        psmFile.setSelected(true);
        psmTitle.setSelected(true);
        psmPrecursor.setSelected(true);
        psmScore.setSelected(true);
        psmConfidence.setSelected(true);
    }//GEN-LAST:event_psmSelectAllActionPerformed

    private void psmUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmUnselectAllActionPerformed
        psmAccession.setSelected(false);
        psmSequence.setSelected(false);
        psmModification.setSelected(false);
        psmLocation.setSelected(false);
        psmFile.setSelected(false);
        psmTitle.setSelected(false);
        psmPrecursor.setSelected(false);
        psmScore.setSelected(false);
        psmConfidence.setSelected(false);
    }//GEN-LAST:event_psmUnselectAllActionPerformed

    private void assumptionsExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionsExportAllActionPerformed
        assumptionAccession.setSelected(true);
        assumptionSequence.setSelected(true);
        assumptionModification.setSelected(true);
        assumptionLocation.setSelected(true);
        assumptionFile.setSelected(true);
        assumptionTitle.setSelected(true);
        assumptionPrecursor.setSelected(true);
        assumptionScores.setSelected(true);
        assumptionConfidence.setSelected(true);
    }//GEN-LAST:event_assumptionsExportAllActionPerformed

    private void assumptionUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionUnselectAllActionPerformed
        assumptionAccession.setSelected(false);
        assumptionSequence.setSelected(false);
        assumptionModification.setSelected(false);
        assumptionLocation.setSelected(false);
        assumptionFile.setSelected(false);
        assumptionTitle.setSelected(false);
        assumptionPrecursor.setSelected(false);
        assumptionScores.setSelected(false);
        assumptionConfidence.setSelected(false);
    }//GEN-LAST:event_assumptionUnselectAllActionPerformed

    private void proteinExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinExportValidatedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getProteinsOutput(progressDialog, null, true, proteinAccession.isSelected(), proteinPI.isSelected(), proteinDescription.isSelected(), proteinNPeptides.isSelected(), proteinEmpai.isSelected(), proteinNSpectra.isSelected(), proteinNsaf.isSelected(), proteinScore.isSelected(), proteinConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Validated Proteins");
            }
        }.start();
    }//GEN-LAST:event_proteinExportValidatedActionPerformed

    private void peptideExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideExportValidatedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getPeptidesOutput(progressDialog, null, true, peptideAccession.isSelected(), peptideSequence.isSelected(), peptideModification.isSelected(), peptideLocation.isSelected(), peptideNSpectra.isSelected(), peptideScore.isSelected(), peptideConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Validated Peptides");
            }
        }.start();
    }//GEN-LAST:event_peptideExportValidatedActionPerformed

    private void peptideExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideExportAllActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getPeptidesOutput(progressDialog, null, false, peptideAccession.isSelected(), peptideSequence.isSelected(), peptideModification.isSelected(), peptideLocation.isSelected(), peptideNSpectra.isSelected(), peptideScore.isSelected(), peptideConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "All Peptides");
            }
        }.start();
    }//GEN-LAST:event_peptideExportAllActionPerformed

    private void psmExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmExportValidatedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getPSMsOutput(progressDialog, null, true, psmAccession.isSelected(), psmSequence.isSelected(), psmModification.isSelected(), psmLocation.isSelected(), psmFile.isSelected(), psmTitle.isSelected(), psmPrecursor.isSelected(), psmScore.isSelected(), psmConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Validated PSMs");
            }
        }.start();
    }//GEN-LAST:event_psmExportValidatedActionPerformed

    private void psmExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmExportAllActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getPSMsOutput(progressDialog, null, false, psmAccession.isSelected(), psmSequence.isSelected(), psmModification.isSelected(), psmLocation.isSelected(), psmFile.isSelected(), psmTitle.isSelected(), psmPrecursor.isSelected(), psmScore.isSelected(), psmConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "All PSMs");
            }
        }.start();
    }//GEN-LAST:event_psmExportAllActionPerformed

    private void assumptionExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionExportAllActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getAssumptionsOutput(progressDialog, null, false, assumptionAccession.isSelected(), assumptionSequence.isSelected(), assumptionModification.isSelected(), assumptionLocation.isSelected(), assumptionFile.isSelected(), assumptionTitle.isSelected(), assumptionPrecursor.isSelected(), assumptionScores.isSelected(), assumptionConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Search Engine Results");
            }
        }.start();
    }//GEN-LAST:event_assumptionExportAllActionPerformed

    private void exportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAllActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                final JFileChooser fileChooser = new JFileChooser(peptideShakerGUI.getLastSelectedFolder());
                fileChooser.setDialogTitle("Select Result Folder");
                fileChooser.setMultiSelectionEnabled(false);
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                FileFilter filter = new FileFilter() {

                    @Override
                    public boolean accept(File myFile) {
                        return myFile.isDirectory();
                    }

                    @Override
                    public String getDescription() {
                        return "(Tab separated text file) *.txt";
                    }
                };

                fileChooser.setFileFilter(filter);

                int returnVal = fileChooser.showSaveDialog(tempRef);

                if (returnVal == JFileChooser.APPROVE_OPTION) {

                    peptideShakerGUI.setLastSelectedFolder(fileChooser.getSelectedFile().getAbsolutePath());

                    CsvExporter exporter = new CsvExporter(peptideShakerGUI.getExperiment(), peptideShakerGUI.getSample(), peptideShakerGUI.getReplicateNumber(), peptideShakerGUI.getSearchParameters().getEnzyme());
                    exporter.exportResults(progressDialog, fileChooser.getSelectedFile());
                    JOptionPane.showMessageDialog(tempRef, "Identification results saved to " + fileChooser.getSelectedFile().getName() + ".", "Save Complete", JOptionPane.INFORMATION_MESSAGE);

                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
            }
        }.start();
    }//GEN-LAST:event_exportAllActionPerformed

    private void proteinExportDisplayedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinExportDisplayedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    ArrayList<String> selectedProteins = peptideShakerGUI.getDisplayedProteins();
                    feature = outputGenerator.getProteinsOutput(progressDialog, selectedProteins, true, proteinAccession.isSelected(), proteinPI.isSelected(), proteinDescription.isSelected(), proteinNPeptides.isSelected(), proteinEmpai.isSelected(), proteinNSpectra.isSelected(), proteinNsaf.isSelected(), proteinScore.isSelected(), proteinConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Validated Proteins");
            }
        }.start();
    }//GEN-LAST:event_proteinExportDisplayedActionPerformed

    private void peptideExportDisplayedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideExportDisplayedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    ArrayList<String> selectedPeptides = peptideShakerGUI.getDisplayedPeptides();
                    String feature = "";
                    feature = outputGenerator.getPeptidesOutput(progressDialog, selectedPeptides, true, peptideAccession.isSelected(), peptideSequence.isSelected(), peptideModification.isSelected(), peptideLocation.isSelected(), peptideNSpectra.isSelected(), peptideScore.isSelected(), peptideConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Validated Peptides");
            }
        }.start();
    }//GEN-LAST:event_peptideExportDisplayedActionPerformed

    private void psmExportDisplayedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmExportDisplayedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    ArrayList<String> selectedPsms = peptideShakerGUI.getDisplayedPSMs();
                    String feature = "";
                    feature = outputGenerator.getPSMsOutput(progressDialog, selectedPsms, false, psmAccession.isSelected(), psmSequence.isSelected(), psmModification.isSelected(), psmLocation.isSelected(), psmFile.isSelected(), psmTitle.isSelected(), psmPrecursor.isSelected(), psmScore.isSelected(), psmConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "All PSMs");
            }
        }.start();
    }//GEN-LAST:event_psmExportDisplayedActionPerformed

    private void assumptionsExportValidatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionsExportValidatedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    feature = outputGenerator.getAssumptionsOutput(progressDialog, null, true, assumptionAccession.isSelected(), assumptionSequence.isSelected(), assumptionModification.isSelected(), assumptionLocation.isSelected(), assumptionFile.isSelected(), assumptionTitle.isSelected(), assumptionPrecursor.isSelected(), assumptionScores.isSelected(), assumptionConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Search Engine Results");
            }
        }.start();
    }//GEN-LAST:event_assumptionsExportValidatedActionPerformed

    private void assumptionsExportDisplayedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumptionsExportDisplayedActionPerformed

        progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
        progressDialog.doNothingOnClose();

        final FeaturesPreferencesDialog tempRef = this; // needed due to threading issues

        new Thread(new Runnable() {

            public void run() {
                progressDialog.setIndeterminate(true);
                progressDialog.setTitle("Exporting. Please Wait...");
                progressDialog.setVisible(true);
            }
        }, "ProgressDialog").start();

        new Thread("SaveThread") {

            @Override
            public void run() {
                try {
                    ArrayList<String> psmKeys = peptideShakerGUI.getDisplayedAssumptions();
                    String feature = "";
                    feature = outputGenerator.getAssumptionsOutput(progressDialog, psmKeys, false, assumptionAccession.isSelected(), assumptionSequence.isSelected(), assumptionModification.isSelected(), assumptionLocation.isSelected(), assumptionFile.isSelected(), assumptionTitle.isSelected(), assumptionPrecursor.isSelected(), assumptionScores.isSelected(), assumptionConfidence.isSelected());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tempRef, "An error occurred while generating the output.", "Output error.", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    feature = "";
                }
                progressDialog.setVisible(false);
                progressDialog.dispose();
                new ExportFeatureDialog(peptideShakerGUI, true, feature, "Search Engine Results");
            }
        }.start();
    }//GEN-LAST:event_assumptionsExportDisplayedActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox assumptionAccession;
    private javax.swing.JCheckBox assumptionConfidence;
    private javax.swing.JButton assumptionExportAll;
    private javax.swing.JCheckBox assumptionFile;
    private javax.swing.JCheckBox assumptionLocation;
    private javax.swing.JCheckBox assumptionModification;
    private javax.swing.JCheckBox assumptionPrecursor;
    private javax.swing.JCheckBox assumptionScores;
    private javax.swing.JCheckBox assumptionSequence;
    private javax.swing.JCheckBox assumptionTitle;
    private javax.swing.JButton assumptionUnselectAll;
    private javax.swing.JButton assumptionsExportAll;
    private javax.swing.JButton assumptionsExportDisplayed;
    private javax.swing.JButton assumptionsExportValidated;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exportAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JCheckBox peptideAccession;
    private javax.swing.JCheckBox peptideConfidence;
    private javax.swing.JButton peptideExportAll;
    private javax.swing.JButton peptideExportDisplayed;
    private javax.swing.JButton peptideExportValidated;
    private javax.swing.JCheckBox peptideLocation;
    private javax.swing.JCheckBox peptideModification;
    private javax.swing.JCheckBox peptideNSpectra;
    private javax.swing.JCheckBox peptideScore;
    private javax.swing.JButton peptideSelectAll;
    private javax.swing.JCheckBox peptideSequence;
    private javax.swing.JButton peptideUnselectAll;
    private javax.swing.JCheckBox proteinAccession;
    private javax.swing.JCheckBox proteinConfidence;
    private javax.swing.JCheckBox proteinDescription;
    private javax.swing.JCheckBox proteinEmpai;
    private javax.swing.JButton proteinExportAll;
    private javax.swing.JButton proteinExportDisplayed;
    private javax.swing.JButton proteinExportValidated;
    private javax.swing.JCheckBox proteinNPeptides;
    private javax.swing.JCheckBox proteinNSpectra;
    private javax.swing.JCheckBox proteinNsaf;
    private javax.swing.JCheckBox proteinPI;
    private javax.swing.JCheckBox proteinScore;
    private javax.swing.JButton proteinSelectAll;
    private javax.swing.JButton proteinUnselectAll;
    private javax.swing.JCheckBox psmAccession;
    private javax.swing.JCheckBox psmConfidence;
    private javax.swing.JButton psmExportAll;
    private javax.swing.JButton psmExportDisplayed;
    private javax.swing.JButton psmExportValidated;
    private javax.swing.JCheckBox psmFile;
    private javax.swing.JCheckBox psmLocation;
    private javax.swing.JCheckBox psmModification;
    private javax.swing.JCheckBox psmPrecursor;
    private javax.swing.JCheckBox psmScore;
    private javax.swing.JButton psmSelectAll;
    private javax.swing.JCheckBox psmSequence;
    private javax.swing.JCheckBox psmTitle;
    private javax.swing.JButton psmUnselectAll;
    // End of variables declaration//GEN-END:variables
}
