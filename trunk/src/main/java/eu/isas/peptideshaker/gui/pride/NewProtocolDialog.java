package eu.isas.peptideshaker.gui.pride;

import com.compomics.util.Util;
import com.compomics.util.pride.CvTerm;
import com.compomics.util.pride.prideobjects.Protocol;
import java.awt.Color;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import no.uib.olsdialog.OLSDialog;
import no.uib.olsdialog.OLSInputable;

/**
 * A dialog for annotating protcols.
 * 
 * @author Harald Barsnes
 */
public class NewProtocolDialog extends javax.swing.JDialog implements OLSInputable {

    /**
     * The table column header tooltips.
     */
    private Vector columnToolTips;
    /**
     * The PRIDE Export Dialog.
     */
    private PrideExportDialog prideExportDialog;
    /**
     * The last valid input for contact name
     */
    private String lastNameInput = "";

    /**
     * Creates a new NewProtocolDialog.
     *
     * @param prideExportDialog
     * @param modal
     */
    public NewProtocolDialog(PrideExportDialog prideExportDialog, boolean modal) {
        super(prideExportDialog, modal);
        this.prideExportDialog = prideExportDialog;

        initComponents();
        setTitle("New Protocol");
        
        setUpTable();


        setLocationRelativeTo(prideExportDialog);
        setVisible(true);
    }

    /**
     * Creates a new NewProtocolDialog.
     *
     * @param prideExportDialog
     * @param modal
     * @param protcol  
     */
    public NewProtocolDialog(PrideExportDialog prideExportDialog, boolean modal, Protocol protcol) {
        super(prideExportDialog, modal);
        this.prideExportDialog = prideExportDialog;

        initComponents();
        setTitle("Edit Protocol");
        
        protocolNameJTextField.setText(protcol.getName());
        
        for (int i=0; i<protcol.getCvTerms().size(); i++) {
            ((DefaultTableModel) protocolCvTermsJTable.getModel()).addRow(new Object[] {
                (i+1),
                protcol.getCvTerms().get(i).getOntology(),
                protcol.getCvTerms().get(i).getAccession(),
                protcol.getCvTerms().get(i).getName(),
                protcol.getCvTerms().get(i).getValue()
            });
        }
        
        setUpTable();
        validateInput();

        setLocationRelativeTo(prideExportDialog);
        setVisible(true);
    }
    
    /**
     * Set up the table properties.
     */
    private void setUpTable() {
        protocolCvScrollPane.getViewport().setOpaque(false);
        protocolCvTermsJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        protocolCvTermsJTable.getTableHeader().setReorderingAllowed(false);
        protocolCvTermsJTable.getColumn(" ").setMaxWidth(40);
        protocolCvTermsJTable.getColumn(" ").setMinWidth(40);
        
        columnToolTips = new Vector();
        columnToolTips.add(null);
        columnToolTips.add(null);
        columnToolTips.add(null);
        columnToolTips.add(null);
        columnToolTips.add(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupJMenu = new javax.swing.JPopupMenu();
        editJMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        moveUpJMenuItem = new javax.swing.JMenuItem();
        moveDownJMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        deleteSelectedRowJMenuItem = new javax.swing.JMenuItem();
        protocolPanel = new javax.swing.JPanel();
        protocolCvScrollPane = new javax.swing.JScrollPane();
        protocolCvTermsJTable = new JTable() {
            protected JTableHeader createDefaultTableHeader() {
                return new JTableHeader(columnModel) {
                    public String getToolTipText(MouseEvent e) {
                        java.awt.Point p = e.getPoint();
                        int index = columnModel.getColumnIndexAtX(p.x);
                        int realIndex = columnModel.getColumn(index).getModelIndex();
                        String tip = (String) columnToolTips.get(realIndex);
                        return tip;
                    }
                };
            }
        };
        sampleDetailsJButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        protocolNameJTextField = new javax.swing.JTextField();
        protcolStepsLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();

        editJMenuItem.setMnemonic('E');
        editJMenuItem.setText("Edit");
        editJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(editJMenuItem);
        popupJMenu.add(jSeparator3);

        moveUpJMenuItem.setMnemonic('U');
        moveUpJMenuItem.setText("Move Up");
        moveUpJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(moveUpJMenuItem);

        moveDownJMenuItem.setMnemonic('D');
        moveDownJMenuItem.setText("Move Down");
        moveDownJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(moveDownJMenuItem);
        popupJMenu.add(jSeparator4);

        deleteSelectedRowJMenuItem.setText("Delete");
        deleteSelectedRowJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedRowJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(deleteSelectedRowJMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Protocol");

        protocolPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Protocol Details"));

        protocolCvTermsJTable.setFont(protocolCvTermsJTable.getFont());
        protocolCvTermsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " ", "Ontology", "Accession", "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        protocolCvTermsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                protocolCvTermsJTableMouseClicked(evt);
            }
        });
        protocolCvTermsJTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                protocolCvTermsJTableKeyReleased(evt);
            }
        });
        protocolCvScrollPane.setViewportView(protocolCvTermsJTable);

        sampleDetailsJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ols_transparent.GIF"))); // NOI18N
        sampleDetailsJButton.setText("Add Protcol Step");
        sampleDetailsJButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        sampleDetailsJButton.setPreferredSize(new java.awt.Dimension(159, 23));
        sampleDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleDetailsJButtonActionPerformed(evt);
            }
        });

        nameLabel.setForeground(new java.awt.Color(255, 0, 51));
        nameLabel.setText("Name*");

        protocolNameJTextField.setMargin(new java.awt.Insets(2, 4, 2, 2));
        protocolNameJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                protocolNameJTextFieldKeyReleased(evt);
            }
        });

        protcolStepsLabel.setForeground(new java.awt.Color(255, 0, 0));
        protcolStepsLabel.setText("Protocol Steps*");

        javax.swing.GroupLayout protocolPanelLayout = new javax.swing.GroupLayout(protocolPanel);
        protocolPanel.setLayout(protocolPanelLayout);
        protocolPanelLayout.setHorizontalGroup(
            protocolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(protocolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(protocolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(protocolCvScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addGroup(protocolPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(protocolNameJTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, protocolPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sampleDetailsJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(protocolPanelLayout.createSequentialGroup()
                        .addComponent(protcolStepsLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        protocolPanelLayout.setVerticalGroup(
            protocolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(protocolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(protocolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(protocolNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(protcolStepsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(protocolCvScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleDetailsJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        okButton.setText("OK");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(protocolPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(protocolPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Open the popup menu.
     * 
     * @param evt 
     */
    private void protocolCvTermsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_protocolCvTermsJTableMouseClicked
        if (evt.getButton() == 3) {

            int row = protocolCvTermsJTable.rowAtPoint(evt.getPoint());
            int column = protocolCvTermsJTable.columnAtPoint(evt.getPoint());

            protocolCvTermsJTable.changeSelection(row, column, false, false);

            this.moveUpJMenuItem.setEnabled(true);
            this.moveDownJMenuItem.setEnabled(true);

            if (row == protocolCvTermsJTable.getRowCount() - 1) {
                this.moveDownJMenuItem.setEnabled(false);
            }

            if (row == 0) {
                this.moveUpJMenuItem.setEnabled(false);
            }

            popupJMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        } else if (evt.getButton() == 1 && evt.getClickCount() == 2) {
            editJMenuItemActionPerformed(null);
        }
    }//GEN-LAST:event_protocolCvTermsJTableMouseClicked

    /**
     * Delete the selected row.
     * 
     * @param evt 
     */
    private void protocolCvTermsJTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_protocolCvTermsJTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            deleteSelectedRowJMenuItemActionPerformed(null);
        }
    }//GEN-LAST:event_protocolCvTermsJTableKeyReleased

    /**
     * Open the OLS Dialog.
     * 
     * @param evt 
     */
    private void sampleDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleDetailsJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new OLSDialog(prideExportDialog, this, true, "singleProtcol", "PRIDE", null);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_sampleDetailsJButtonActionPerformed

    /**
     * Edit the selected row using the OLS Dialog.
     * 
     * @param evt 
     */
    private void editJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJMenuItemActionPerformed
        int selectedRow = protocolCvTermsJTable.getSelectedRow();

        String searchTerm = (String) protocolCvTermsJTable.getValueAt(selectedRow, 3);
        String ontology = (String) protocolCvTermsJTable.getValueAt(selectedRow, 1);
        ontology = PrideExportDialog.getOntologyFromCvTerm(ontology);

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new OLSDialog(prideExportDialog, this, true, "singleProtocol", ontology, selectedRow, searchTerm);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_editJMenuItemActionPerformed

    /**
     * Move the current row up.
     * 
     * @param evt 
     */
    private void moveUpJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpJMenuItemActionPerformed
        int selectedRow = protocolCvTermsJTable.getSelectedRow();
        int selectedColumn = protocolCvTermsJTable.getSelectedColumn();

        Object[] tempRow = new Object[]{
            protocolCvTermsJTable.getValueAt(selectedRow - 1, 0),
            protocolCvTermsJTable.getValueAt(selectedRow - 1, 1),
            protocolCvTermsJTable.getValueAt(selectedRow - 1, 2)
        };

        ((DefaultTableModel) protocolCvTermsJTable.getModel()).removeRow(selectedRow - 1);
        ((DefaultTableModel) protocolCvTermsJTable.getModel()).insertRow(selectedRow, tempRow);

        protocolCvTermsJTable.changeSelection(selectedRow - 1, selectedColumn, false, false);

        fixTableIndices();
    }//GEN-LAST:event_moveUpJMenuItemActionPerformed

    /**
     * Move the current row down.
     * 
     * @param evt 
     */
    private void moveDownJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownJMenuItemActionPerformed
        int selectedRow = protocolCvTermsJTable.getSelectedRow();
        int selectedColumn = protocolCvTermsJTable.getSelectedColumn();

        Object[] tempRow = new Object[]{
            protocolCvTermsJTable.getValueAt(selectedRow + 1, 0),
            protocolCvTermsJTable.getValueAt(selectedRow + 1, 1),
            protocolCvTermsJTable.getValueAt(selectedRow + 1, 2)
        };

        ((DefaultTableModel) protocolCvTermsJTable.getModel()).removeRow(selectedRow + 1);
        ((DefaultTableModel) protocolCvTermsJTable.getModel()).insertRow(selectedRow, tempRow);

        protocolCvTermsJTable.changeSelection(selectedRow + 1, selectedColumn, false, false);

        fixTableIndices();
    }//GEN-LAST:event_moveDownJMenuItemActionPerformed

    /**
     * Delete the selected row.
     * 
     * @param evt 
     */
    private void deleteSelectedRowJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedRowJMenuItemActionPerformed

        int selectedRow = protocolCvTermsJTable.getSelectedRow();

        if (selectedRow != -1) {

            ((DefaultTableModel) protocolCvTermsJTable.getModel()).removeRow(selectedRow);
            fixTableIndices();
            validateInput();
        }
    }//GEN-LAST:event_deleteSelectedRowJMenuItemActionPerformed

    /**
     * Add the protocol to the export dialog and close.
     * 
     * @param evt 
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        ArrayList<CvTerm> cvTerms = new ArrayList<CvTerm>();
        
        for (int i=0; i<protocolCvTermsJTable.getRowCount(); i++) {
            cvTerms.add(new CvTerm(
                    (String) protocolCvTermsJTable.getValueAt(i, 1), 
                    (String) protocolCvTermsJTable.getValueAt(i, 2), 
                    (String) protocolCvTermsJTable.getValueAt(i, 3), 
                    (String) protocolCvTermsJTable.getValueAt(i, 4)));
        }
        
        prideExportDialog.setProtocol(new Protocol(protocolNameJTextField.getText(), cvTerms));
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Close without saving.
     * 
     * @param evt 
     */
    private void protocolNameJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_protocolNameJTextFieldKeyReleased
        validateInput();
    }//GEN-LAST:event_protocolNameJTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteSelectedRowJMenuItem;
    private javax.swing.JMenuItem editJMenuItem;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JMenuItem moveDownJMenuItem;
    private javax.swing.JMenuItem moveUpJMenuItem;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JPopupMenu popupJMenu;
    private javax.swing.JLabel protcolStepsLabel;
    private javax.swing.JScrollPane protocolCvScrollPane;
    private javax.swing.JTable protocolCvTermsJTable;
    private javax.swing.JTextField protocolNameJTextField;
    private javax.swing.JPanel protocolPanel;
    private javax.swing.JButton sampleDetailsJButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Fixes the indices so that they are in accending order starting from one.
     */
    private void fixTableIndices() {
        for (int row = 0; row < ((DefaultTableModel) protocolCvTermsJTable.getModel()).getRowCount(); row++) {
            ((DefaultTableModel) protocolCvTermsJTable.getModel()).setValueAt(new Integer(row + 1), row, 0);
        }
    }

    /**
     * Enables the OK button if a valid protocol set is selected.
     */
    private void validateInput() {
        
        String input = protocolNameJTextField.getText();
        for (String forbiddenCharacter : Util.forbiddenCharacters) {
            if (input.contains(forbiddenCharacter)) {
                JOptionPane.showMessageDialog(null, "'" + forbiddenCharacter + "' is not allowed in protocol name.",
                    "Forbidden character", JOptionPane.ERROR_MESSAGE);
                protocolNameJTextField.setText(lastNameInput);
                return;
            }
        }
        lastNameInput = input;
        
        if (protocolCvTermsJTable.getRowCount() > 0 && protocolNameJTextField.getText().length() > 0) {
            okButton.setEnabled(true);
        } else {
            okButton.setEnabled(false);
        }
        
        // highlight the fields that have not been filled
        if (protocolNameJTextField.getText().length() > 0) {
            nameLabel.setForeground(Color.BLACK);
        } else {
            nameLabel.setForeground(Color.RED);
        }
        
        if (protocolCvTermsJTable.getRowCount() > 0) {
            protcolStepsLabel.setForeground(Color.BLACK);
        } else {
            protcolStepsLabel.setForeground(Color.RED);
        }
    }

    @Override
    public void insertOLSResult(String field, String selectedValue, String accession, String ontologyShort, String ontologyLong, int modifiedRow, String mappedTerm, Map<String, String> metadata) {
        addProtocolDetails(selectedValue, accession, ontologyShort, modifiedRow);
    }

    @Override
    public Window getWindow() {
        return (Window) this;
    }

    /**
     * Add a protocol cv term to the table.
     *
     * @param name
     * @param accession
     * @param ontology
     * @param modifiedRow the row to modify, use -1 if adding a new row
     */
    public void addProtocolDetails(String name, String accession, String ontology, int modifiedRow) {
        addProtocolDetails(name, accession, ontology, null, modifiedRow);
    }

    /**
     * Add a protocol cv term to the table.
     *
     * @param name
     * @param accession
     * @param ontology
     * @param value
     * @param modifiedRow the row to modify, use -1 if adding a new row
     */
    public void addProtocolDetails(String name, String accession, String ontology, String value, int modifiedRow) {

        if (modifiedRow == -1) {

            ((DefaultTableModel) this.protocolCvTermsJTable.getModel()).addRow(
                    new Object[]{
                        new Integer(protocolCvTermsJTable.getRowCount() + 1),
                        ontology,
                        accession,
                        name,
                        value
                    });
        } else {
            protocolCvTermsJTable.setValueAt(ontology, modifiedRow, 1);
            protocolCvTermsJTable.setValueAt(accession, modifiedRow, 2);
            protocolCvTermsJTable.setValueAt(name, modifiedRow, 3);
            protocolCvTermsJTable.setValueAt(null, modifiedRow, 4);
        }

        validateInput();
    }
}