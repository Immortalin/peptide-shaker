package eu.isas.peptideshaker.gui.tabpanels;

import com.compomics.util.Util;
import com.compomics.util.experiment.biology.Enzyme;
import com.compomics.util.experiment.biology.Peptide;
import com.compomics.util.experiment.biology.Protein;
import com.compomics.util.experiment.identification.SequenceFactory;
import com.compomics.util.experiment.identification.matches.PeptideMatch;
import com.compomics.util.experiment.identification.matches.ProteinMatch;
import com.compomics.util.experiment.identification.matches.SpectrumMatch;
import com.compomics.util.gui.dialogs.ProgressDialogX;
import eu.isas.peptideshaker.gui.HelpWindow;
import eu.isas.peptideshaker.gui.PeptideShakerGUI;
import eu.isas.peptideshaker.myparameters.PSParameter;
import eu.isas.peptideshaker.preferences.SpectrumCountingPreferences.SpectralCountingMethod;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 * This panel will display QC statistics for the current project
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class QCPanel extends javax.swing.JPanel {

    /**
     * The main peptide shaker gui.
     */
    private PeptideShakerGUI peptideShakerGUI;
    /**
     * color for the plots (validated targets, validated decoy, non validated target, non validated decoy)
     */
    public static Color[] histogramColors;
    /**
     * The sequence factory
     */
    private SequenceFactory sequenceFactory = SequenceFactory.getInstance();
    /**
     * A simple progress dialog.
     */
    private static ProgressDialogX progressDialog;
    /**
     * Values of the validated target hits.
     */
    public ArrayList<Double> validatedValues;
    /**
     * Values of the non validated target hits.
     */
    public ArrayList<Double> nonValidatedValues;
    /**
     * Values of the validated decoy hits.
     */
    public ArrayList<Double> validatedDecoyValues;
    /**
     * Values of the non validated decoy hits.
     */
    public ArrayList<Double> nonValidatedDecoyValues;
    /**
     * The current maxium value to be plotted.
     */
    private double maxValue = Double.MAX_VALUE;

    /** 
     * Creates a new QCPanel
     * 
     * @param parent 
     */
    public QCPanel(PeptideShakerGUI parent) {
        this.peptideShakerGUI = parent;
        initComponents();

        // set the histogram colors
        histogramColors = new Color[4];
        histogramColors[0] = peptideShakerGUI.getSparklineColor();
        histogramColors[1] = new Color(255, 51, 51);
        histogramColors[2] = new Color(100, 150, 255);
        histogramColors[3] = Color.lightGray;

        // make the tabs in the spectrum tabbed pane go from right to left
        tabbedPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proteinButtonGroup = new javax.swing.ButtonGroup();
        peptideButtonGroup = new javax.swing.ButtonGroup();
        psmButtonGroup = new javax.swing.ButtonGroup();
        qcPanel = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        psmPanel = new javax.swing.JPanel();
        psmQCPlotPanel = new javax.swing.JPanel();
        proteinPlotTypePanel2 = new javax.swing.JPanel();
        psmPrecursorMassErrorJRadioButton = new javax.swing.JRadioButton();
        psmPrecursorChargeJRadioButton = new javax.swing.JRadioButton();
        psmQcPlotHelpJButton = new javax.swing.JButton();
        peptidePanel = new javax.swing.JPanel();
        peptideQCPlotPanel = new javax.swing.JPanel();
        proteinPlotTypePanel1 = new javax.swing.JPanel();
        peptidesValidatedPsmsJRadioButton = new javax.swing.JRadioButton();
        peptidesMissedCleavagesJRadioButton = new javax.swing.JRadioButton();
        peptidesQcPlotHelpJButton = new javax.swing.JButton();
        proteinPanel = new javax.swing.JPanel();
        proteinQCPlotPanel = new javax.swing.JPanel();
        proteinPlotTypePanel = new javax.swing.JPanel();
        proteinSpectrumCountingScoreJRadioButton = new javax.swing.JRadioButton();
        proteinNumberValidatedPeptidesJRadioButton = new javax.swing.JRadioButton();
        proteinSequenceCoverageJRadioButton = new javax.swing.JRadioButton();
        proteinQcPlotHelpJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        qcPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Quality Control Plots"));
        qcPanel.setOpaque(false);

        tabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        psmPanel.setOpaque(false);

        psmQCPlotPanel.setOpaque(false);
        psmQCPlotPanel.setLayout(new javax.swing.BoxLayout(psmQCPlotPanel, javax.swing.BoxLayout.LINE_AXIS));

        proteinPlotTypePanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Plot Type"));
        proteinPlotTypePanel2.setOpaque(false);

        psmButtonGroup.add(psmPrecursorMassErrorJRadioButton);
        psmPrecursorMassErrorJRadioButton.setSelected(true);
        psmPrecursorMassErrorJRadioButton.setText("Precursor Mass Error");
        psmPrecursorMassErrorJRadioButton.setIconTextGap(10);
        psmPrecursorMassErrorJRadioButton.setOpaque(false);
        psmPrecursorMassErrorJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmPrecursorMassErrorJRadioButtonActionPerformed(evt);
            }
        });

        psmButtonGroup.add(psmPrecursorChargeJRadioButton);
        psmPrecursorChargeJRadioButton.setText("Precursor Charge");
        psmPrecursorChargeJRadioButton.setIconTextGap(10);
        psmPrecursorChargeJRadioButton.setOpaque(false);
        psmPrecursorChargeJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmPrecursorChargeJRadioButtonActionPerformed(evt);
            }
        });

        psmQcPlotHelpJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.GIF"))); // NOI18N
        psmQcPlotHelpJButton.setToolTipText("Help");
        psmQcPlotHelpJButton.setBorder(null);
        psmQcPlotHelpJButton.setBorderPainted(false);
        psmQcPlotHelpJButton.setContentAreaFilled(false);
        psmQcPlotHelpJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                psmQcPlotHelpJButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                psmQcPlotHelpJButtonMouseExited(evt);
            }
        });
        psmQcPlotHelpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psmQcPlotHelpJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout proteinPlotTypePanel2Layout = new javax.swing.GroupLayout(proteinPlotTypePanel2);
        proteinPlotTypePanel2.setLayout(proteinPlotTypePanel2Layout);
        proteinPlotTypePanel2Layout.setHorizontalGroup(
            proteinPlotTypePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinPlotTypePanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psmPrecursorMassErrorJRadioButton)
                .addGap(18, 18, 18)
                .addComponent(psmPrecursorChargeJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 342, Short.MAX_VALUE)
                .addComponent(psmQcPlotHelpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        proteinPlotTypePanel2Layout.setVerticalGroup(
            proteinPlotTypePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, proteinPlotTypePanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(proteinPlotTypePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(psmQcPlotHelpJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, proteinPlotTypePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(psmPrecursorMassErrorJRadioButton)
                        .addComponent(psmPrecursorChargeJRadioButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout psmPanelLayout = new javax.swing.GroupLayout(psmPanel);
        psmPanel.setLayout(psmPanelLayout);
        psmPanelLayout.setHorizontalGroup(
            psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, psmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(psmQCPlotPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                    .addComponent(proteinPlotTypePanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        psmPanelLayout.setVerticalGroup(
            psmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, psmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psmQCPlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(proteinPlotTypePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("PSMs", psmPanel);

        peptidePanel.setOpaque(false);

        peptideQCPlotPanel.setOpaque(false);
        peptideQCPlotPanel.setLayout(new javax.swing.BoxLayout(peptideQCPlotPanel, javax.swing.BoxLayout.LINE_AXIS));

        proteinPlotTypePanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Plot Type"));
        proteinPlotTypePanel1.setOpaque(false);

        peptideButtonGroup.add(peptidesValidatedPsmsJRadioButton);
        peptidesValidatedPsmsJRadioButton.setSelected(true);
        peptidesValidatedPsmsJRadioButton.setText("#Validated PSMs");
        peptidesValidatedPsmsJRadioButton.setIconTextGap(10);
        peptidesValidatedPsmsJRadioButton.setOpaque(false);
        peptidesValidatedPsmsJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptidesValidatedPsmsJRadioButtonActionPerformed(evt);
            }
        });

        peptideButtonGroup.add(peptidesMissedCleavagesJRadioButton);
        peptidesMissedCleavagesJRadioButton.setText("Missed Cleavages");
        peptidesMissedCleavagesJRadioButton.setIconTextGap(10);
        peptidesMissedCleavagesJRadioButton.setOpaque(false);
        peptidesMissedCleavagesJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptidesMissedCleavagesJRadioButtonActionPerformed(evt);
            }
        });

        peptidesQcPlotHelpJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.GIF"))); // NOI18N
        peptidesQcPlotHelpJButton.setToolTipText("Help");
        peptidesQcPlotHelpJButton.setBorder(null);
        peptidesQcPlotHelpJButton.setBorderPainted(false);
        peptidesQcPlotHelpJButton.setContentAreaFilled(false);
        peptidesQcPlotHelpJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                peptidesQcPlotHelpJButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                peptidesQcPlotHelpJButtonMouseExited(evt);
            }
        });
        peptidesQcPlotHelpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptidesQcPlotHelpJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout proteinPlotTypePanel1Layout = new javax.swing.GroupLayout(proteinPlotTypePanel1);
        proteinPlotTypePanel1.setLayout(proteinPlotTypePanel1Layout);
        proteinPlotTypePanel1Layout.setHorizontalGroup(
            proteinPlotTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinPlotTypePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(peptidesValidatedPsmsJRadioButton)
                .addGap(18, 18, 18)
                .addComponent(peptidesMissedCleavagesJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 360, Short.MAX_VALUE)
                .addComponent(peptidesQcPlotHelpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        proteinPlotTypePanel1Layout.setVerticalGroup(
            proteinPlotTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, proteinPlotTypePanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(proteinPlotTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peptidesQcPlotHelpJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, proteinPlotTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(peptidesValidatedPsmsJRadioButton)
                        .addComponent(peptidesMissedCleavagesJRadioButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout peptidePanelLayout = new javax.swing.GroupLayout(peptidePanel);
        peptidePanel.setLayout(peptidePanelLayout);
        peptidePanelLayout.setHorizontalGroup(
            peptidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, peptidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(peptidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(peptideQCPlotPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                    .addComponent(proteinPlotTypePanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        peptidePanelLayout.setVerticalGroup(
            peptidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, peptidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(peptideQCPlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(proteinPlotTypePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Peptides", peptidePanel);

        proteinPanel.setOpaque(false);

        proteinQCPlotPanel.setOpaque(false);
        proteinQCPlotPanel.setLayout(new javax.swing.BoxLayout(proteinQCPlotPanel, javax.swing.BoxLayout.LINE_AXIS));

        proteinPlotTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Plot Type"));
        proteinPlotTypePanel.setOpaque(false);

        proteinButtonGroup.add(proteinSpectrumCountingScoreJRadioButton);
        proteinSpectrumCountingScoreJRadioButton.setText("Spectrum Counting Score");
        proteinSpectrumCountingScoreJRadioButton.setIconTextGap(10);
        proteinSpectrumCountingScoreJRadioButton.setOpaque(false);
        proteinSpectrumCountingScoreJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinSpectrumCountingScoreJRadioButtonActionPerformed(evt);
            }
        });

        proteinButtonGroup.add(proteinNumberValidatedPeptidesJRadioButton);
        proteinNumberValidatedPeptidesJRadioButton.setSelected(true);
        proteinNumberValidatedPeptidesJRadioButton.setText("#Validated Peptides");
        proteinNumberValidatedPeptidesJRadioButton.setIconTextGap(10);
        proteinNumberValidatedPeptidesJRadioButton.setOpaque(false);
        proteinNumberValidatedPeptidesJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinNumberValidatedPeptidesJRadioButtonActionPerformed(evt);
            }
        });

        proteinButtonGroup.add(proteinSequenceCoverageJRadioButton);
        proteinSequenceCoverageJRadioButton.setText("Sequence Coverage");
        proteinSequenceCoverageJRadioButton.setIconTextGap(10);
        proteinSequenceCoverageJRadioButton.setOpaque(false);
        proteinSequenceCoverageJRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinSequenceCoverageJRadioButtonActionPerformed(evt);
            }
        });

        proteinQcPlotHelpJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.GIF"))); // NOI18N
        proteinQcPlotHelpJButton.setToolTipText("Help");
        proteinQcPlotHelpJButton.setBorder(null);
        proteinQcPlotHelpJButton.setBorderPainted(false);
        proteinQcPlotHelpJButton.setContentAreaFilled(false);
        proteinQcPlotHelpJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                proteinQcPlotHelpJButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                proteinQcPlotHelpJButtonMouseExited(evt);
            }
        });
        proteinQcPlotHelpJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinQcPlotHelpJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout proteinPlotTypePanelLayout = new javax.swing.GroupLayout(proteinPlotTypePanel);
        proteinPlotTypePanel.setLayout(proteinPlotTypePanelLayout);
        proteinPlotTypePanelLayout.setHorizontalGroup(
            proteinPlotTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proteinPlotTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinNumberValidatedPeptidesJRadioButton)
                .addGap(18, 18, 18)
                .addComponent(proteinSpectrumCountingScoreJRadioButton)
                .addGap(18, 18, 18)
                .addComponent(proteinSequenceCoverageJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                .addComponent(proteinQcPlotHelpJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        proteinPlotTypePanelLayout.setVerticalGroup(
            proteinPlotTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, proteinPlotTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(proteinPlotTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(proteinQcPlotHelpJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addGroup(proteinPlotTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(proteinNumberValidatedPeptidesJRadioButton)
                        .addComponent(proteinSpectrumCountingScoreJRadioButton)
                        .addComponent(proteinSequenceCoverageJRadioButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout proteinPanelLayout = new javax.swing.GroupLayout(proteinPanel);
        proteinPanel.setLayout(proteinPanelLayout);
        proteinPanelLayout.setHorizontalGroup(
            proteinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, proteinPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(proteinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(proteinQCPlotPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                    .addComponent(proteinPlotTypePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        proteinPanelLayout.setVerticalGroup(
            proteinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, proteinPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proteinQCPlotPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(proteinPlotTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("Proteins", proteinPanel);

        tabbedPane.setSelectedIndex(2);

        javax.swing.GroupLayout qcPanelLayout = new javax.swing.GroupLayout(qcPanel);
        qcPanel.setLayout(qcPanelLayout);
        qcPanelLayout.setHorizontalGroup(
            qcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                .addContainerGap())
        );
        qcPanelLayout.setVerticalGroup(
            qcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(qcPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(qcPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Update the protein qc plot.
     * 
     * @param evt 
     */
    private void proteinNumberValidatedPeptidesJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinNumberValidatedPeptidesJRadioButtonActionPerformed

        if (peptideShakerGUI.getIdentification() != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Loading. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("UpdatePlotThread") {

                @Override
                public void run() {
                    progressDialog.setMax(peptideShakerGUI.getIdentification().getProteinIdentification().size());
                    updateProteinQCPlot(progressDialog);
                    progressDialog.setVisible(false);
                    progressDialog.dispose();
                }
            }.start();
        }
    }//GEN-LAST:event_proteinNumberValidatedPeptidesJRadioButtonActionPerformed

    /**
     * Update the protein qc plot.
     * 
     * @param evt 
     */
    private void proteinSpectrumCountingScoreJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinSpectrumCountingScoreJRadioButtonActionPerformed
        proteinNumberValidatedPeptidesJRadioButtonActionPerformed(evt);
    }//GEN-LAST:event_proteinSpectrumCountingScoreJRadioButtonActionPerformed

    /**
     * Update the protein qc plot.
     * 
     * @param evt 
     */
    private void proteinSequenceCoverageJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinSequenceCoverageJRadioButtonActionPerformed
        proteinNumberValidatedPeptidesJRadioButtonActionPerformed(evt);
    }//GEN-LAST:event_proteinSequenceCoverageJRadioButtonActionPerformed

    /**
     * Update the peptide qc plot.
     * 
     * @param evt 
     */
    private void peptidesMissedCleavagesJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptidesMissedCleavagesJRadioButtonActionPerformed

        if (peptideShakerGUI.getIdentification() != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();

            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Loading. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("UpdatePlotThread") {

                @Override
                public void run() {
                    progressDialog.setMax(peptideShakerGUI.getIdentification().getPeptideIdentification().size());
                    updatePeptideQCPlot(progressDialog);
                    progressDialog.setVisible(false);
                    progressDialog.dispose();
                }
            }.start();
        }
    }//GEN-LAST:event_peptidesMissedCleavagesJRadioButtonActionPerformed

    /**
     * Update the peptide qc plot.
     * 
     * @param evt 
     */
    private void peptidesValidatedPsmsJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptidesValidatedPsmsJRadioButtonActionPerformed
        peptidesMissedCleavagesJRadioButtonActionPerformed(evt);
    }//GEN-LAST:event_peptidesValidatedPsmsJRadioButtonActionPerformed

    /**
     * Change the cursor to a hand cursor.
     * 
     * @param evt 
     */
    private void proteinQcPlotHelpJButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_proteinQcPlotHelpJButtonMouseEntered
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_proteinQcPlotHelpJButtonMouseEntered

    /**
     * Change the cursor back to the default cursor.
     * 
     * @param evt 
     */
    private void proteinQcPlotHelpJButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_proteinQcPlotHelpJButtonMouseExited
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_proteinQcPlotHelpJButtonMouseExited

    /**
     * Open the help dialog.
     * 
     * @param evt 
     */
    private void proteinQcPlotHelpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinQcPlotHelpJButtonActionPerformed
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new HelpWindow(peptideShakerGUI, getClass().getResource("/helpFiles/ProteinQCPlots.html"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_proteinQcPlotHelpJButtonActionPerformed

    /**
     * Change the cursor to a hand cursor.
     * 
     * @param evt 
     */
    private void peptidesQcPlotHelpJButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_peptidesQcPlotHelpJButtonMouseEntered
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_peptidesQcPlotHelpJButtonMouseEntered

    /**
     * Change the cursor back to the default cursor.
     * 
     * @param evt 
     */
    private void peptidesQcPlotHelpJButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_peptidesQcPlotHelpJButtonMouseExited
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_peptidesQcPlotHelpJButtonMouseExited

    /**
     * Open the help dialog.
     * 
     * @param evt 
     */
    private void peptidesQcPlotHelpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptidesQcPlotHelpJButtonActionPerformed
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new HelpWindow(peptideShakerGUI, getClass().getResource("/helpFiles/PeptidesQCPlots.html"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_peptidesQcPlotHelpJButtonActionPerformed

    /**
     * Update the psm qc plot.
     * 
     * @param evt 
     */
    private void psmPrecursorMassErrorJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmPrecursorMassErrorJRadioButtonActionPerformed

        if (peptideShakerGUI.getIdentification() != null) {

            progressDialog = new ProgressDialogX(peptideShakerGUI, peptideShakerGUI, true);
            progressDialog.doNothingOnClose();
            new Thread(new Runnable() {

                public void run() {
                    progressDialog.setIndeterminate(true);
                    progressDialog.setTitle("Loading. Please Wait...");
                    progressDialog.setVisible(true);
                }
            }, "ProgressDialog").start();

            new Thread("UpdatePlotThread") {

                @Override
                public void run() {
                    progressDialog.setMax(peptideShakerGUI.getIdentification().getSpectrumIdentification().size());
                    updatePsmQCPlot(progressDialog);
                    progressDialog.setVisible(false);
                    progressDialog.dispose();
                }
            }.start();
        }
    }//GEN-LAST:event_psmPrecursorMassErrorJRadioButtonActionPerformed

    /**
     * Update the psm qc plot.
     * 
     * @param evt 
     */
    private void psmPrecursorChargeJRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmPrecursorChargeJRadioButtonActionPerformed
        psmPrecursorMassErrorJRadioButtonActionPerformed(evt);
    }//GEN-LAST:event_psmPrecursorChargeJRadioButtonActionPerformed

    /**
     * Change the cursor to a hand cursor.
     * 
     * @param evt 
     */
    private void psmQcPlotHelpJButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_psmQcPlotHelpJButtonMouseEntered
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_psmQcPlotHelpJButtonMouseEntered

    /**
     * Change the cursor back to the default cursor.
     * 
     * @param evt 
     */
    private void psmQcPlotHelpJButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_psmQcPlotHelpJButtonMouseExited
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_psmQcPlotHelpJButtonMouseExited

    /**
     * Open the help dialog.
     * 
     * @param evt 
     */
    private void psmQcPlotHelpJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psmQcPlotHelpJButtonActionPerformed
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new HelpWindow(peptideShakerGUI, getClass().getResource("/helpFiles/PSMsQCPlots.html"));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_psmQcPlotHelpJButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup peptideButtonGroup;
    private javax.swing.JPanel peptidePanel;
    private javax.swing.JPanel peptideQCPlotPanel;
    private javax.swing.JRadioButton peptidesMissedCleavagesJRadioButton;
    private javax.swing.JButton peptidesQcPlotHelpJButton;
    private javax.swing.JRadioButton peptidesValidatedPsmsJRadioButton;
    private javax.swing.ButtonGroup proteinButtonGroup;
    private javax.swing.JRadioButton proteinNumberValidatedPeptidesJRadioButton;
    private javax.swing.JPanel proteinPanel;
    private javax.swing.JPanel proteinPlotTypePanel;
    private javax.swing.JPanel proteinPlotTypePanel1;
    private javax.swing.JPanel proteinPlotTypePanel2;
    private javax.swing.JPanel proteinQCPlotPanel;
    private javax.swing.JButton proteinQcPlotHelpJButton;
    private javax.swing.JRadioButton proteinSequenceCoverageJRadioButton;
    private javax.swing.JRadioButton proteinSpectrumCountingScoreJRadioButton;
    private javax.swing.ButtonGroup psmButtonGroup;
    private javax.swing.JPanel psmPanel;
    private javax.swing.JRadioButton psmPrecursorChargeJRadioButton;
    private javax.swing.JRadioButton psmPrecursorMassErrorJRadioButton;
    private javax.swing.JPanel psmQCPlotPanel;
    private javax.swing.JButton psmQcPlotHelpJButton;
    private javax.swing.JPanel qcPanel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    /**
     * This method displays results on the panel
     * 
     * @param progressDialog a progress dialog. Can be null.
     */
    public void displayResults(ProgressDialogX progressDialog) {
        updateProteinQCPlot(progressDialog);
        updatePeptideQCPlot(progressDialog);
        updatePsmQCPlot(progressDialog);
    }

    /**
     * Updates the protein QC plot
     * 
     * @param progressDialog a progress dialog. Can be null.
     */
    private void updateProteinQCPlot(ProgressDialogX progressDialog) {

        getProteinDataset(progressDialog);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        ArrayList<Double> bins = new ArrayList<Double>();

        if (proteinSpectrumCountingScoreJRadioButton.isSelected()) {

            // attempt at using a range depending on the max value
            long intValue = StrictMath.round(maxValue);
            
            if (intValue == 0) {
                intValue = 1;
            }
            
            double temp = 0;
            
            bins.add(Util.roundDouble(temp, 1));
            
            while (temp < intValue - ((double) intValue/10)) {     
                temp += ((double) intValue/10);
                bins.add(Util.roundDouble(temp, 1));
            }

            getBinData(bins, validatedValues, dataset, "Validated True Positives", false);
            getBinData(bins, validatedDecoyValues, dataset, "Validated False Positives", false);
            getBinData(bins, nonValidatedValues, dataset, "Non-Validated True Positives", false);
            getBinData(bins, nonValidatedDecoyValues, dataset, "Non-Validated False Positives", false);

        } else if (proteinSequenceCoverageJRadioButton.isSelected()) {

            bins.add(0.0);
            bins.add(10.0);
            bins.add(20.0);
            bins.add(30.0);
            bins.add(40.0);
            bins.add(50.0);
            bins.add(60.0);
            bins.add(70.0);
            bins.add(80.0);
            bins.add(90.0);

            getBinData(bins, validatedValues, dataset, "Validated True Positives", "%", true);
            getBinData(bins, validatedDecoyValues, dataset, "Validated False Positives", "%", true);
            getBinData(bins, nonValidatedValues, dataset, "Non-Validated True Positives", "%", true);
            getBinData(bins, nonValidatedDecoyValues, dataset, "Non-Validated False Positives", "%", true);

        } else if (proteinNumberValidatedPeptidesJRadioButton.isSelected()) {

            bins.add(0.0);
            bins.add(1.0);
            bins.add(2.0);
            bins.add(3.0);
            bins.add(5.0);
            bins.add(10.0);
            bins.add(20.0);
            bins.add(50.0);
            bins.add(100.0);
            bins.add(200.0);
            bins.add(500.0);

            getBinData(bins, validatedValues, dataset, "Validated True Positives", true);
            getBinData(bins, validatedDecoyValues, dataset, "Validated False Positives", true);
            getBinData(bins, nonValidatedValues, dataset, "Non-Validated True Positives", true);
            getBinData(bins, nonValidatedDecoyValues, dataset, "Non-Validated False Positives", true);
        }

        JFreeChart proteinChart = ChartFactory.createStackedBarChart(null, null, "Amount of Proteins", dataset, PlotOrientation.VERTICAL, true, true, true);

        StackedBarRenderer renderer = new StackedBarRenderer();
        renderer.setShadowVisible(false);
        renderer.setSeriesPaint(0, histogramColors[0]);
        renderer.setSeriesPaint(1, histogramColors[1]);
        renderer.setSeriesPaint(2, histogramColors[2]);
        renderer.setSeriesPaint(3, histogramColors[3]);
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
        proteinChart.getCategoryPlot().setRenderer(0, renderer);

        ChartPanel chartPanel = new ChartPanel(proteinChart);

        if (proteinNumberValidatedPeptidesJRadioButton.isSelected()) {
            proteinChart.getCategoryPlot().getDomainAxis().setLabel("Number of Validated Peptides");
            proteinChart.setTitle("Protein QC Plot - Number of Validated Peptides");
        } else if (proteinSpectrumCountingScoreJRadioButton.isSelected()) {
            proteinChart.setTitle("Protein QC Plot - Spectrum Counting Scores");

            if (peptideShakerGUI.getSpectrumCountingPreferences().getSelectedMethod() == SpectralCountingMethod.EMPAI) {
                proteinChart.getCategoryPlot().getDomainAxis().setLabel("Spectrum Counting (emPAI)");
            } else {
                proteinChart.getCategoryPlot().getDomainAxis().setLabel("Spectrum Counting (NSAF)");
            }

        } else if (proteinSequenceCoverageJRadioButton.isSelected()) {
            proteinChart.getCategoryPlot().getDomainAxis().setLabel("Sequence Coverage");
            proteinChart.setTitle("Protein QC Plot - Sequence Coverage");
        }

        // set background color
        proteinChart.getPlot().setBackgroundPaint(Color.WHITE);
        proteinChart.setBackgroundPaint(Color.WHITE);
        chartPanel.setBackground(Color.WHITE);

        // remove space before/after the domain axis
        proteinChart.getCategoryPlot().getDomainAxis().setUpperMargin(0);
        proteinChart.getCategoryPlot().getDomainAxis().setLowerMargin(0);

        // hide the outline
        proteinChart.getPlot().setOutlineVisible(false);

        proteinQCPlotPanel.removeAll();
        proteinQCPlotPanel.add(chartPanel);
        proteinQCPlotPanel.revalidate();
        proteinQCPlotPanel.repaint();
    }

    /**
     * Updates the peptide QC plot
     * 
     * @param progressDialog a progress dialog. Can be null.
     */
    private void updatePeptideQCPlot(ProgressDialogX progressDialog) {

        getPeptideDataset(progressDialog);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        ArrayList<Double> bins = new ArrayList<Double>();

        if (peptidesValidatedPsmsJRadioButton.isSelected()) {

            bins.add(0.0);
            bins.add(1.0);
            bins.add(2.0);
            bins.add(3.0);
            bins.add(5.0);
            bins.add(10.0);
            bins.add(20.0);
            bins.add(50.0);
            bins.add(100.0);
            bins.add(200.0);
            bins.add(500.0);

            getBinData(bins, validatedValues, dataset, "Validated True Positives", true);
            getBinData(bins, validatedDecoyValues, dataset, "Validated False Positives", true);
            getBinData(bins, nonValidatedValues, dataset, "Non-Validated True Positives", true);
            getBinData(bins, nonValidatedDecoyValues, dataset, "Non-Validated False Positives", true);

        } else if (peptidesMissedCleavagesJRadioButton.isSelected()) {

            bins.add(0.0);
            bins.add(1.0);
            bins.add(2.0);
            bins.add(3.0);

            getBinData(bins, validatedValues, dataset, "Validated True Positives", true);
            getBinData(bins, validatedDecoyValues, dataset, "Validated False Positives", true);
            getBinData(bins, nonValidatedValues, dataset, "Non-Validated True Positives", true);
            getBinData(bins, nonValidatedDecoyValues, dataset, "Non-Validated False Positives", true);
        }

        JFreeChart peptideChart = ChartFactory.createStackedBarChart(null, null, "Amount of Peptides", dataset, PlotOrientation.VERTICAL, true, true, true);

        StackedBarRenderer renderer = new StackedBarRenderer();
        renderer.setShadowVisible(false);
        renderer.setSeriesPaint(0, histogramColors[0]);
        renderer.setSeriesPaint(1, histogramColors[1]);
        renderer.setSeriesPaint(2, histogramColors[2]);
        renderer.setSeriesPaint(3, histogramColors[3]);
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
        peptideChart.getCategoryPlot().setRenderer(0, renderer);

        ChartPanel chartPanel = new ChartPanel(peptideChart);

        if (peptidesValidatedPsmsJRadioButton.isSelected()) {
            peptideChart.getCategoryPlot().getDomainAxis().setLabel("Number of Validated PSMs");
            peptideChart.setTitle("Peptides QC Plot - Number of Validated PSMs");
        } else if (peptidesMissedCleavagesJRadioButton.isSelected()) {
            peptideChart.getCategoryPlot().getDomainAxis().setLabel("Missed Cleavages");
            peptideChart.setTitle("Peptides QC Plot - Missed Cleavages");
        }

        // set background color
        peptideChart.getPlot().setBackgroundPaint(Color.WHITE);
        peptideChart.setBackgroundPaint(Color.WHITE);
        chartPanel.setBackground(Color.WHITE);

        // remove space before/after the domain axis
        peptideChart.getCategoryPlot().getDomainAxis().setUpperMargin(0);
        peptideChart.getCategoryPlot().getDomainAxis().setLowerMargin(0);

        // hide the outline
        peptideChart.getPlot().setOutlineVisible(false);

        peptideQCPlotPanel.removeAll();
        peptideQCPlotPanel.add(chartPanel);
        peptideQCPlotPanel.revalidate();
        peptideQCPlotPanel.repaint();
    }

    /**
     * Updates the PSM QC plot
     * 
     * @param progressDialog a progress dialog. Can be null.
     */
    private void updatePsmQCPlot(ProgressDialogX progressDialog) {

        getPsmDataset(progressDialog);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        ArrayList<Double> bins = new ArrayList<Double>();

        // @TODO: here we ought to use the max charge and max precursor error!!

        if (psmPrecursorMassErrorJRadioButton.isSelected()) {
            bins.add(0.0);
            bins.add(0.25);
            bins.add(0.5);
            bins.add(1.0);
            bins.add(2.0);
            bins.add(5.0);
            bins.add(10.0);

            getBinData(bins, validatedValues, dataset, "Validated True Positives", false);
            getBinData(bins, validatedDecoyValues, dataset, "Validated False Positives", false);
            getBinData(bins, nonValidatedValues, dataset, "Non-Validated True Positives", false);
            getBinData(bins, nonValidatedDecoyValues, dataset, "Non-Validated False Positives", false);

        } else if (psmPrecursorChargeJRadioButton.isSelected()) {
            bins.add(0.0);
            bins.add(1.0);
            bins.add(2.0);
            bins.add(3.0);
            bins.add(4.0);

            getBinData(bins, validatedValues, dataset, "Validated True Positives", true);
            getBinData(bins, validatedDecoyValues, dataset, "Validated False Positives", true);
            getBinData(bins, nonValidatedValues, dataset, "Non-Validated True Positives", true);
            getBinData(bins, nonValidatedDecoyValues, dataset, "Non-Validated False Positives", true);
        }

        JFreeChart psmChart = ChartFactory.createStackedBarChart(null, null, "Amount of PSMs", dataset, PlotOrientation.VERTICAL, true, true, true);

        StackedBarRenderer renderer = new StackedBarRenderer();
        renderer.setShadowVisible(false);
        renderer.setSeriesPaint(0, histogramColors[0]);
        renderer.setSeriesPaint(1, histogramColors[1]);
        renderer.setSeriesPaint(2, histogramColors[2]);
        renderer.setSeriesPaint(3, histogramColors[3]);
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
        psmChart.getCategoryPlot().setRenderer(0, renderer);

        ChartPanel chartPanel = new ChartPanel(psmChart);

        if (psmPrecursorMassErrorJRadioButton.isSelected()) {
            psmChart.getCategoryPlot().getDomainAxis().setLabel("Precursor Mass Error");
            psmChart.setTitle("PSMs QC Plot - Precursor Mass Error");
        } else if (psmPrecursorChargeJRadioButton.isSelected()) {
            psmChart.getCategoryPlot().getDomainAxis().setLabel("Precursor Charge");
            psmChart.setTitle("PSMs QC Plot - Precursor Charge");
        }

        // set background color
        psmChart.getPlot().setBackgroundPaint(Color.WHITE);
        psmChart.setBackgroundPaint(Color.WHITE);
        chartPanel.setBackground(Color.WHITE);

        // remove space before/after the domain axis
        psmChart.getCategoryPlot().getDomainAxis().setUpperMargin(0);
        psmChart.getCategoryPlot().getDomainAxis().setLowerMargin(0);

        // hide the outline
        psmChart.getPlot().setOutlineVisible(false);

        psmQCPlotPanel.removeAll();
        psmQCPlotPanel.add(chartPanel);
        psmQCPlotPanel.revalidate();
        psmQCPlotPanel.repaint();
    }

    /**
     * Returns the dataset to use for the protein QC plot
     * 
     * @param progressDialog a progress dialog. Can be null.
     */
    private void getProteinDataset(ProgressDialogX progressDialog) {

        try {
            PSParameter psParameter = new PSParameter();
            maxValue = Double.MIN_VALUE;
            if (proteinNumberValidatedPeptidesJRadioButton.isSelected()) {
                // Values for the number of validated peptides
                validatedValues = new ArrayList<Double>();
                nonValidatedValues = new ArrayList<Double>();
                validatedDecoyValues = new ArrayList<Double>();
                nonValidatedDecoyValues = new ArrayList<Double>();
   
                for (String proteinKey : peptideShakerGUI.getIdentification().getProteinIdentification()) {
                    double value = 0;
                    ProteinMatch proteinMatch = peptideShakerGUI.getIdentification().getProteinMatch(proteinKey);
                    for (String peptideKey : proteinMatch.getPeptideMatches()) {
                        psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(peptideKey, psParameter);
                        if (psParameter.isValidated()) {
                            value++;
                        }
                    }
                    if (value > maxValue) {
                        maxValue = value;
                    }
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(proteinKey, psParameter);
                    if (!proteinMatch.isDecoy()) {
                        if (psParameter.isValidated()) {
                            validatedValues.add(value);
                        } else {
                            nonValidatedValues.add(value);
                        }
                    } else {
                        if (psParameter.isValidated()) {
                            validatedDecoyValues.add(value);
                        } else {
                            nonValidatedDecoyValues.add(value);
                        }
                    }
                    if (progressDialog != null) {
                        progressDialog.incrementValue();
                    }
                }

            } else if (proteinSpectrumCountingScoreJRadioButton.isSelected()) {
                
                // Values for the spectrum counting
                validatedValues = new ArrayList<Double>();
                nonValidatedValues = new ArrayList<Double>();
                validatedDecoyValues = new ArrayList<Double>();
                nonValidatedDecoyValues = new ArrayList<Double>();
                
                for (String proteinKey : peptideShakerGUI.getIdentification().getProteinIdentification()) {
                    ProteinMatch proteinMatch = peptideShakerGUI.getIdentification().getProteinMatch(proteinKey);
                    double value = peptideShakerGUI.getSpectrumCounting(proteinMatch);
                    if (value > 0) {
                        if (value > maxValue) {
                            maxValue  = value;
                        }
                    }
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(proteinKey, psParameter);
                    if (!proteinMatch.isDecoy()) {
                        if (psParameter.isValidated()) {
                            validatedValues.add(value);
                        } else {
                            nonValidatedValues.add(value);
                        }
                    } else {
                        if (psParameter.isValidated()) {
                            validatedDecoyValues.add(value);
                        } else {
                            nonValidatedDecoyValues.add(value);
                        }
                    }
                    if (progressDialog != null) {
                        progressDialog.incrementValue();
                    }
                }
            } else if (proteinSequenceCoverageJRadioButton.isSelected()) {
                
                // Values for the sequence coverage
                validatedValues = new ArrayList<Double>();
                nonValidatedValues = new ArrayList<Double>();
                validatedDecoyValues = new ArrayList<Double>();
                nonValidatedDecoyValues = new ArrayList<Double>();
                
                for (String proteinKey : peptideShakerGUI.getIdentification().getProteinIdentification()) {
                    ProteinMatch proteinMatch = peptideShakerGUI.getIdentification().getProteinMatch(proteinKey);
                    Protein currentProtein = sequenceFactory.getProtein(proteinMatch.getMainMatch());
                    double value = 100 * peptideShakerGUI.estimateSequenceCoverage(proteinMatch, currentProtein.getSequence());
                    if (value > maxValue) {
                        maxValue = value;
                    }
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(proteinKey, psParameter);
                    if (!proteinMatch.isDecoy()) {
                        if (psParameter.isValidated()) {
                            validatedValues.add(value);
                        } else {
                            nonValidatedValues.add(value);
                        }
                    } else {
                        if (psParameter.isValidated()) {
                            validatedDecoyValues.add(value);
                        } else {
                            nonValidatedDecoyValues.add(value);
                        }
                    }
                    if (progressDialog != null) {
                        progressDialog.incrementValue();
                    }
                }
            }
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
        }
    }

    /**
     * Returns the dataset to use for the peptide QC plot
     * 
     * @param progressDialog a progress dialog. Can be null.
     */
    private void getPeptideDataset(ProgressDialogX progressDialog) {

        try {
            PSParameter psParameter = new PSParameter();
            maxValue = Double.MIN_VALUE;
            
            if (peptidesValidatedPsmsJRadioButton.isSelected()) {
                
                // Values for the number of validated PSMs
                validatedValues = new ArrayList<Double>();
                nonValidatedValues = new ArrayList<Double>();
                validatedDecoyValues = new ArrayList<Double>();
                nonValidatedDecoyValues = new ArrayList<Double>();
                
                for (String peptideKey : peptideShakerGUI.getIdentification().getPeptideIdentification()) {
                    double value = 0;
                    PeptideMatch peptideMatch = peptideShakerGUI.getIdentification().getPeptideMatch(peptideKey);
                    for (String spectrumKey : peptideMatch.getSpectrumMatches()) {
                        psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(spectrumKey, psParameter);
                        if (psParameter.isValidated()) {
                            value = value + 1;
                        }
                    }
                    if (value > maxValue) {
                        maxValue = value;
                    }
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(peptideKey, psParameter);
                    if (!peptideMatch.isDecoy()) {
                        if (psParameter.isValidated()) {
                            validatedValues.add(value);
                        } else {
                            nonValidatedValues.add(value);
                        }
                    } else {
                        if (psParameter.isValidated()) {
                            validatedDecoyValues.add(value);
                        } else {
                            nonValidatedDecoyValues.add(value);
                        }
                    }
                    if (progressDialog != null) {
                        progressDialog.incrementValue();
                    }
                }
            } else if (peptidesMissedCleavagesJRadioButton.isSelected()) {
                
                // Values for the missed cleavages
                validatedValues = new ArrayList<Double>();
                nonValidatedValues = new ArrayList<Double>();
                validatedDecoyValues = new ArrayList<Double>();
                nonValidatedDecoyValues = new ArrayList<Double>();
                Enzyme enzyme = peptideShakerGUI.getSearchParameters().getEnzyme();
                
                for (String peptideKey : peptideShakerGUI.getIdentification().getPeptideIdentification()) {
                    PeptideMatch peptideMatch = peptideShakerGUI.getIdentification().getPeptideMatch(peptideKey);
                    double value = Peptide.getNMissedCleavages(Peptide.getSequence(peptideKey), enzyme);
                    if (value > 0) {
                        if (value > maxValue) {
                            maxValue = value;
                        }
                    }
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(peptideKey, psParameter);
                    if (!peptideMatch.isDecoy()) {
                        if (psParameter.isValidated()) {
                            validatedValues.add(value);
                        } else {
                            nonValidatedValues.add(value);
                        }
                    } else {
                        if (psParameter.isValidated()) {
                            validatedDecoyValues.add(value);
                        } else {
                            nonValidatedDecoyValues.add(value);
                        }
                    }
                    if (progressDialog != null) {
                        progressDialog.incrementValue();
                    }
                }
            }
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
        }
    }

    /**
     * Returns the dataset to use for the PSM QC plot
     * 
     * @param progressDialog a progress dialog. Can be null.
     */
    private void getPsmDataset(ProgressDialogX progressDialog) {

        try {
            PSParameter psParameter = new PSParameter();
            maxValue = Double.MIN_VALUE;
            
            if (psmPrecursorMassErrorJRadioButton.isSelected()) {
                
                // Values for the precursor mass deviation
                validatedValues = new ArrayList<Double>();
                nonValidatedValues = new ArrayList<Double>();
                validatedDecoyValues = new ArrayList<Double>();
                nonValidatedDecoyValues = new ArrayList<Double>();
                SpectrumMatch spectrumMatch;
                
                for (String spectrumKey : peptideShakerGUI.getIdentification().getSpectrumIdentification()) {
                    spectrumMatch = peptideShakerGUI.getIdentification().getSpectrumMatch(spectrumKey);
                    double value = spectrumMatch.getBestAssumption().getDeltaMass();
                    if (value > maxValue) {
                        maxValue = value;
                    }
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(spectrumKey, psParameter);
                    if (!spectrumMatch.getBestAssumption().isDecoy()) {
                        if (psParameter.isValidated()) {
                            validatedValues.add(value);
                        } else {
                            nonValidatedValues.add(value);
                        }
                    } else {
                        if (psParameter.isValidated()) {
                            validatedDecoyValues.add(value);
                        } else {
                            nonValidatedDecoyValues.add(value);
                        }
                    }
                    if (progressDialog != null) {
                        progressDialog.incrementValue();
                    }
                }
            } else if (psmPrecursorChargeJRadioButton.isSelected()) {
                
                // Values for the precursor charge
                validatedValues = new ArrayList<Double>();
                nonValidatedValues = new ArrayList<Double>();
                validatedDecoyValues = new ArrayList<Double>();
                nonValidatedDecoyValues = new ArrayList<Double>();
                SpectrumMatch spectrumMatch;
                
                for (String spectrumKey : peptideShakerGUI.getIdentification().getSpectrumIdentification()) {
                    spectrumMatch = peptideShakerGUI.getIdentification().getSpectrumMatch(spectrumKey);
                    double value = peptideShakerGUI.getPrecursor(spectrumKey).getCharge().value;
                    if (value > maxValue) {
                        maxValue = value;
                    }
                    psParameter = (PSParameter) peptideShakerGUI.getIdentification().getMatchParameter(spectrumKey, psParameter);
                    if (!spectrumMatch.getBestAssumption().isDecoy()) {
                        if (psParameter.isValidated()) {
                            validatedValues.add(value);
                        } else {
                            nonValidatedValues.add(value);
                        }
                    } else {
                        if (psParameter.isValidated()) {
                            validatedDecoyValues.add(value);
                        } else {
                            nonValidatedDecoyValues.add(value);
                        }
                    }
                    if (progressDialog != null) {
                        progressDialog.incrementValue();
                    }
                }
            }
        } catch (Exception e) {
            peptideShakerGUI.catchException(e);
        }
    }

    /**
     * Calculates the number of values in each bin given the values and the 
     * bin sizes.
     * 
     * @param bins          the bins to use
     * @param values        the values to put into the bins
     * @param dataset       the dataset to add the values to
     * @param categoryLabel the category label
     * @param integerBins   if true the values will be shown as integers
     */
    private void getBinData(ArrayList<Double> bins, ArrayList<Double> values, DefaultCategoryDataset dataset, String categoryLabel, boolean integerBins) {
        getBinData(bins, values, dataset, categoryLabel, "", integerBins);
    }

    /**
     * Calculates the number of values in each bin given the values and the 
     * bin sizes.
     * 
     * @param bins          the bins to use
     * @param values        the values to put into the bins
     * @param dataset       the dataset to add the values to
     * @param categoryLabel the category label
     * @param dataType      added to the bin labels after the values, e.g. % 
     * @param integerBins   if true the values will be shown as integers
     */
    private void getBinData(ArrayList<Double> bins, ArrayList<Double> values, DefaultCategoryDataset dataset, String categoryLabel, String dataType, boolean integerBins) {

        int[] binData = new int[bins.size() + 1];

        boolean binFound = false;

        for (int i = 0; i < values.size(); i++) {

            binFound = false;

            for (int j = 0; j < bins.size() && !binFound; j++) {
                if (values.get(i) <= bins.get(j)) {
                    binData[j]++;
                    binFound = true;
                }
            }

            if (!binFound) {
                binData[binData.length - 1]++;
            }
        }

        
        for (int i = 0; i < bins.size() + 1; i++) {
            if (i == 0) {
                if (bins.get(i) > 0.0) {

                    if (integerBins) {
                        dataset.addValue(binData[i], categoryLabel, "<=" + bins.get(i).intValue() + dataType);
                    } else {
                        dataset.addValue(binData[i], categoryLabel, "<=" + bins.get(i) + dataType);
                    }

                } else {
                    if (integerBins) {
                        dataset.addValue(binData[i], categoryLabel, "" + bins.get(i).intValue() + dataType);
                    } else {
                        dataset.addValue(binData[i], categoryLabel, "" + bins.get(i) + dataType);
                    }

                }
            } else if (i == bins.size()) {
                if (integerBins) {
                    dataset.addValue(binData[i], categoryLabel, ">" + bins.get(bins.size() - 1).intValue() + dataType);
                } else {
                    dataset.addValue(binData[i], categoryLabel, ">" + bins.get(bins.size() - 1) + dataType);
                }

            } else {
                if (integerBins) {

                    if (bins.get(i).intValue() == bins.get(i - 1).intValue() + 1) {
                        dataset.addValue(binData[i], categoryLabel, "" + bins.get(i).intValue() + dataType);
                    } else {
                        dataset.addValue(binData[i], categoryLabel, bins.get(i - 1).intValue() + "-" + bins.get(i).intValue() + dataType);
                    }

                } else {
                    dataset.addValue(binData[i], categoryLabel, bins.get(i - 1) + "-" + bins.get(i) + dataType);
                }
            }
        }
    }
}
