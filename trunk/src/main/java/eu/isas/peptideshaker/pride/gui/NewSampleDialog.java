package eu.isas.peptideshaker.pride.gui;

import eu.isas.peptideshaker.pride.CvTerm;
import eu.isas.peptideshaker.pride.Sample;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Map;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import no.uib.olsdialog.OLSDialog;
import no.uib.olsdialog.OLSInputable;

/**
 * A dialog for annotating samples.
 * 
 * @author Harald Barsnes
 */
public class NewSampleDialog extends javax.swing.JDialog implements OLSInputable {

    /**
     * The table column header tooltips.
     */
    private Vector columnToolTips;
    /**
     * The PRIDE Export Dialog.
     */
    private PrideExportDialog prideExportDialog;
    /**
     * The NEWT taxonony root.
     */
    private String newtRoot = "NEWT UniProt Taxonomy Database [NEWT] / Root node of taxonomy";

    /**
     * Creates a new NewSampleDialog.
     *
     * @param prideExportDialog
     * @param modal
     */
    public NewSampleDialog(PrideExportDialog prideExportDialog, boolean modal) {
        super(prideExportDialog, modal);
        this.prideExportDialog = prideExportDialog;

        initComponents();
        setTitle("New Sample");
        
        setUpTable();


        setLocationRelativeTo(prideExportDialog);
        setVisible(true);
    }

    /**
     * Creates a new NewSampleDialog.
     *
     * @param prideExportDialog
     * @param modal
     * @param sample  
     */
    public NewSampleDialog(PrideExportDialog prideExportDialog, boolean modal, Sample sample) {
        super(prideExportDialog, modal);
        this.prideExportDialog = prideExportDialog;

        initComponents();
        setTitle("Edit Sample");
        
        sampleNameJTextField.setText(sample.getName());
        
        for (int i=0; i<sample.getCvTerms().size(); i++) {
            ((DefaultTableModel) sampleCvTermsJTable.getModel()).addRow(new Object[] {
                (i+1),
                sample.getCvTerms().get(i).getOntology(),
                sample.getCvTerms().get(i).getAccession(),
                sample.getCvTerms().get(i).getName(),
                sample.getCvTerms().get(i).getValue()
            });
        }
        
        setUpTable();
        validateInput();

        setLocationRelativeTo(prideExportDialog);
        setVisible(true);
    }
    
    /**
     * Set up the table properties.
     */
    private void setUpTable() {
        sampleCvScrollPane.getViewport().setOpaque(false);
        sampleCvTermsJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sampleCvTermsJTable.getTableHeader().setReorderingAllowed(false);
        sampleCvTermsJTable.getColumn(" ").setMaxWidth(40);
        sampleCvTermsJTable.getColumn(" ").setMinWidth(40);
        
        columnToolTips = new Vector();
        columnToolTips.add(null);
        columnToolTips.add(null);
        columnToolTips.add(null);
        columnToolTips.add(null);
        columnToolTips.add(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupJMenu = new javax.swing.JPopupMenu();
        editJMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        moveUpJMenuItem = new javax.swing.JMenuItem();
        moveDownJMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        deleteSelectedRowJMenuItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        sampleCvScrollPane = new javax.swing.JScrollPane();
        sampleCvTermsJTable = new JTable() {
            protected JTableHeader createDefaultTableHeader() {
                return new JTableHeader(columnModel) {
                    public String getToolTipText(MouseEvent e) {
                        java.awt.Point p = e.getPoint();
                        int index = columnModel.getColumnIndexAtX(p.x);
                        int realIndex = columnModel.getColumn(index).getModelIndex();
                        String tip = (String) columnToolTips.get(realIndex);
                        return tip;
                    }
                };
            }
        };
        sampleDetailsJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        sampleNameJTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();

        editJMenuItem.setMnemonic('E');
        editJMenuItem.setText("Edit");
        editJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(editJMenuItem);
        popupJMenu.add(jSeparator3);

        moveUpJMenuItem.setMnemonic('U');
        moveUpJMenuItem.setText("Move Up");
        moveUpJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(moveUpJMenuItem);

        moveDownJMenuItem.setMnemonic('D');
        moveDownJMenuItem.setText("Move Down");
        moveDownJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(moveDownJMenuItem);
        popupJMenu.add(jSeparator4);

        deleteSelectedRowJMenuItem.setText("Delete");
        deleteSelectedRowJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedRowJMenuItemActionPerformed(evt);
            }
        });
        popupJMenu.add(deleteSelectedRowJMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Sample");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sample Details"));

        jLabel2.setFont(jLabel2.getFont().deriveFont((jLabel2.getFont().getStyle() | java.awt.Font.ITALIC), jLabel2.getFont().getSize()-2));
        jLabel2.setText("Preferred Ontologies: NEWT (species), BTO (tissue), CL (cell type), GO (gene ontology) and DOID (disease state)");

        sampleCvTermsJTable.setFont(sampleCvTermsJTable.getFont());
        sampleCvTermsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " ", "Ontology", "Accession", "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sampleCvTermsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sampleCvTermsJTableMouseClicked(evt);
            }
        });
        sampleCvTermsJTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sampleCvTermsJTableKeyReleased(evt);
            }
        });
        sampleCvScrollPane.setViewportView(sampleCvTermsJTable);

        sampleDetailsJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ols_transparent.GIF"))); // NOI18N
        sampleDetailsJButton.setText("Add Sample Term");
        sampleDetailsJButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        sampleDetailsJButton.setPreferredSize(new java.awt.Dimension(159, 23));
        sampleDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleDetailsJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Name:");

        sampleNameJTextField.setMargin(new java.awt.Insets(2, 4, 2, 2));
        sampleNameJTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sampleNameJTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sampleCvScrollPane)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 118, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(sampleNameJTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sampleDetailsJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sampleNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleCvScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleDetailsJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        okButton.setText("OK");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Open the popup menu.
     * 
     * @param evt 
     */
    private void sampleCvTermsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sampleCvTermsJTableMouseClicked
        if (evt.getButton() == 3) {

            int row = sampleCvTermsJTable.rowAtPoint(evt.getPoint());
            int column = sampleCvTermsJTable.columnAtPoint(evt.getPoint());

            sampleCvTermsJTable.changeSelection(row, column, false, false);

            this.moveUpJMenuItem.setEnabled(true);
            this.moveDownJMenuItem.setEnabled(true);

            if (row == sampleCvTermsJTable.getRowCount() - 1) {
                this.moveDownJMenuItem.setEnabled(false);
            }

            if (row == 0) {
                this.moveUpJMenuItem.setEnabled(false);
            }

            popupJMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        } else if (evt.getButton() == 1 && evt.getClickCount() == 2) {
            editJMenuItemActionPerformed(null);
        }
    }//GEN-LAST:event_sampleCvTermsJTableMouseClicked

    /**
     * Delete the selected row.
     * 
     * @param evt 
     */
    private void sampleCvTermsJTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sampleCvTermsJTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            deleteSelectedRowJMenuItemActionPerformed(null);
        }
    }//GEN-LAST:event_sampleCvTermsJTableKeyReleased

    /**
     * Open the OLS Dialog.
     * 
     * @param evt 
     */
    private void sampleDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleDetailsJButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        new OLSDialog(prideExportDialog, this, true, "singleSample", newtRoot, null);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_sampleDetailsJButtonActionPerformed

    /**
     * Edit the selected row using the OLS Dialog.
     * 
     * @param evt 
     */
    private void editJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJMenuItemActionPerformed
        int selectedRow = sampleCvTermsJTable.getSelectedRow();

        String searchTerm = (String) sampleCvTermsJTable.getValueAt(selectedRow, 3);
        String ontology = (String) sampleCvTermsJTable.getValueAt(selectedRow, 1);
        ontology = PrideExportDialog.getOntologyFromCvTerm(ontology);

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        if (newtRoot.indexOf(ontology) != -1) {
            ontology = newtRoot;
        }

        new OLSDialog(prideExportDialog, this, true, "singleSample", ontology, selectedRow, searchTerm);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_editJMenuItemActionPerformed

    /**
     * Move the current row up.
     * 
     * @param evt 
     */
    private void moveUpJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpJMenuItemActionPerformed
        int selectedRow = sampleCvTermsJTable.getSelectedRow();
        int selectedColumn = sampleCvTermsJTable.getSelectedColumn();

        Object[] tempRow = new Object[]{
            sampleCvTermsJTable.getValueAt(selectedRow - 1, 0),
            sampleCvTermsJTable.getValueAt(selectedRow - 1, 1),
            sampleCvTermsJTable.getValueAt(selectedRow - 1, 2)
        };

        ((DefaultTableModel) sampleCvTermsJTable.getModel()).removeRow(selectedRow - 1);
        ((DefaultTableModel) sampleCvTermsJTable.getModel()).insertRow(selectedRow, tempRow);

        sampleCvTermsJTable.changeSelection(selectedRow - 1, selectedColumn, false, false);

        fixTableIndices();
    }//GEN-LAST:event_moveUpJMenuItemActionPerformed

    /**
     * Move the current row down.
     * 
     * @param evt 
     */
    private void moveDownJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownJMenuItemActionPerformed
        int selectedRow = sampleCvTermsJTable.getSelectedRow();
        int selectedColumn = sampleCvTermsJTable.getSelectedColumn();

        Object[] tempRow = new Object[]{
            sampleCvTermsJTable.getValueAt(selectedRow + 1, 0),
            sampleCvTermsJTable.getValueAt(selectedRow + 1, 1),
            sampleCvTermsJTable.getValueAt(selectedRow + 1, 2)
        };

        ((DefaultTableModel) sampleCvTermsJTable.getModel()).removeRow(selectedRow + 1);
        ((DefaultTableModel) sampleCvTermsJTable.getModel()).insertRow(selectedRow, tempRow);

        sampleCvTermsJTable.changeSelection(selectedRow + 1, selectedColumn, false, false);

        fixTableIndices();
    }//GEN-LAST:event_moveDownJMenuItemActionPerformed

    /**
     * Delete the selected row.
     * 
     * @param evt 
     */
    private void deleteSelectedRowJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedRowJMenuItemActionPerformed

        int selectedRow = sampleCvTermsJTable.getSelectedRow();

        if (selectedRow != -1) {

            ((DefaultTableModel) sampleCvTermsJTable.getModel()).removeRow(selectedRow);
            fixTableIndices();
            validateInput();
        }
    }//GEN-LAST:event_deleteSelectedRowJMenuItemActionPerformed

    /**
     * Add the sample to the export dialog and close.
     * 
     * @param evt 
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        ArrayList<CvTerm> cvTerms = new ArrayList<CvTerm>();
        
        for (int i=0; i<sampleCvTermsJTable.getRowCount(); i++) {
            cvTerms.add(new CvTerm(
                    (String) sampleCvTermsJTable.getValueAt(i, 1), 
                    (String) sampleCvTermsJTable.getValueAt(i, 2), 
                    (String) sampleCvTermsJTable.getValueAt(i, 3), 
                    (String) sampleCvTermsJTable.getValueAt(i, 4)));
        }
        
        prideExportDialog.setSample(new Sample(sampleNameJTextField.getText(), cvTerms));
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Close without saving.
     * 
     * @param evt 
     */
    private void sampleNameJTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sampleNameJTextFieldKeyReleased
        validateInput();
    }//GEN-LAST:event_sampleNameJTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteSelectedRowJMenuItem;
    private javax.swing.JMenuItem editJMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JMenuItem moveDownJMenuItem;
    private javax.swing.JMenuItem moveUpJMenuItem;
    private javax.swing.JButton okButton;
    private javax.swing.JPopupMenu popupJMenu;
    private javax.swing.JScrollPane sampleCvScrollPane;
    private javax.swing.JTable sampleCvTermsJTable;
    private javax.swing.JButton sampleDetailsJButton;
    private javax.swing.JTextField sampleNameJTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * Fixes the indices so that they are in accending order starting from one
     */
    private void fixTableIndices() {
        for (int row = 0; row < ((DefaultTableModel) sampleCvTermsJTable.getModel()).getRowCount(); row++) {
            ((DefaultTableModel) sampleCvTermsJTable.getModel()).setValueAt(new Integer(row + 1), row, 0);
        }
    }

    /**
     * Enables the OK button if a valid sample set is selected.
     */
    private void validateInput() {
        if (sampleCvTermsJTable.getRowCount() > 0 && sampleNameJTextField.getText().length() > 0) {
            okButton.setEnabled(true);
        } else {
            okButton.setEnabled(false);
        }
    }

    @Override
    public void insertOLSResult(String field, String selectedValue, String accession, String ontologyShort, String ontologyLong, int modifiedRow, String mappedTerm, Map<String, String> metadata) {
        addSampleDetails(selectedValue, accession, ontologyShort, modifiedRow);
    }

    @Override
    public Window getWindow() {
        return (Window) this;
    }

    /**
     * Add a sample cv term to the table.
     *
     * @param name
     * @param accession
     * @param ontology
     * @param modifiedRow the row to modify, use -1 if adding a new row
     */
    public void addSampleDetails(String name, String accession, String ontology, int modifiedRow) {
        addSampleDetails(name, accession, ontology, null, modifiedRow);
    }

    /**
     * Add a sample cv term to the table.
     *
     * @param name
     * @param accession
     * @param ontology
     * @param value
     * @param modifiedRow the row to modify, use -1 if adding a new row
     */
    public void addSampleDetails(String name, String accession, String ontology, String value, int modifiedRow) {

        if (modifiedRow == -1) {

            ((DefaultTableModel) this.sampleCvTermsJTable.getModel()).addRow(
                    new Object[]{
                        new Integer(sampleCvTermsJTable.getRowCount() + 1),
                        ontology,
                        accession,
                        name,
                        value
                    });
        } else {
            sampleCvTermsJTable.setValueAt(ontology, modifiedRow, 1);
            sampleCvTermsJTable.setValueAt(accession, modifiedRow, 2);
            sampleCvTermsJTable.setValueAt(name, modifiedRow, 3);
            sampleCvTermsJTable.setValueAt(null, modifiedRow, 4);
        }

        validateInput();
    }
}